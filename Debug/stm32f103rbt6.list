
stm32f103rbt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a1c  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d04  08005d04  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005d04  08005d04  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d04  08005d04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d04  08005d04  00015d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d08  08005d08  00015d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  20000070  08005d7c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005e0  08005d7c  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d014  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027bf  00000000  00000000  0002d0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea8  00000000  00000000  0002f870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  00030718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199e1  00000000  00000000  000314c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001068d  00000000  00000000  0004aea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c7b6  00000000  00000000  0005b52e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7ce4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004548  00000000  00000000  000e7d34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080052d0 	.word	0x080052d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080052d0 	.word	0x080052d0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <USART2_SendOneByte>:
uint8_t usart2_rxcounter;


//ПОСЛЕДОВАТЕЛЬНЫЙ ПОРТ ОТПРАВЛЯЕТ 1 БАЙТ
static void USART2_SendOneByte(uint8_t val)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
	((UART_HandleTypeDef *)&huart2)->Instance->DR = ((uint16_t)val & (uint16_t)0x01FF);
 800017a:	4b09      	ldr	r3, [pc, #36]	; (80001a0 <USART2_SendOneByte+0x30>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	79fa      	ldrb	r2, [r7, #7]
 8000180:	605a      	str	r2, [r3, #4]
	while((((UART_HandleTypeDef *)&huart2)->Instance->SR&0X40)==0);//ЗАВЕРШЕНИЕ ДОСТАВКИ БАЙТА
 8000182:	bf00      	nop
 8000184:	4b06      	ldr	r3, [pc, #24]	; (80001a0 <USART2_SendOneByte+0x30>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800018e:	2b00      	cmp	r3, #0
 8000190:	d0f8      	beq.n	8000184 <USART2_SendOneByte+0x14>
}
 8000192:	bf00      	nop
 8000194:	bf00      	nop
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000588 	.word	0x20000588

080001a4 <ESP8266_ATSendBuf>:


//ОТПРАВКА ДАННЫХ НА ESP8266 ФИКСИРОВАННОЙ ДЛИНЫ
void ESP8266_ATSendBuf(uint8_t* buf,uint16_t len)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	6078      	str	r0, [r7, #4]
 80001ac:	460b      	mov	r3, r1
 80001ae:	807b      	strh	r3, [r7, #2]
	memset(usart2_rxbuf,0, 256);
 80001b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b4:	2100      	movs	r1, #0
 80001b6:	4808      	ldr	r0, [pc, #32]	; (80001d8 <ESP8266_ATSendBuf+0x34>)
 80001b8:	f003 fe94 	bl	8003ee4 <memset>

	//УСТАНОВКА ОБЩИХ КОЛИЧЕСТВО ПРИНЯТЫХ ПОСЛЕДОВАТЕЛЬНЫХ ПОРТОВ РАВНЫМ 0 ПЕРЕД КАЖДОЙ ПЕРЕДАЧЕЙ
	usart2_rxcounter = 0;
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <ESP8266_ATSendBuf+0x38>)
 80001be:	2200      	movs	r2, #0
 80001c0:	701a      	strb	r2, [r3, #0]

	//ДОСТАВКА ФИКСИРОВАНОЙ ДЛИНЫ ПО USART2
	HAL_UART_Transmit(&huart2,(uint8_t *)buf,len,0xFFFF);
 80001c2:	887a      	ldrh	r2, [r7, #2]
 80001c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001c8:	6879      	ldr	r1, [r7, #4]
 80001ca:	4805      	ldr	r0, [pc, #20]	; (80001e0 <ESP8266_ATSendBuf+0x3c>)
 80001cc:	f003 f967 	bl	800349e <HAL_UART_Transmit>
}
 80001d0:	bf00      	nop
 80001d2:	3708      	adds	r7, #8
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	2000018c 	.word	0x2000018c
 80001dc:	2000038d 	.word	0x2000038d
 80001e0:	20000588 	.word	0x20000588

080001e4 <ESP8266_ATSendString>:

//ОТПРАВКА СТРОКИ В ESP8266
void ESP8266_ATSendString(char* str)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
  memset(usart2_rxbuf,0, 256);
 80001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001f0:	2100      	movs	r1, #0
 80001f2:	480b      	ldr	r0, [pc, #44]	; (8000220 <ESP8266_ATSendString+0x3c>)
 80001f4:	f003 fe76 	bl	8003ee4 <memset>

	//УСТАНОВКА ОБЩИХ КОЛИЧЕСТВО ПРИНЯТЫХ ПОСЛЕДОВАТЕЛЬНЫХ ПОРТОВ РАВНЫМ 0 ПЕРЕД КАЖДОЙ ПЕРЕДАЧЕЙ
	usart2_rxcounter = 0;
 80001f8:	4b0a      	ldr	r3, [pc, #40]	; (8000224 <ESP8266_ATSendString+0x40>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	701a      	strb	r2, [r3, #0]

	//СПОСОБ ОТПРАВКИ 1
	while(*str)		USART2_SendOneByte(*str++);
 80001fe:	e006      	b.n	800020e <ESP8266_ATSendString+0x2a>
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	1c5a      	adds	r2, r3, #1
 8000204:	607a      	str	r2, [r7, #4]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	4618      	mov	r0, r3
 800020a:	f7ff ffb1 	bl	8000170 <USART2_SendOneByte>
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	2b00      	cmp	r3, #0
 8000214:	d1f4      	bne.n	8000200 <ESP8266_ATSendString+0x1c>

	//СПОСОБ ОТПРАВКИ 2
//	HAL_UART_Transmit(&huart1,(uint8_t *)str,strlen(str),0xFFFF);
}
 8000216:	bf00      	nop
 8000218:	bf00      	nop
 800021a:	3708      	adds	r7, #8
 800021c:	46bd      	mov	sp, r7
 800021e:	bd80      	pop	{r7, pc}
 8000220:	2000018c 	.word	0x2000018c
 8000224:	2000038d 	.word	0x2000038d

08000228 <ESP8266_ExitUnvarnishedTrans>:

//ВЫХОД ИЗ ПРОЗРАЧНОГО РЕЖИМА РАБОТЫ ESP8266
void ESP8266_ExitUnvarnishedTrans(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	ESP8266_ATSendString("+++");
 800022c:	4806      	ldr	r0, [pc, #24]	; (8000248 <ESP8266_ExitUnvarnishedTrans+0x20>)
 800022e:	f7ff ffd9 	bl	80001e4 <ESP8266_ATSendString>
	HAL_Delay(50);
 8000232:	2032      	movs	r0, #50	; 0x32
 8000234:	f001 feb4 	bl	8001fa0 <HAL_Delay>
	ESP8266_ATSendString("+++");
 8000238:	4803      	ldr	r0, [pc, #12]	; (8000248 <ESP8266_ExitUnvarnishedTrans+0x20>)
 800023a:	f7ff ffd3 	bl	80001e4 <ESP8266_ATSendString>
	HAL_Delay(50);
 800023e:	2032      	movs	r0, #50	; 0x32
 8000240:	f001 feae 	bl	8001fa0 <HAL_Delay>
}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}
 8000248:	080052e8 	.word	0x080052e8

0800024c <FindStr>:

//ПРОВЕРКА СОДЕРЖИТ ЛИ СТРОКА ДРУГУЮ СТРОКУ
uint8_t FindStr(char* dest,char* src,uint16_t retry_nms)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	4613      	mov	r3, r2
 8000258:	80fb      	strh	r3, [r7, #6]
	retry_nms/=10;                   //ПЕРЕРЫВ
 800025a:	88fb      	ldrh	r3, [r7, #6]
 800025c:	4a0f      	ldr	r2, [pc, #60]	; (800029c <FindStr+0x50>)
 800025e:	fba2 2303 	umull	r2, r3, r2, r3
 8000262:	08db      	lsrs	r3, r3, #3
 8000264:	80fb      	strh	r3, [r7, #6]

	while(strstr(dest,src)==0 && retry_nms--)//ОЖИДАНИЕ ПОКА ПОСЛЕДОВАТЕЛЬНЫЙ ПОРТ ПРИМЕТ ИЛИ ЗАВЕРШИТ РАБОТУ ПОСЛЕ ПЕРЕРЫВА
 8000266:	e002      	b.n	800026e <FindStr+0x22>
	{
		HAL_Delay(10);
 8000268:	200a      	movs	r0, #10
 800026a:	f001 fe99 	bl	8001fa0 <HAL_Delay>
	while(strstr(dest,src)==0 && retry_nms--)//ОЖИДАНИЕ ПОКА ПОСЛЕДОВАТЕЛЬНЫЙ ПОРТ ПРИМЕТ ИЛИ ЗАВЕРШИТ РАБОТУ ПОСЛЕ ПЕРЕРЫВА
 800026e:	68b9      	ldr	r1, [r7, #8]
 8000270:	68f8      	ldr	r0, [r7, #12]
 8000272:	f003 feed 	bl	8004050 <strstr>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d104      	bne.n	8000286 <FindStr+0x3a>
 800027c:	88fb      	ldrh	r3, [r7, #6]
 800027e:	1e5a      	subs	r2, r3, #1
 8000280:	80fa      	strh	r2, [r7, #6]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d1f0      	bne.n	8000268 <FindStr+0x1c>
	}

	if(retry_nms) return 1;
 8000286:	88fb      	ldrh	r3, [r7, #6]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <FindStr+0x44>
 800028c:	2301      	movs	r3, #1
 800028e:	e000      	b.n	8000292 <FindStr+0x46>

	return 0;
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	cccccccd 	.word	0xcccccccd

080002a0 <ESP8266_Check>:


uint8_t ESP8266_Check(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
	uint8_t check_cnt=5;
 80002a6:	2305      	movs	r3, #5
 80002a8:	71fb      	strb	r3, [r7, #7]
	while(check_cnt--)
 80002aa:	e012      	b.n	80002d2 <ESP8266_Check+0x32>
	{
		memset(usart2_rxbuf,0,sizeof(usart2_rxbuf)); 	 //ОЧИСТКА БУФЕРА ПРИЕМА
 80002ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002b0:	2100      	movs	r1, #0
 80002b2:	480d      	ldr	r0, [pc, #52]	; (80002e8 <ESP8266_Check+0x48>)
 80002b4:	f003 fe16 	bl	8003ee4 <memset>
		ESP8266_ATSendString("AT\r\n");     		 			//ОТПРАВИТЬ ПО КОМАНДУ
 80002b8:	480c      	ldr	r0, [pc, #48]	; (80002ec <ESP8266_Check+0x4c>)
 80002ba:	f7ff ff93 	bl	80001e4 <ESP8266_ATSendString>
		if(FindStr((char*)usart2_rxbuf,"OK",200) != 0)
 80002be:	22c8      	movs	r2, #200	; 0xc8
 80002c0:	490b      	ldr	r1, [pc, #44]	; (80002f0 <ESP8266_Check+0x50>)
 80002c2:	4809      	ldr	r0, [pc, #36]	; (80002e8 <ESP8266_Check+0x48>)
 80002c4:	f7ff ffc2 	bl	800024c <FindStr>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <ESP8266_Check+0x32>
		{
			return 1;
 80002ce:	2301      	movs	r3, #1
 80002d0:	e005      	b.n	80002de <ESP8266_Check+0x3e>
	while(check_cnt--)
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	1e5a      	subs	r2, r3, #1
 80002d6:	71fa      	strb	r2, [r7, #7]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d1e7      	bne.n	80002ac <ESP8266_Check+0xc>
		}
	}
	return 0;
 80002dc:	2300      	movs	r3, #0
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	2000018c 	.word	0x2000018c
 80002ec:	080052ec 	.word	0x080052ec
 80002f0:	080052f4 	.word	0x080052f4

080002f4 <ESP8266_Init>:
/**
 * ФУНКЦИЯ ИНИЦИАЛИЗАЦИИ ESP8266
 * ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: РЕЗУЛЬТАТ ИНИЦИАЛИЗАЦИЯ ОТЛИЧНЫЙ ОТ 1 - УСПЕШНАЯ, 0 - СБОЙ
 */
uint8_t ESP8266_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	//ОЧИСТКА МАССИВА ОТПРАВКИ И ПОЛУЧЕНИЯ
	memset(usart2_txbuf,0,sizeof(usart2_txbuf));
 80002f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002fc:	2100      	movs	r1, #0
 80002fe:	481a      	ldr	r0, [pc, #104]	; (8000368 <ESP8266_Init+0x74>)
 8000300:	f003 fdf0 	bl	8003ee4 <memset>
	memset(usart2_rxbuf,0,sizeof(usart2_rxbuf));
 8000304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000308:	2100      	movs	r1, #0
 800030a:	4818      	ldr	r0, [pc, #96]	; (800036c <ESP8266_Init+0x78>)
 800030c:	f003 fdea 	bl	8003ee4 <memset>

	ESP8266_ExitUnvarnishedTrans();		//ВЫХОД ИЗ ПРОЗРАЧНОЙ ПЕРЕДАЧИ ESP8266
 8000310:	f7ff ff8a 	bl	8000228 <ESP8266_ExitUnvarnishedTrans>
	HAL_Delay(500);
 8000314:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000318:	f001 fe42 	bl	8001fa0 <HAL_Delay>
	ESP8266_ATSendString("AT+RST\r\n");
 800031c:	4814      	ldr	r0, [pc, #80]	; (8000370 <ESP8266_Init+0x7c>)
 800031e:	f7ff ff61 	bl	80001e4 <ESP8266_ATSendString>
	HAL_Delay(800);
 8000322:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000326:	f001 fe3b 	bl	8001fa0 <HAL_Delay>
	if(ESP8266_Check()==0)              //ИСПОЛЬЗОВАНИЕ КОМАНДЫ AT ЧТОБЫ ПРОВЕРИТЬ ЖИВА ЛИ ESP8266
 800032a:	f7ff ffb9 	bl	80002a0 <ESP8266_Check>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d101      	bne.n	8000338 <ESP8266_Init+0x44>
	{
		return 0;
 8000334:	2300      	movs	r3, #0
 8000336:	e014      	b.n	8000362 <ESP8266_Init+0x6e>
	}

	memset(usart2_rxbuf,0,sizeof(usart2_rxbuf));    //ОЧИСТКА БУФЕРА ПРИЕМА
 8000338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800033c:	2100      	movs	r1, #0
 800033e:	480b      	ldr	r0, [pc, #44]	; (800036c <ESP8266_Init+0x78>)
 8000340:	f003 fdd0 	bl	8003ee4 <memset>
	ESP8266_ATSendString("ATE0\r\n");     	//ВЫКЛЮЧЕНИЕ ЭХО
 8000344:	480b      	ldr	r0, [pc, #44]	; (8000374 <ESP8266_Init+0x80>)
 8000346:	f7ff ff4d 	bl	80001e4 <ESP8266_ATSendString>
	if(FindStr((char*)usart2_rxbuf,"OK",500)==0)  //НЕУДАЧНАЯ НАСТРОЙКА
 800034a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800034e:	490a      	ldr	r1, [pc, #40]	; (8000378 <ESP8266_Init+0x84>)
 8000350:	4806      	ldr	r0, [pc, #24]	; (800036c <ESP8266_Init+0x78>)
 8000352:	f7ff ff7b 	bl	800024c <FindStr>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d101      	bne.n	8000360 <ESP8266_Init+0x6c>
	{
			return 0;
 800035c:	2300      	movs	r3, #0
 800035e:	e000      	b.n	8000362 <ESP8266_Init+0x6e>
	}
	return 1;                         //УСПЕШНО НАСТРОЕНА
 8000360:	2301      	movs	r3, #1
}
 8000362:	4618      	mov	r0, r3
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000008c 	.word	0x2000008c
 800036c:	2000018c 	.word	0x2000018c
 8000370:	080052f8 	.word	0x080052f8
 8000374:	08005304 	.word	0x08005304
 8000378:	080052f4 	.word	0x080052f4

0800037c <ESP8266_ConnectAP>:
 *         ПРИЧИНЫ СБОЯ
 *         1. НЕВЕРНОЕ ИМЯ ИЛИ ПАРОЛЬ
 *         2. В МАРШРУТИЗАТОР ПОДКЛЮЧЕНО СЛИШКОМ МНОГО УСТРОЙСТВ И НЕ МОЖЕТ НАЗНАЧИТЬ IP-АДРЕС ESP8266
 */
uint8_t ESP8266_ConnectAP(char* ssid,char* pswd)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	6039      	str	r1, [r7, #0]
	uint8_t cnt=5;
 8000386:	2305      	movs	r3, #5
 8000388:	73fb      	strb	r3, [r7, #15]
	while(cnt--)
 800038a:	e010      	b.n	80003ae <ESP8266_ConnectAP+0x32>
	{
		memset(usart2_rxbuf,0,sizeof(usart2_rxbuf));//ОЧИСТКА БУФЕРА ПРИЕМА
 800038c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000390:	2100      	movs	r1, #0
 8000392:	4823      	ldr	r0, [pc, #140]	; (8000420 <ESP8266_ConnectAP+0xa4>)
 8000394:	f003 fda6 	bl	8003ee4 <memset>
		ESP8266_ATSendString("AT+CWMODE_CUR=1\r\n");              //С ПОМОЩЬЮ КОМАНД AT УСТАНОВИТЬ В РЕЖИМ СТАНЦИИ
 8000398:	4822      	ldr	r0, [pc, #136]	; (8000424 <ESP8266_ConnectAP+0xa8>)
 800039a:	f7ff ff23 	bl	80001e4 <ESP8266_ATSendString>
		if(FindStr((char*)usart2_rxbuf,"OK",200) != 0)
 800039e:	22c8      	movs	r2, #200	; 0xc8
 80003a0:	4921      	ldr	r1, [pc, #132]	; (8000428 <ESP8266_ConnectAP+0xac>)
 80003a2:	481f      	ldr	r0, [pc, #124]	; (8000420 <ESP8266_ConnectAP+0xa4>)
 80003a4:	f7ff ff52 	bl	800024c <FindStr>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d105      	bne.n	80003ba <ESP8266_ConnectAP+0x3e>
	while(cnt--)
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
 80003b0:	1e5a      	subs	r2, r3, #1
 80003b2:	73fa      	strb	r2, [r7, #15]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d1e9      	bne.n	800038c <ESP8266_ConnectAP+0x10>
 80003b8:	e000      	b.n	80003bc <ESP8266_ConnectAP+0x40>
		{
			break;
 80003ba:	bf00      	nop
		}
	}
	if(cnt == 0)
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d101      	bne.n	80003c6 <ESP8266_ConnectAP+0x4a>
		return 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	e028      	b.n	8000418 <ESP8266_ConnectAP+0x9c>

	cnt=2;
 80003c6:	2302      	movs	r3, #2
 80003c8:	73fb      	strb	r3, [r7, #15]
	while(cnt--)
 80003ca:	e01f      	b.n	800040c <ESP8266_ConnectAP+0x90>
	{
		memset(usart2_txbuf,0,sizeof(usart2_txbuf));//ОЧИСТКА БУФЕРА ОТПРАВКИ
 80003cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003d0:	2100      	movs	r1, #0
 80003d2:	4816      	ldr	r0, [pc, #88]	; (800042c <ESP8266_ConnectAP+0xb0>)
 80003d4:	f003 fd86 	bl	8003ee4 <memset>
		memset(usart2_rxbuf,0,sizeof(usart2_rxbuf));//ОЧИСТКА БУФЕРА ПРЕМА
 80003d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003dc:	2100      	movs	r1, #0
 80003de:	4810      	ldr	r0, [pc, #64]	; (8000420 <ESP8266_ConnectAP+0xa4>)
 80003e0:	f003 fd80 	bl	8003ee4 <memset>
		sprintf((char*)usart2_txbuf,"AT+CWJAP_CUR=\"%s\",\"%s\"\r\n",ssid,pswd);//С ПОМОЩЬЮ КОМАНД AT ПОДКЛЮЧЕНИЕ В ЦЕЛЕВОЙ ТОЧКЕ ДОСТУПА
 80003e4:	683b      	ldr	r3, [r7, #0]
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	4911      	ldr	r1, [pc, #68]	; (8000430 <ESP8266_ConnectAP+0xb4>)
 80003ea:	4810      	ldr	r0, [pc, #64]	; (800042c <ESP8266_ConnectAP+0xb0>)
 80003ec:	f003 fe10 	bl	8004010 <siprintf>
		ESP8266_ATSendString((char*)usart2_txbuf);
 80003f0:	480e      	ldr	r0, [pc, #56]	; (800042c <ESP8266_ConnectAP+0xb0>)
 80003f2:	f7ff fef7 	bl	80001e4 <ESP8266_ATSendString>
		if(FindStr((char*)usart2_rxbuf,"OK",8000)!=0)                      //СОЕДИНЕНИЕ ВЫПОЛНЕНО УСПЕШНО И ПРИСВОЕН IP-АДРЕСУ
 80003f6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80003fa:	490b      	ldr	r1, [pc, #44]	; (8000428 <ESP8266_ConnectAP+0xac>)
 80003fc:	4808      	ldr	r0, [pc, #32]	; (8000420 <ESP8266_ConnectAP+0xa4>)
 80003fe:	f7ff ff25 	bl	800024c <FindStr>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <ESP8266_ConnectAP+0x90>
		{
			return 1;
 8000408:	2301      	movs	r3, #1
 800040a:	e005      	b.n	8000418 <ESP8266_ConnectAP+0x9c>
	while(cnt--)
 800040c:	7bfb      	ldrb	r3, [r7, #15]
 800040e:	1e5a      	subs	r2, r3, #1
 8000410:	73fa      	strb	r2, [r7, #15]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1da      	bne.n	80003cc <ESP8266_ConnectAP+0x50>
		}
	}
	return 0;
 8000416:	2300      	movs	r3, #0
}
 8000418:	4618      	mov	r0, r3
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	2000018c 	.word	0x2000018c
 8000424:	0800531c 	.word	0x0800531c
 8000428:	080052f4 	.word	0x080052f4
 800042c:	2000008c 	.word	0x2000008c
 8000430:	08005330 	.word	0x08005330

08000434 <ESP8266_OpenTransmission>:

//ВКЛЮЧЕНИЕ РЕЖИМА ПРОЗРАЧНОЙ ПЕРЕДАЧИ
static uint8_t ESP8266_OpenTransmission(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
	//УСТАНОВЛЕНИЕ РЕДИМА ПРОЗРАЧНОЙ ПЕРЕДАЧИ
	uint8_t cnt=2;
 800043a:	2302      	movs	r3, #2
 800043c:	71fb      	strb	r3, [r7, #7]
	while(cnt--)
 800043e:	e012      	b.n	8000466 <ESP8266_OpenTransmission+0x32>
	{
		memset(usart2_rxbuf,0,sizeof(usart2_rxbuf));
 8000440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000444:	2100      	movs	r1, #0
 8000446:	480d      	ldr	r0, [pc, #52]	; (800047c <ESP8266_OpenTransmission+0x48>)
 8000448:	f003 fd4c 	bl	8003ee4 <memset>
		ESP8266_ATSendString("AT+CIPMODE=1\r\n");
 800044c:	480c      	ldr	r0, [pc, #48]	; (8000480 <ESP8266_OpenTransmission+0x4c>)
 800044e:	f7ff fec9 	bl	80001e4 <ESP8266_ATSendString>
		if(FindStr((char*)usart2_rxbuf,"OK",200)!=0)
 8000452:	22c8      	movs	r2, #200	; 0xc8
 8000454:	490b      	ldr	r1, [pc, #44]	; (8000484 <ESP8266_OpenTransmission+0x50>)
 8000456:	4809      	ldr	r0, [pc, #36]	; (800047c <ESP8266_OpenTransmission+0x48>)
 8000458:	f7ff fef8 	bl	800024c <FindStr>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <ESP8266_OpenTransmission+0x32>
		{
			return 1;
 8000462:	2301      	movs	r3, #1
 8000464:	e005      	b.n	8000472 <ESP8266_OpenTransmission+0x3e>
	while(cnt--)
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	1e5a      	subs	r2, r3, #1
 800046a:	71fa      	strb	r2, [r7, #7]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d1e7      	bne.n	8000440 <ESP8266_OpenTransmission+0xc>
		}
	}
	return 0;
 8000470:	2300      	movs	r3, #0
}
 8000472:	4618      	mov	r0, r3
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	2000018c 	.word	0x2000018c
 8000480:	0800534c 	.word	0x0800534c
 8000484:	080052f4 	.word	0x080052f4

08000488 <ESP8266_ConnectServer>:
 *         1. НЕВЕРНЫЙ IP-АДРЕС И НОМЕР ПОРТА УДАЛЕННОГО СЕРВЕРА
 *         2. НЕ ПОДКЛЮЧЕН К ТОЧКЕ ДОСТУПА
 *         3. ДОБАВЛЕНИЕ НА СТОРОНЕ СЕРВЕРА ЗАПРЕЩЕНО
 */
uint8_t ESP8266_ConnectServer(char* mode,char* ip,uint16_t port)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af02      	add	r7, sp, #8
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	4613      	mov	r3, r2
 8000494:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt;

	ESP8266_ExitUnvarnishedTrans();                   // ДЛЯ ВЫХОЖА ИЗ ПРОЗРАЧНОЙ СИТУАЦИИ ТРЕБУЕТСЯ НЕСКОЛЬКО ПОДКЛЮЧЕНИЙ
 8000496:	f7ff fec7 	bl	8000228 <ESP8266_ExitUnvarnishedTrans>
	HAL_Delay(500);
 800049a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800049e:	f001 fd7f 	bl	8001fa0 <HAL_Delay>

	//ПОДКЛЮЧЕНИЕ К СЕРВЕРУ
	cnt=2;
 80004a2:	2302      	movs	r3, #2
 80004a4:	75fb      	strb	r3, [r7, #23]
	while(cnt--)
 80004a6:	e01f      	b.n	80004e8 <ESP8266_ConnectServer+0x60>
	{
		memset(usart2_txbuf,0,sizeof(usart2_txbuf));//ОЧИСТКА БУФЕРА ОТПРАВКИ
 80004a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004ac:	2100      	movs	r1, #0
 80004ae:	4828      	ldr	r0, [pc, #160]	; (8000550 <ESP8266_ConnectServer+0xc8>)
 80004b0:	f003 fd18 	bl	8003ee4 <memset>
		memset(usart2_rxbuf,0,sizeof(usart2_rxbuf));//ОЧИСТКА БУФЕРА ПРИЕМА
 80004b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004b8:	2100      	movs	r1, #0
 80004ba:	4826      	ldr	r0, [pc, #152]	; (8000554 <ESP8266_ConnectServer+0xcc>)
 80004bc:	f003 fd12 	bl	8003ee4 <memset>
		sprintf((char*)usart2_txbuf,"AT+CIPSTART=\"%s\",\"%s\",%d\r\n",mode,ip,port);
 80004c0:	88fb      	ldrh	r3, [r7, #6]
 80004c2:	9300      	str	r3, [sp, #0]
 80004c4:	68bb      	ldr	r3, [r7, #8]
 80004c6:	68fa      	ldr	r2, [r7, #12]
 80004c8:	4923      	ldr	r1, [pc, #140]	; (8000558 <ESP8266_ConnectServer+0xd0>)
 80004ca:	4821      	ldr	r0, [pc, #132]	; (8000550 <ESP8266_ConnectServer+0xc8>)
 80004cc:	f003 fda0 	bl	8004010 <siprintf>
		ESP8266_ATSendString((char*)usart2_txbuf);
 80004d0:	481f      	ldr	r0, [pc, #124]	; (8000550 <ESP8266_ConnectServer+0xc8>)
 80004d2:	f7ff fe87 	bl	80001e4 <ESP8266_ATSendString>
		if(FindStr((char*)usart2_rxbuf,"CONNECT",8000) !=0 )
 80004d6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80004da:	4920      	ldr	r1, [pc, #128]	; (800055c <ESP8266_ConnectServer+0xd4>)
 80004dc:	481d      	ldr	r0, [pc, #116]	; (8000554 <ESP8266_ConnectServer+0xcc>)
 80004de:	f7ff feb5 	bl	800024c <FindStr>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d105      	bne.n	80004f4 <ESP8266_ConnectServer+0x6c>
	while(cnt--)
 80004e8:	7dfb      	ldrb	r3, [r7, #23]
 80004ea:	1e5a      	subs	r2, r3, #1
 80004ec:	75fa      	strb	r2, [r7, #23]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d1da      	bne.n	80004a8 <ESP8266_ConnectServer+0x20>
 80004f2:	e000      	b.n	80004f6 <ESP8266_ConnectServer+0x6e>
		{
			break;
 80004f4:	bf00      	nop
		}
	}
	if(cnt == 0)
 80004f6:	7dfb      	ldrb	r3, [r7, #23]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d101      	bne.n	8000500 <ESP8266_ConnectServer+0x78>
		return 0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	e022      	b.n	8000546 <ESP8266_ConnectServer+0xbe>

	//УСТАНОВЛЕНИЕ ПРОЗРАЧНОГО РЕЖИМА ПЕРЕДАЧИ
	if(ESP8266_OpenTransmission()==0) return 0;
 8000500:	f7ff ff98 	bl	8000434 <ESP8266_OpenTransmission>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d101      	bne.n	800050e <ESP8266_ConnectServer+0x86>
 800050a:	2300      	movs	r3, #0
 800050c:	e01b      	b.n	8000546 <ESP8266_ConnectServer+0xbe>

	//ВКЛЮЧЕНИЕ СТАТУСА ОТПРАВКИ
	cnt=2;
 800050e:	2302      	movs	r3, #2
 8000510:	75fb      	strb	r3, [r7, #23]
	while(cnt--)
 8000512:	e012      	b.n	800053a <ESP8266_ConnectServer+0xb2>
	{
		memset(usart2_rxbuf,0,sizeof(usart2_rxbuf)); //ОЧИСТКА БУФЕРА ПРИЕМА
 8000514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000518:	2100      	movs	r1, #0
 800051a:	480e      	ldr	r0, [pc, #56]	; (8000554 <ESP8266_ConnectServer+0xcc>)
 800051c:	f003 fce2 	bl	8003ee4 <memset>
		ESP8266_ATSendString("AT+CIPSEND\r\n");//С ПОМОЩЬЮ КОМАНД AT ВКЛЮЧЕНИЕ РЕЖИМА ПРОЗРАЧНОЙ ПЕРЕДАЧИ
 8000520:	480f      	ldr	r0, [pc, #60]	; (8000560 <ESP8266_ConnectServer+0xd8>)
 8000522:	f7ff fe5f 	bl	80001e4 <ESP8266_ATSendString>
		if(FindStr((char*)usart2_rxbuf,">",200)!=0)
 8000526:	22c8      	movs	r2, #200	; 0xc8
 8000528:	490e      	ldr	r1, [pc, #56]	; (8000564 <ESP8266_ConnectServer+0xdc>)
 800052a:	480a      	ldr	r0, [pc, #40]	; (8000554 <ESP8266_ConnectServer+0xcc>)
 800052c:	f7ff fe8e 	bl	800024c <FindStr>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <ESP8266_ConnectServer+0xb2>
		{
			return 1;
 8000536:	2301      	movs	r3, #1
 8000538:	e005      	b.n	8000546 <ESP8266_ConnectServer+0xbe>
	while(cnt--)
 800053a:	7dfb      	ldrb	r3, [r7, #23]
 800053c:	1e5a      	subs	r2, r3, #1
 800053e:	75fa      	strb	r2, [r7, #23]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d1e7      	bne.n	8000514 <ESP8266_ConnectServer+0x8c>
		}
	}
	return 0;
 8000544:	2300      	movs	r3, #0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	2000008c 	.word	0x2000008c
 8000554:	2000018c 	.word	0x2000018c
 8000558:	0800535c 	.word	0x0800535c
 800055c:	08005378 	.word	0x08005378
 8000560:	08005380 	.word	0x08005380
 8000564:	08005390 	.word	0x08005390

08000568 <MQTT_SendBuf>:

volatile uint16_t MQTT_TxLen;

//MQTT ОТПРАВЛЯЕТ ДАННЫЙ
void MQTT_SendBuf(uint8_t *buf,uint16_t len)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
 8000570:	460b      	mov	r3, r1
 8000572:	807b      	strh	r3, [r7, #2]
	ESP8266_ATSendBuf(buf,len);
 8000574:	887b      	ldrh	r3, [r7, #2]
 8000576:	4619      	mov	r1, r3
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff fe13 	bl	80001a4 <ESP8266_ATSendBuf>
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <MQTT_Connect>:
	MQTT_Disconnect();HAL_Delay(100);
}

//ФУНКЦИЯ УПАКОВКИ ДЛЯ СЕРВЕРА СОЕДИНЕНИЯ MQTT
uint8_t MQTT_Connect(char *ClientID,char *Username,char *Password)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	int ClientIDLen = strlen(ClientID);
 8000594:	68f8      	ldr	r0, [r7, #12]
 8000596:	f7ff fde3 	bl	8000160 <strlen>
 800059a:	4603      	mov	r3, r0
 800059c:	61fb      	str	r3, [r7, #28]
	int UsernameLen = strlen(Username);
 800059e:	68b8      	ldr	r0, [r7, #8]
 80005a0:	f7ff fdde 	bl	8000160 <strlen>
 80005a4:	4603      	mov	r3, r0
 80005a6:	61bb      	str	r3, [r7, #24]
	int PasswordLen = strlen(Password);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff fdd9 	bl	8000160 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	617b      	str	r3, [r7, #20]
	int DataLen;
	MQTT_TxLen=0;
 80005b2:	4b9d      	ldr	r3, [pc, #628]	; (8000828 <MQTT_Connect+0x2a0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	801a      	strh	r2, [r3, #0]
	//ЗАГОЛОВОК ПЕРЕМЕННОЙ + ПОЛЕЗНАЯ НАГРУЗКА, КАЖДОЕ ПОЛЕ СОДЕРЖИТ ИДЕНТИФИКАТОР ДЛИННОЙ В ДВА БАЙТА
  DataLen = 10 + (ClientIDLen+2) + (UsernameLen+2) + (PasswordLen+2);
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	f103 020c 	add.w	r2, r3, #12
 80005be:	69bb      	ldr	r3, [r7, #24]
 80005c0:	3302      	adds	r3, #2
 80005c2:	441a      	add	r2, r3
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	3302      	adds	r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24

	//ФИКСИРОВАНЫ ЗАГОЛОВОК
	//ТИП УПРАВЛЯЮЩЕГО СОЕДИНЕНИЯ
  usart2_txbuf[MQTT_TxLen++] = 0x10;		//ТИП СООБЩЕНИЕ MQTT CONNECT
 80005cc:	4b96      	ldr	r3, [pc, #600]	; (8000828 <MQTT_Connect+0x2a0>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	1c5a      	adds	r2, r3, #1
 80005d4:	b291      	uxth	r1, r2
 80005d6:	4a94      	ldr	r2, [pc, #592]	; (8000828 <MQTT_Connect+0x2a0>)
 80005d8:	8011      	strh	r1, [r2, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	4b93      	ldr	r3, [pc, #588]	; (800082c <MQTT_Connect+0x2a4>)
 80005de:	2110      	movs	r1, #16
 80005e0:	5499      	strb	r1, [r3, r2]
	//ОСТАВШАЯСЯ ДЛИНА
	do
	{
		uint8_t encodedByte = DataLen % 128;
 80005e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e4:	425a      	negs	r2, r3
 80005e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80005ee:	bf58      	it	pl
 80005f0:	4253      	negpl	r3, r2
 80005f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		DataLen = DataLen / 128;
 80005f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	da00      	bge.n	80005fe <MQTT_Connect+0x76>
 80005fc:	337f      	adds	r3, #127	; 0x7f
 80005fe:	11db      	asrs	r3, r3, #7
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
		// ЕСЛИ ДЛЯ КОДИРОВАНИЯ ТРЕБУЕТСЯ БОЛЬШЕ ДАННЫХ, УСТАНОВИТЕ ВЕРХНИЙ БИТ ЭТОГО БАЙТА
		if ( DataLen > 0 )
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	2b00      	cmp	r3, #0
 8000606:	dd05      	ble.n	8000614 <MQTT_Connect+0x8c>
			encodedByte = encodedByte | 128;
 8000608:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800060c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000610:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		usart2_txbuf[MQTT_TxLen++] = encodedByte;
 8000614:	4b84      	ldr	r3, [pc, #528]	; (8000828 <MQTT_Connect+0x2a0>)
 8000616:	881b      	ldrh	r3, [r3, #0]
 8000618:	b29b      	uxth	r3, r3
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	b291      	uxth	r1, r2
 800061e:	4a82      	ldr	r2, [pc, #520]	; (8000828 <MQTT_Connect+0x2a0>)
 8000620:	8011      	strh	r1, [r2, #0]
 8000622:	4619      	mov	r1, r3
 8000624:	4a81      	ldr	r2, [pc, #516]	; (800082c <MQTT_Connect+0x2a4>)
 8000626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800062a:	5453      	strb	r3, [r2, r1]
	}while ( DataLen > 0 );
 800062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062e:	2b00      	cmp	r3, #0
 8000630:	dcd7      	bgt.n	80005e2 <MQTT_Connect+0x5a>

	//ЗАГОЛОВОК ПЕРЕМЕННОЙ
	//ИМЯ ПРОТОКОЛА
	usart2_txbuf[MQTT_TxLen++] = 0;        		// ДЛИНА ИМЕНИ ПРОТОКОЛА MSB
 8000632:	4b7d      	ldr	r3, [pc, #500]	; (8000828 <MQTT_Connect+0x2a0>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	b29b      	uxth	r3, r3
 8000638:	1c5a      	adds	r2, r3, #1
 800063a:	b291      	uxth	r1, r2
 800063c:	4a7a      	ldr	r2, [pc, #488]	; (8000828 <MQTT_Connect+0x2a0>)
 800063e:	8011      	strh	r1, [r2, #0]
 8000640:	461a      	mov	r2, r3
 8000642:	4b7a      	ldr	r3, [pc, #488]	; (800082c <MQTT_Connect+0x2a4>)
 8000644:	2100      	movs	r1, #0
 8000646:	5499      	strb	r1, [r3, r2]
	usart2_txbuf[MQTT_TxLen++] = 4;        		// ДЛИНА ИМЕНИ ПРОТОКОЛА LSB
 8000648:	4b77      	ldr	r3, [pc, #476]	; (8000828 <MQTT_Connect+0x2a0>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	b29b      	uxth	r3, r3
 800064e:	1c5a      	adds	r2, r3, #1
 8000650:	b291      	uxth	r1, r2
 8000652:	4a75      	ldr	r2, [pc, #468]	; (8000828 <MQTT_Connect+0x2a0>)
 8000654:	8011      	strh	r1, [r2, #0]
 8000656:	461a      	mov	r2, r3
 8000658:	4b74      	ldr	r3, [pc, #464]	; (800082c <MQTT_Connect+0x2a4>)
 800065a:	2104      	movs	r1, #4
 800065c:	5499      	strb	r1, [r3, r2]
	usart2_txbuf[MQTT_TxLen++] = 'M';        	// ASCII КОД ДЛЯ M
 800065e:	4b72      	ldr	r3, [pc, #456]	; (8000828 <MQTT_Connect+0x2a0>)
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	b29b      	uxth	r3, r3
 8000664:	1c5a      	adds	r2, r3, #1
 8000666:	b291      	uxth	r1, r2
 8000668:	4a6f      	ldr	r2, [pc, #444]	; (8000828 <MQTT_Connect+0x2a0>)
 800066a:	8011      	strh	r1, [r2, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b6f      	ldr	r3, [pc, #444]	; (800082c <MQTT_Connect+0x2a4>)
 8000670:	214d      	movs	r1, #77	; 0x4d
 8000672:	5499      	strb	r1, [r3, r2]
	usart2_txbuf[MQTT_TxLen++] = 'Q';        	// ASCII КОД ДЛЯ Q
 8000674:	4b6c      	ldr	r3, [pc, #432]	; (8000828 <MQTT_Connect+0x2a0>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	b29b      	uxth	r3, r3
 800067a:	1c5a      	adds	r2, r3, #1
 800067c:	b291      	uxth	r1, r2
 800067e:	4a6a      	ldr	r2, [pc, #424]	; (8000828 <MQTT_Connect+0x2a0>)
 8000680:	8011      	strh	r1, [r2, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	4b69      	ldr	r3, [pc, #420]	; (800082c <MQTT_Connect+0x2a4>)
 8000686:	2151      	movs	r1, #81	; 0x51
 8000688:	5499      	strb	r1, [r3, r2]
	usart2_txbuf[MQTT_TxLen++] = 'T';        	// ASCII КОД ДЛЯ T
 800068a:	4b67      	ldr	r3, [pc, #412]	; (8000828 <MQTT_Connect+0x2a0>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	b29b      	uxth	r3, r3
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	b291      	uxth	r1, r2
 8000694:	4a64      	ldr	r2, [pc, #400]	; (8000828 <MQTT_Connect+0x2a0>)
 8000696:	8011      	strh	r1, [r2, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b64      	ldr	r3, [pc, #400]	; (800082c <MQTT_Connect+0x2a4>)
 800069c:	2154      	movs	r1, #84	; 0x54
 800069e:	5499      	strb	r1, [r3, r2]
	usart2_txbuf[MQTT_TxLen++] = 'T';        	// ASCII КОД ДЛЯ T
 80006a0:	4b61      	ldr	r3, [pc, #388]	; (8000828 <MQTT_Connect+0x2a0>)
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	b291      	uxth	r1, r2
 80006aa:	4a5f      	ldr	r2, [pc, #380]	; (8000828 <MQTT_Connect+0x2a0>)
 80006ac:	8011      	strh	r1, [r2, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b5e      	ldr	r3, [pc, #376]	; (800082c <MQTT_Connect+0x2a4>)
 80006b2:	2154      	movs	r1, #84	; 0x54
 80006b4:	5499      	strb	r1, [r3, r2]
	//УРОВЕНЬ ПРОТОКОЛА
	usart2_txbuf[MQTT_TxLen++] = 4;        		// MQTT ВЕРСИЯ ПРОТОКОЛА = 4
 80006b6:	4b5c      	ldr	r3, [pc, #368]	; (8000828 <MQTT_Connect+0x2a0>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	b291      	uxth	r1, r2
 80006c0:	4a59      	ldr	r2, [pc, #356]	; (8000828 <MQTT_Connect+0x2a0>)
 80006c2:	8011      	strh	r1, [r2, #0]
 80006c4:	461a      	mov	r2, r3
 80006c6:	4b59      	ldr	r3, [pc, #356]	; (800082c <MQTT_Connect+0x2a4>)
 80006c8:	2104      	movs	r1, #4
 80006ca:	5499      	strb	r1, [r3, r2]
	//ЗНАК ПОДКЛЮЧЕНИЕ
	usart2_txbuf[MQTT_TxLen++] = 0xc2;        	// ФЛАГ СОЕДИНЕНИЯ
 80006cc:	4b56      	ldr	r3, [pc, #344]	; (8000828 <MQTT_Connect+0x2a0>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	b291      	uxth	r1, r2
 80006d6:	4a54      	ldr	r2, [pc, #336]	; (8000828 <MQTT_Connect+0x2a0>)
 80006d8:	8011      	strh	r1, [r2, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	4b53      	ldr	r3, [pc, #332]	; (800082c <MQTT_Connect+0x2a4>)
 80006de:	21c2      	movs	r1, #194	; 0xc2
 80006e0:	5499      	strb	r1, [r3, r2]
	usart2_txbuf[MQTT_TxLen++] = 0;        		// ПРОДОЛЖИТЕЛЬНОСТЬ ВРЕМЕНИ ПОДДЕРЖАНИЯ РАБОТОСПОСОБНОСТИ MSB
 80006e2:	4b51      	ldr	r3, [pc, #324]	; (8000828 <MQTT_Connect+0x2a0>)
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	1c5a      	adds	r2, r3, #1
 80006ea:	b291      	uxth	r1, r2
 80006ec:	4a4e      	ldr	r2, [pc, #312]	; (8000828 <MQTT_Connect+0x2a0>)
 80006ee:	8011      	strh	r1, [r2, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b4e      	ldr	r3, [pc, #312]	; (800082c <MQTT_Connect+0x2a4>)
 80006f4:	2100      	movs	r1, #0
 80006f6:	5499      	strb	r1, [r3, r2]
	usart2_txbuf[MQTT_TxLen++] = 60;        	// ПРОДОЛЖИТЕЛЬНОСТЬ ВРЕМЕНИ ПОДДЕРЖАНИЯ РАБОТОСПОСОБНОСТИ LSB
 80006f8:	4b4b      	ldr	r3, [pc, #300]	; (8000828 <MQTT_Connect+0x2a0>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	b291      	uxth	r1, r2
 8000702:	4a49      	ldr	r2, [pc, #292]	; (8000828 <MQTT_Connect+0x2a0>)
 8000704:	8011      	strh	r1, [r2, #0]
 8000706:	461a      	mov	r2, r3
 8000708:	4b48      	ldr	r3, [pc, #288]	; (800082c <MQTT_Connect+0x2a4>)
 800070a:	213c      	movs	r1, #60	; 0x3c
 800070c:	5499      	strb	r1, [r3, r2]

	usart2_txbuf[MQTT_TxLen++] = BYTE1(ClientIDLen);// ДЛИНА ИДЕНТИФИКАТОРА КЛИЕНТА MSB
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	3301      	adds	r3, #1
 8000714:	4a44      	ldr	r2, [pc, #272]	; (8000828 <MQTT_Connect+0x2a0>)
 8000716:	8812      	ldrh	r2, [r2, #0]
 8000718:	b292      	uxth	r2, r2
 800071a:	1c51      	adds	r1, r2, #1
 800071c:	b288      	uxth	r0, r1
 800071e:	4942      	ldr	r1, [pc, #264]	; (8000828 <MQTT_Connect+0x2a0>)
 8000720:	8008      	strh	r0, [r1, #0]
 8000722:	7819      	ldrb	r1, [r3, #0]
 8000724:	4b41      	ldr	r3, [pc, #260]	; (800082c <MQTT_Connect+0x2a4>)
 8000726:	5499      	strb	r1, [r3, r2]
	usart2_txbuf[MQTT_TxLen++] = BYTE0(ClientIDLen);// ДЛИНА ИДЕНТИФИКАТОРА КЛИЕНТА LSB
 8000728:	f107 021c 	add.w	r2, r7, #28
 800072c:	4b3e      	ldr	r3, [pc, #248]	; (8000828 <MQTT_Connect+0x2a0>)
 800072e:	881b      	ldrh	r3, [r3, #0]
 8000730:	b29b      	uxth	r3, r3
 8000732:	1c59      	adds	r1, r3, #1
 8000734:	b288      	uxth	r0, r1
 8000736:	493c      	ldr	r1, [pc, #240]	; (8000828 <MQTT_Connect+0x2a0>)
 8000738:	8008      	strh	r0, [r1, #0]
 800073a:	4619      	mov	r1, r3
 800073c:	7812      	ldrb	r2, [r2, #0]
 800073e:	4b3b      	ldr	r3, [pc, #236]	; (800082c <MQTT_Connect+0x2a4>)
 8000740:	545a      	strb	r2, [r3, r1]
	memcpy(&usart2_txbuf[MQTT_TxLen],ClientID,ClientIDLen);
 8000742:	4b39      	ldr	r3, [pc, #228]	; (8000828 <MQTT_Connect+0x2a0>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	b29b      	uxth	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	4b38      	ldr	r3, [pc, #224]	; (800082c <MQTT_Connect+0x2a4>)
 800074c:	4413      	add	r3, r2
 800074e:	69fa      	ldr	r2, [r7, #28]
 8000750:	68f9      	ldr	r1, [r7, #12]
 8000752:	4618      	mov	r0, r3
 8000754:	f003 fbb8 	bl	8003ec8 <memcpy>
	MQTT_TxLen += ClientIDLen;
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	b29a      	uxth	r2, r3
 800075c:	4b32      	ldr	r3, [pc, #200]	; (8000828 <MQTT_Connect+0x2a0>)
 800075e:	881b      	ldrh	r3, [r3, #0]
 8000760:	b29b      	uxth	r3, r3
 8000762:	4413      	add	r3, r2
 8000764:	b29a      	uxth	r2, r3
 8000766:	4b30      	ldr	r3, [pc, #192]	; (8000828 <MQTT_Connect+0x2a0>)
 8000768:	801a      	strh	r2, [r3, #0]

	if(UsernameLen > 0)
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	2b00      	cmp	r3, #0
 800076e:	dd2d      	ble.n	80007cc <MQTT_Connect+0x244>
	{
		usart2_txbuf[MQTT_TxLen++] = BYTE1(UsernameLen);		//ДЛИНА ЛОГИНА MSB
 8000770:	f107 0318 	add.w	r3, r7, #24
 8000774:	3301      	adds	r3, #1
 8000776:	4a2c      	ldr	r2, [pc, #176]	; (8000828 <MQTT_Connect+0x2a0>)
 8000778:	8812      	ldrh	r2, [r2, #0]
 800077a:	b292      	uxth	r2, r2
 800077c:	1c51      	adds	r1, r2, #1
 800077e:	b288      	uxth	r0, r1
 8000780:	4929      	ldr	r1, [pc, #164]	; (8000828 <MQTT_Connect+0x2a0>)
 8000782:	8008      	strh	r0, [r1, #0]
 8000784:	7819      	ldrb	r1, [r3, #0]
 8000786:	4b29      	ldr	r3, [pc, #164]	; (800082c <MQTT_Connect+0x2a4>)
 8000788:	5499      	strb	r1, [r3, r2]
		usart2_txbuf[MQTT_TxLen++] = BYTE0(UsernameLen);    	//ДЛИНА ЛОГИНА LSB
 800078a:	f107 0218 	add.w	r2, r7, #24
 800078e:	4b26      	ldr	r3, [pc, #152]	; (8000828 <MQTT_Connect+0x2a0>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	b29b      	uxth	r3, r3
 8000794:	1c59      	adds	r1, r3, #1
 8000796:	b288      	uxth	r0, r1
 8000798:	4923      	ldr	r1, [pc, #140]	; (8000828 <MQTT_Connect+0x2a0>)
 800079a:	8008      	strh	r0, [r1, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	7812      	ldrb	r2, [r2, #0]
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <MQTT_Connect+0x2a4>)
 80007a2:	545a      	strb	r2, [r3, r1]
		memcpy(&usart2_txbuf[MQTT_TxLen],Username,UsernameLen);
 80007a4:	4b20      	ldr	r3, [pc, #128]	; (8000828 <MQTT_Connect+0x2a0>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	461a      	mov	r2, r3
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MQTT_Connect+0x2a4>)
 80007ae:	4413      	add	r3, r2
 80007b0:	69ba      	ldr	r2, [r7, #24]
 80007b2:	68b9      	ldr	r1, [r7, #8]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f003 fb87 	bl	8003ec8 <memcpy>
		MQTT_TxLen += UsernameLen;
 80007ba:	69bb      	ldr	r3, [r7, #24]
 80007bc:	b29a      	uxth	r2, r3
 80007be:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MQTT_Connect+0x2a0>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	4413      	add	r3, r2
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MQTT_Connect+0x2a0>)
 80007ca:	801a      	strh	r2, [r3, #0]
	}

	if(PasswordLen > 0)
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	dd33      	ble.n	800083a <MQTT_Connect+0x2b2>
	{
		usart2_txbuf[MQTT_TxLen++] = BYTE1(PasswordLen);		//ДЛИНА ПАРОЛЯ MSB
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	3301      	adds	r3, #1
 80007d8:	4a13      	ldr	r2, [pc, #76]	; (8000828 <MQTT_Connect+0x2a0>)
 80007da:	8812      	ldrh	r2, [r2, #0]
 80007dc:	b292      	uxth	r2, r2
 80007de:	1c51      	adds	r1, r2, #1
 80007e0:	b288      	uxth	r0, r1
 80007e2:	4911      	ldr	r1, [pc, #68]	; (8000828 <MQTT_Connect+0x2a0>)
 80007e4:	8008      	strh	r0, [r1, #0]
 80007e6:	7819      	ldrb	r1, [r3, #0]
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <MQTT_Connect+0x2a4>)
 80007ea:	5499      	strb	r1, [r3, r2]
		usart2_txbuf[MQTT_TxLen++] = BYTE0(PasswordLen);    	//ДЛИНА ПАРОЛЯ LSB
 80007ec:	f107 0214 	add.w	r2, r7, #20
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MQTT_Connect+0x2a0>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	1c59      	adds	r1, r3, #1
 80007f8:	b288      	uxth	r0, r1
 80007fa:	490b      	ldr	r1, [pc, #44]	; (8000828 <MQTT_Connect+0x2a0>)
 80007fc:	8008      	strh	r0, [r1, #0]
 80007fe:	4619      	mov	r1, r3
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MQTT_Connect+0x2a4>)
 8000804:	545a      	strb	r2, [r3, r1]
		memcpy(&usart2_txbuf[MQTT_TxLen],Password,PasswordLen);
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MQTT_Connect+0x2a0>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	b29b      	uxth	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	4b07      	ldr	r3, [pc, #28]	; (800082c <MQTT_Connect+0x2a4>)
 8000810:	4413      	add	r3, r2
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fb56 	bl	8003ec8 <memcpy>
		MQTT_TxLen += PasswordLen;
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	b29a      	uxth	r2, r3
 8000820:	4b01      	ldr	r3, [pc, #4]	; (8000828 <MQTT_Connect+0x2a0>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	e004      	b.n	8000830 <MQTT_Connect+0x2a8>
 8000826:	bf00      	nop
 8000828:	2000038e 	.word	0x2000038e
 800082c:	2000008c 	.word	0x2000008c
 8000830:	b29b      	uxth	r3, r3
 8000832:	4413      	add	r3, r2
 8000834:	b29a      	uxth	r2, r3
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MQTT_Connect+0x320>)
 8000838:	801a      	strh	r2, [r3, #0]
	}

	uint8_t cnt=2;
 800083a:	2302      	movs	r3, #2
 800083c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	uint8_t wait;
	while(cnt--)
 8000840:	e026      	b.n	8000890 <MQTT_Connect+0x308>
	{
		memset(usart2_rxbuf,0,sizeof(usart2_rxbuf));
 8000842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000846:	2100      	movs	r1, #0
 8000848:	4818      	ldr	r0, [pc, #96]	; (80008ac <MQTT_Connect+0x324>)
 800084a:	f003 fb4b 	bl	8003ee4 <memset>
		MQTT_SendBuf(usart2_txbuf,MQTT_TxLen);
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MQTT_Connect+0x320>)
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	b29b      	uxth	r3, r3
 8000854:	4619      	mov	r1, r3
 8000856:	4816      	ldr	r0, [pc, #88]	; (80008b0 <MQTT_Connect+0x328>)
 8000858:	f7ff fe86 	bl	8000568 <MQTT_SendBuf>
		wait=30;//ОЖИДАНИЕ 3 СЕКУНДЫ
 800085c:	231e      	movs	r3, #30
 800085e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		while(wait--)
 8000862:	e00e      	b.n	8000882 <MQTT_Connect+0x2fa>
		{
			//CONNECT
			if(usart2_rxbuf[0]==parket_connetAck[0] && usart2_rxbuf[1]==parket_connetAck[1]) //УСПЕШНОЕ ПОДКЛЮЧЕНИЕ
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MQTT_Connect+0x324>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2220      	movs	r2, #32
 800086a:	4293      	cmp	r3, r2
 800086c:	d106      	bne.n	800087c <MQTT_Connect+0x2f4>
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MQTT_Connect+0x324>)
 8000870:	785b      	ldrb	r3, [r3, #1]
 8000872:	2202      	movs	r2, #2
 8000874:	4293      	cmp	r3, r2
 8000876:	d101      	bne.n	800087c <MQTT_Connect+0x2f4>
			{
				return 1;//УСПЕШНОЕ ПОДКЛЮЧЕНИЕ
 8000878:	2301      	movs	r3, #1
 800087a:	e011      	b.n	80008a0 <MQTT_Connect+0x318>
			}
			HAL_Delay(100);
 800087c:	2064      	movs	r0, #100	; 0x64
 800087e:	f001 fb8f 	bl	8001fa0 <HAL_Delay>
		while(wait--)
 8000882:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000886:	1e5a      	subs	r2, r3, #1
 8000888:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1e9      	bne.n	8000864 <MQTT_Connect+0x2dc>
	while(cnt--)
 8000890:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000894:	1e5a      	subs	r2, r3, #1
 8000896:	f887 2022 	strb.w	r2, [r7, #34]	; 0x22
 800089a:	2b00      	cmp	r3, #0
 800089c:	d1d1      	bne.n	8000842 <MQTT_Connect+0x2ba>
		}
	}
	return 0;
 800089e:	2300      	movs	r3, #0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3728      	adds	r7, #40	; 0x28
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000038e 	.word	0x2000038e
 80008ac:	2000018c 	.word	0x2000018c
 80008b0:	2000008c 	.word	0x2000008c

080008b4 <MQTT_SubscribeTopic>:
//ФУНКЦИЯ: УПАКОВКИ ДАННЫХ ПОДПИСКИ/ОТКАЗА ОТ ПОДПИСКИ MQTT
//topic       ПРЕДМЕТ
//qos         УРОВЕНЬ СООБЩЕНИЯ
//whether     ПАКЕТ ЗАПРОСОВ НА ПОДПИСКУ/ОТКАЗ ОТ ПОДПИСКИ
uint8_t MQTT_SubscribeTopic(char *topic,uint8_t qos,uint8_t whether)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	70fb      	strb	r3, [r7, #3]
 80008c0:	4613      	mov	r3, r2
 80008c2:	70bb      	strb	r3, [r7, #2]
	MQTT_TxLen=0;
 80008c4:	4b6b      	ldr	r3, [pc, #428]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	801a      	strh	r2, [r3, #0]
	int topiclen = strlen(topic);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff fc48 	bl	8000160 <strlen>
 80008d0:	4603      	mov	r3, r0
 80008d2:	60fb      	str	r3, [r7, #12]

	int DataLen = 2 + (topiclen+2) + (whether?1:0);//ДЛИНА ЗАГОЛОВКА ПЕРЕМЕННОЙ (2 БАЙТА) + ДЛИНА ПОЛЕЗНОЙ НАГРУЗКИ
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	3304      	adds	r3, #4
 80008d8:	78ba      	ldrb	r2, [r7, #2]
 80008da:	2a00      	cmp	r2, #0
 80008dc:	bf14      	ite	ne
 80008de:	2201      	movne	r2, #1
 80008e0:	2200      	moveq	r2, #0
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	4413      	add	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]
	//ФИКСИРОВАННЫЙ ЗАГОЛОВОК
	//ТИП УПРАВЛЯЮЩЕГО СООБЩЕНИЯ
	if(whether) usart2_txbuf[MQTT_TxLen++] = 0x82; //ТИП СООБЩЕНИЕ И ПОДПИСКА НА ЛОГОТИП
 80008e8:	78bb      	ldrb	r3, [r7, #2]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d00b      	beq.n	8000906 <MQTT_SubscribeTopic+0x52>
 80008ee:	4b61      	ldr	r3, [pc, #388]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	b291      	uxth	r1, r2
 80008f8:	4a5e      	ldr	r2, [pc, #376]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 80008fa:	8011      	strh	r1, [r2, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b5e      	ldr	r3, [pc, #376]	; (8000a78 <MQTT_SubscribeTopic+0x1c4>)
 8000900:	2182      	movs	r1, #130	; 0x82
 8000902:	5499      	strb	r1, [r3, r2]
 8000904:	e00a      	b.n	800091c <MQTT_SubscribeTopic+0x68>
	else	usart2_txbuf[MQTT_TxLen++] = 0xA2;    //ОТПИСКА
 8000906:	4b5b      	ldr	r3, [pc, #364]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 8000908:	881b      	ldrh	r3, [r3, #0]
 800090a:	b29b      	uxth	r3, r3
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	b291      	uxth	r1, r2
 8000910:	4a58      	ldr	r2, [pc, #352]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 8000912:	8011      	strh	r1, [r2, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b58      	ldr	r3, [pc, #352]	; (8000a78 <MQTT_SubscribeTopic+0x1c4>)
 8000918:	21a2      	movs	r1, #162	; 0xa2
 800091a:	5499      	strb	r1, [r3, r2]

	//ОСТАВШАЯСЯ ДЛИНА
	do
	{
		uint8_t encodedByte = DataLen % 128;
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	425a      	negs	r2, r3
 8000920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000924:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000928:	bf58      	it	pl
 800092a:	4253      	negpl	r3, r2
 800092c:	74fb      	strb	r3, [r7, #19]
		DataLen = DataLen / 128;
 800092e:	697b      	ldr	r3, [r7, #20]
 8000930:	2b00      	cmp	r3, #0
 8000932:	da00      	bge.n	8000936 <MQTT_SubscribeTopic+0x82>
 8000934:	337f      	adds	r3, #127	; 0x7f
 8000936:	11db      	asrs	r3, r3, #7
 8000938:	617b      	str	r3, [r7, #20]
		// ЕСЛИ ДЛЯ КОДИРОВАНИЯ ТРЕБУЕТСЯ БОЛЬШЕ ДАННЫХ, УСТАНОВИТЕ ВЕРХНИЙ БИТ ЭТОГО БАЙТА
		if ( DataLen > 0 )
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	2b00      	cmp	r3, #0
 800093e:	dd03      	ble.n	8000948 <MQTT_SubscribeTopic+0x94>
			encodedByte = encodedByte | 128;
 8000940:	7cfb      	ldrb	r3, [r7, #19]
 8000942:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000946:	74fb      	strb	r3, [r7, #19]
		usart2_txbuf[MQTT_TxLen++] = encodedByte;
 8000948:	4b4a      	ldr	r3, [pc, #296]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	b29b      	uxth	r3, r3
 800094e:	1c5a      	adds	r2, r3, #1
 8000950:	b291      	uxth	r1, r2
 8000952:	4a48      	ldr	r2, [pc, #288]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 8000954:	8011      	strh	r1, [r2, #0]
 8000956:	4619      	mov	r1, r3
 8000958:	4a47      	ldr	r2, [pc, #284]	; (8000a78 <MQTT_SubscribeTopic+0x1c4>)
 800095a:	7cfb      	ldrb	r3, [r7, #19]
 800095c:	5453      	strb	r3, [r2, r1]
	}while ( DataLen > 0 );
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	2b00      	cmp	r3, #0
 8000962:	dcdb      	bgt.n	800091c <MQTT_SubscribeTopic+0x68>

	//ЗАГОЛОВОК ПЕРЕМЕННОЙ
	usart2_txbuf[MQTT_TxLen++] = 0;				//ИНДИФИКАТОР СООБЩЕНИЕ MSB
 8000964:	4b43      	ldr	r3, [pc, #268]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	b29b      	uxth	r3, r3
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	b291      	uxth	r1, r2
 800096e:	4a41      	ldr	r2, [pc, #260]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 8000970:	8011      	strh	r1, [r2, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	4b40      	ldr	r3, [pc, #256]	; (8000a78 <MQTT_SubscribeTopic+0x1c4>)
 8000976:	2100      	movs	r1, #0
 8000978:	5499      	strb	r1, [r3, r2]
	usart2_txbuf[MQTT_TxLen++] = 0x01;           //ИНДИФИКАТОР СООБЩЕНИЕ LSB
 800097a:	4b3e      	ldr	r3, [pc, #248]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	b29b      	uxth	r3, r3
 8000980:	1c5a      	adds	r2, r3, #1
 8000982:	b291      	uxth	r1, r2
 8000984:	4a3b      	ldr	r2, [pc, #236]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 8000986:	8011      	strh	r1, [r2, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b3b      	ldr	r3, [pc, #236]	; (8000a78 <MQTT_SubscribeTopic+0x1c4>)
 800098c:	2101      	movs	r1, #1
 800098e:	5499      	strb	r1, [r3, r2]
	//ПОЛЕЗНЫЕ НАГРУЗКИ
	usart2_txbuf[MQTT_TxLen++] = BYTE1(topiclen);//ДЛИНА ТЕМЫ MSB
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	3301      	adds	r3, #1
 8000996:	4a37      	ldr	r2, [pc, #220]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 8000998:	8812      	ldrh	r2, [r2, #0]
 800099a:	b292      	uxth	r2, r2
 800099c:	1c51      	adds	r1, r2, #1
 800099e:	b288      	uxth	r0, r1
 80009a0:	4934      	ldr	r1, [pc, #208]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 80009a2:	8008      	strh	r0, [r1, #0]
 80009a4:	7819      	ldrb	r1, [r3, #0]
 80009a6:	4b34      	ldr	r3, [pc, #208]	; (8000a78 <MQTT_SubscribeTopic+0x1c4>)
 80009a8:	5499      	strb	r1, [r3, r2]
	usart2_txbuf[MQTT_TxLen++] = BYTE0(topiclen);//ДЛИНА ТЕМЫ LSB
 80009aa:	f107 020c 	add.w	r2, r7, #12
 80009ae:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	1c59      	adds	r1, r3, #1
 80009b6:	b288      	uxth	r0, r1
 80009b8:	492e      	ldr	r1, [pc, #184]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 80009ba:	8008      	strh	r0, [r1, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	7812      	ldrb	r2, [r2, #0]
 80009c0:	4b2d      	ldr	r3, [pc, #180]	; (8000a78 <MQTT_SubscribeTopic+0x1c4>)
 80009c2:	545a      	strb	r2, [r3, r1]
	memcpy(&usart2_txbuf[MQTT_TxLen],topic,topiclen);
 80009c4:	4b2b      	ldr	r3, [pc, #172]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b2a      	ldr	r3, [pc, #168]	; (8000a78 <MQTT_SubscribeTopic+0x1c4>)
 80009ce:	4413      	add	r3, r2
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f003 fa77 	bl	8003ec8 <memcpy>
	MQTT_TxLen += topiclen;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	b29a      	uxth	r2, r3
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4413      	add	r3, r2
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	4b22      	ldr	r3, [pc, #136]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 80009ea:	801a      	strh	r2, [r3, #0]

	if(whether)
 80009ec:	78bb      	ldrb	r3, [r7, #2]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d00a      	beq.n	8000a08 <MQTT_SubscribeTopic+0x154>
	{
		usart2_txbuf[MQTT_TxLen++] = qos;//УРОВЕНЬ QOS
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	1c5a      	adds	r2, r3, #1
 80009fa:	b291      	uxth	r1, r2
 80009fc:	4a1d      	ldr	r2, [pc, #116]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 80009fe:	8011      	strh	r1, [r2, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	4a1d      	ldr	r2, [pc, #116]	; (8000a78 <MQTT_SubscribeTopic+0x1c4>)
 8000a04:	78fb      	ldrb	r3, [r7, #3]
 8000a06:	5453      	strb	r3, [r2, r1]
	}

	uint8_t cnt=2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	74bb      	strb	r3, [r7, #18]
	uint8_t wait;
	while(cnt--)
 8000a0c:	e023      	b.n	8000a56 <MQTT_SubscribeTopic+0x1a2>
	{
		memset(usart2_rxbuf,0,sizeof(usart2_rxbuf));
 8000a0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a12:	2100      	movs	r1, #0
 8000a14:	4819      	ldr	r0, [pc, #100]	; (8000a7c <MQTT_SubscribeTopic+0x1c8>)
 8000a16:	f003 fa65 	bl	8003ee4 <memset>
		MQTT_SendBuf(usart2_txbuf,MQTT_TxLen);
 8000a1a:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <MQTT_SubscribeTopic+0x1c0>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	4619      	mov	r1, r3
 8000a22:	4815      	ldr	r0, [pc, #84]	; (8000a78 <MQTT_SubscribeTopic+0x1c4>)
 8000a24:	f7ff fda0 	bl	8000568 <MQTT_SendBuf>
		wait=30;//ОЖИДАНИЕ 3 СЕКУНДУ
 8000a28:	231e      	movs	r3, #30
 8000a2a:	747b      	strb	r3, [r7, #17]
		while(wait--)
 8000a2c:	e00e      	b.n	8000a4c <MQTT_SubscribeTopic+0x198>
		{
			if(usart2_rxbuf[0]==parket_subAck[0] && usart2_rxbuf[1]==parket_subAck[1]) //ПОДПИСКА ПРОШЛА УСПЕШНО
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MQTT_SubscribeTopic+0x1c8>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2290      	movs	r2, #144	; 0x90
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d106      	bne.n	8000a46 <MQTT_SubscribeTopic+0x192>
 8000a38:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MQTT_SubscribeTopic+0x1c8>)
 8000a3a:	785b      	ldrb	r3, [r3, #1]
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d101      	bne.n	8000a46 <MQTT_SubscribeTopic+0x192>
			{
				return 1;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e012      	b.n	8000a6c <MQTT_SubscribeTopic+0x1b8>
			}
			HAL_Delay(100);
 8000a46:	2064      	movs	r0, #100	; 0x64
 8000a48:	f001 faaa 	bl	8001fa0 <HAL_Delay>
		while(wait--)
 8000a4c:	7c7b      	ldrb	r3, [r7, #17]
 8000a4e:	1e5a      	subs	r2, r3, #1
 8000a50:	747a      	strb	r2, [r7, #17]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1eb      	bne.n	8000a2e <MQTT_SubscribeTopic+0x17a>
	while(cnt--)
 8000a56:	7cbb      	ldrb	r3, [r7, #18]
 8000a58:	1e5a      	subs	r2, r3, #1
 8000a5a:	74ba      	strb	r2, [r7, #18]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d1d6      	bne.n	8000a0e <MQTT_SubscribeTopic+0x15a>
		}
	}
	if(cnt) return 1;
 8000a60:	7cbb      	ldrb	r3, [r7, #18]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MQTT_SubscribeTopic+0x1b6>
 8000a66:	2301      	movs	r3, #1
 8000a68:	e000      	b.n	8000a6c <MQTT_SubscribeTopic+0x1b8>
	return 0;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3718      	adds	r7, #24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000038e 	.word	0x2000038e
 8000a78:	2000008c 	.word	0x2000008c
 8000a7c:	2000018c 	.word	0x2000018c

08000a80 <MQTT_PublishData>:
//ФУНКЦИЯ УПАКОВКИ ДАННЫХ ПУБЛИКАЦИИ MQTT
//topic   ПРЕДМЕТ
//message НОВОСТЬ
//qos     УРОВЕНЬ СООБЩЕНИЯ
uint8_t MQTT_PublishData(char *topic, char *message, uint8_t qos)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	4613      	mov	r3, r2
 8000a8c:	71fb      	strb	r3, [r7, #7]
	int topicLength = strlen(topic);
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f7ff fb66 	bl	8000160 <strlen>
 8000a94:	4603      	mov	r3, r0
 8000a96:	613b      	str	r3, [r7, #16]
	int messageLength = strlen(message);
 8000a98:	68b8      	ldr	r0, [r7, #8]
 8000a9a:	f7ff fb61 	bl	8000160 <strlen>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	617b      	str	r3, [r7, #20]
	static uint16_t id=0;
	int DataLen;
	MQTT_TxLen=0;
 8000aa2:	4b59      	ldr	r3, [pc, #356]	; (8000c08 <MQTT_PublishData+0x188>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	801a      	strh	r2, [r3, #0]
	//ДЛИНА ПОЛЕЗНОЙ НАГРУЗКИ РАССЧИТЫВАЕТСЯ СЛЕДУЮЩИМ ОБРАЗОВ: ВЫЧТИТЕ ДЛИНУ ЗАГОЛОВКА ПЕРЕМЕННОЙ ИЗ ЗНАЧЕНИ ЯПОЛЯ ОСТАВШЕЙСЯ ДЛИНЫ В ФИКСИРОВАННО ЗАГОЛОВКЕ
	//НЕТ ИДЕНТИФИКАТОРА, КОГДА QOS РАВЕН 0
	//ДЛИННА ДАННЫХ            ИМЯ СУБЪЕКТА   ИДЕНТИФИКАТОР ПАКЕТА  ПОЛЕЗНАЯ НАГРУЗКА
	if(qos)	DataLen = (2+topicLength) + 2 + messageLength;
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d005      	beq.n	8000aba <MQTT_PublishData+0x3a>
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	61fb      	str	r3, [r7, #28]
 8000ab8:	e004      	b.n	8000ac4 <MQTT_PublishData+0x44>
	else	DataLen = (2+topicLength) + messageLength;
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	3302      	adds	r3, #2
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	61fb      	str	r3, [r7, #28]

    //ФИКСИРОВАННЫЙ ЗАГОЛОВОК
	//ТИП УПРАВЛЯЮЩЕГО СООБЩЕНИЯ
	usart2_txbuf[MQTT_TxLen++] = 0x30;    // MQTT ТИП СООБЩЕНИЕ PUBLISH
 8000ac4:	4b50      	ldr	r3, [pc, #320]	; (8000c08 <MQTT_PublishData+0x188>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	1c5a      	adds	r2, r3, #1
 8000acc:	b291      	uxth	r1, r2
 8000ace:	4a4e      	ldr	r2, [pc, #312]	; (8000c08 <MQTT_PublishData+0x188>)
 8000ad0:	8011      	strh	r1, [r2, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4b4d      	ldr	r3, [pc, #308]	; (8000c0c <MQTT_PublishData+0x18c>)
 8000ad6:	2130      	movs	r1, #48	; 0x30
 8000ad8:	5499      	strb	r1, [r3, r2]

	//ОСТАВШАЯСЯ ДЛИНА
	do
	{
		uint8_t encodedByte = DataLen % 128;
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	425a      	negs	r2, r3
 8000ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ae2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000ae6:	bf58      	it	pl
 8000ae8:	4253      	negpl	r3, r2
 8000aea:	76fb      	strb	r3, [r7, #27]
		DataLen = DataLen / 128;
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	da00      	bge.n	8000af4 <MQTT_PublishData+0x74>
 8000af2:	337f      	adds	r3, #127	; 0x7f
 8000af4:	11db      	asrs	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
		// ЕСЛИ ДЛЯ КОДИРОВАНИЯ ТРЕБУЕТСЯ БОЛЬШЕ ДАННЫХ, УСТАНОВИТЕ ВЕРХНИЙ БИТ ЭТОГО БАЙТА
		if ( DataLen > 0 )
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	dd03      	ble.n	8000b06 <MQTT_PublishData+0x86>
			encodedByte = encodedByte | 128;
 8000afe:	7efb      	ldrb	r3, [r7, #27]
 8000b00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b04:	76fb      	strb	r3, [r7, #27]
		usart2_txbuf[MQTT_TxLen++] = encodedByte;
 8000b06:	4b40      	ldr	r3, [pc, #256]	; (8000c08 <MQTT_PublishData+0x188>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	1c5a      	adds	r2, r3, #1
 8000b0e:	b291      	uxth	r1, r2
 8000b10:	4a3d      	ldr	r2, [pc, #244]	; (8000c08 <MQTT_PublishData+0x188>)
 8000b12:	8011      	strh	r1, [r2, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	4a3d      	ldr	r2, [pc, #244]	; (8000c0c <MQTT_PublishData+0x18c>)
 8000b18:	7efb      	ldrb	r3, [r7, #27]
 8000b1a:	5453      	strb	r3, [r2, r1]
	}while ( DataLen > 0 );
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	dcdb      	bgt.n	8000ada <MQTT_PublishData+0x5a>

	usart2_txbuf[MQTT_TxLen++] = BYTE1(topicLength);//ДЛИНА ТЕМЫ MSB
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	3301      	adds	r3, #1
 8000b28:	4a37      	ldr	r2, [pc, #220]	; (8000c08 <MQTT_PublishData+0x188>)
 8000b2a:	8812      	ldrh	r2, [r2, #0]
 8000b2c:	b292      	uxth	r2, r2
 8000b2e:	1c51      	adds	r1, r2, #1
 8000b30:	b288      	uxth	r0, r1
 8000b32:	4935      	ldr	r1, [pc, #212]	; (8000c08 <MQTT_PublishData+0x188>)
 8000b34:	8008      	strh	r0, [r1, #0]
 8000b36:	7819      	ldrb	r1, [r3, #0]
 8000b38:	4b34      	ldr	r3, [pc, #208]	; (8000c0c <MQTT_PublishData+0x18c>)
 8000b3a:	5499      	strb	r1, [r3, r2]
	usart2_txbuf[MQTT_TxLen++] = BYTE0(topicLength);//ДЛИНА ТЕМЫ LSB
 8000b3c:	f107 0210 	add.w	r2, r7, #16
 8000b40:	4b31      	ldr	r3, [pc, #196]	; (8000c08 <MQTT_PublishData+0x188>)
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	1c59      	adds	r1, r3, #1
 8000b48:	b288      	uxth	r0, r1
 8000b4a:	492f      	ldr	r1, [pc, #188]	; (8000c08 <MQTT_PublishData+0x188>)
 8000b4c:	8008      	strh	r0, [r1, #0]
 8000b4e:	4619      	mov	r1, r3
 8000b50:	7812      	ldrb	r2, [r2, #0]
 8000b52:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <MQTT_PublishData+0x18c>)
 8000b54:	545a      	strb	r2, [r3, r1]
	memcpy(&usart2_txbuf[MQTT_TxLen],topic,topicLength);//КОПИРОВАТЬ  ТЕМУ
 8000b56:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <MQTT_PublishData+0x188>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <MQTT_PublishData+0x18c>)
 8000b60:	4413      	add	r3, r2
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	68f9      	ldr	r1, [r7, #12]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 f9ae 	bl	8003ec8 <memcpy>
	MQTT_TxLen += topicLength;
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	4b25      	ldr	r3, [pc, #148]	; (8000c08 <MQTT_PublishData+0x188>)
 8000b72:	881b      	ldrh	r3, [r3, #0]
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	4413      	add	r3, r2
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <MQTT_PublishData+0x188>)
 8000b7c:	801a      	strh	r2, [r3, #0]

	//ИДЕНТИФИКАТОР СООБЩЕНИЯ
	if(qos)
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d01d      	beq.n	8000bc0 <MQTT_PublishData+0x140>
	{
			usart2_txbuf[MQTT_TxLen++] = BYTE1(id);
 8000b84:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <MQTT_PublishData+0x190>)
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <MQTT_PublishData+0x188>)
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	1c59      	adds	r1, r3, #1
 8000b8e:	b288      	uxth	r0, r1
 8000b90:	491d      	ldr	r1, [pc, #116]	; (8000c08 <MQTT_PublishData+0x188>)
 8000b92:	8008      	strh	r0, [r1, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	7812      	ldrb	r2, [r2, #0]
 8000b98:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <MQTT_PublishData+0x18c>)
 8000b9a:	545a      	strb	r2, [r3, r1]
			usart2_txbuf[MQTT_TxLen++] = BYTE0(id);
 8000b9c:	4a1d      	ldr	r2, [pc, #116]	; (8000c14 <MQTT_PublishData+0x194>)
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MQTT_PublishData+0x188>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	1c59      	adds	r1, r3, #1
 8000ba6:	b288      	uxth	r0, r1
 8000ba8:	4917      	ldr	r1, [pc, #92]	; (8000c08 <MQTT_PublishData+0x188>)
 8000baa:	8008      	strh	r0, [r1, #0]
 8000bac:	4619      	mov	r1, r3
 8000bae:	7812      	ldrb	r2, [r2, #0]
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <MQTT_PublishData+0x18c>)
 8000bb2:	545a      	strb	r2, [r3, r1]
			id++;
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <MQTT_PublishData+0x194>)
 8000bb6:	881b      	ldrh	r3, [r3, #0]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MQTT_PublishData+0x194>)
 8000bbe:	801a      	strh	r2, [r3, #0]
	}
	memcpy(&usart2_txbuf[MQTT_TxLen],message,messageLength);
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MQTT_PublishData+0x188>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <MQTT_PublishData+0x18c>)
 8000bca:	4413      	add	r3, r2
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	68b9      	ldr	r1, [r7, #8]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f003 f979 	bl	8003ec8 <memcpy>
  MQTT_TxLen += messageLength;
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MQTT_PublishData+0x188>)
 8000bdc:	881b      	ldrh	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	4413      	add	r3, r2
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MQTT_PublishData+0x188>)
 8000be6:	801a      	strh	r2, [r3, #0]

	MQTT_SendBuf(usart2_txbuf,MQTT_TxLen);
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MQTT_PublishData+0x188>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4806      	ldr	r0, [pc, #24]	; (8000c0c <MQTT_PublishData+0x18c>)
 8000bf2:	f7ff fcb9 	bl	8000568 <MQTT_SendBuf>
  return MQTT_TxLen;
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <MQTT_PublishData+0x188>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	b2db      	uxtb	r3, r3
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	2000038e 	.word	0x2000038e
 8000c0c:	2000008c 	.word	0x2000008c
 8000c10:	20000391 	.word	0x20000391
 8000c14:	20000390 	.word	0x20000390

08000c18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0310 	add.w	r3, r7, #16
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b3c      	ldr	r3, [pc, #240]	; (8000d20 <MX_GPIO_Init+0x108>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a3b      	ldr	r2, [pc, #236]	; (8000d20 <MX_GPIO_Init+0x108>)
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b39      	ldr	r3, [pc, #228]	; (8000d20 <MX_GPIO_Init+0x108>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0310 	and.w	r3, r3, #16
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c44:	4b36      	ldr	r3, [pc, #216]	; (8000d20 <MX_GPIO_Init+0x108>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a35      	ldr	r2, [pc, #212]	; (8000d20 <MX_GPIO_Init+0x108>)
 8000c4a:	f043 0320 	orr.w	r3, r3, #32
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <MX_GPIO_Init+0x108>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f003 0320 	and.w	r3, r3, #32
 8000c58:	60bb      	str	r3, [r7, #8]
 8000c5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <MX_GPIO_Init+0x108>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a2f      	ldr	r2, [pc, #188]	; (8000d20 <MX_GPIO_Init+0x108>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <MX_GPIO_Init+0x108>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c74:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <MX_GPIO_Init+0x108>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	4a29      	ldr	r2, [pc, #164]	; (8000d20 <MX_GPIO_Init+0x108>)
 8000c7a:	f043 0308 	orr.w	r3, r3, #8
 8000c7e:	6193      	str	r3, [r2, #24]
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <MX_GPIO_Init+0x108>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f003 0308 	and.w	r3, r3, #8
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2120      	movs	r1, #32
 8000c90:	4824      	ldr	r0, [pc, #144]	; (8000d24 <MX_GPIO_Init+0x10c>)
 8000c92:	f001 fd02 	bl	800269a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000c9c:	4822      	ldr	r0, [pc, #136]	; (8000d28 <MX_GPIO_Init+0x110>)
 8000c9e:	f001 fcfc 	bl	800269a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0;
 8000ca2:	f242 0301 	movw	r3, #8193	; 0x2001
 8000ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca8:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_GPIO_Init+0x114>)
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	481e      	ldr	r0, [pc, #120]	; (8000d30 <MX_GPIO_Init+0x118>)
 8000cb8:	f001 fb54 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000cbc:	2320      	movs	r3, #32
 8000cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4814      	ldr	r0, [pc, #80]	; (8000d24 <MX_GPIO_Init+0x10c>)
 8000cd4:	f001 fb46 	bl	8002364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000cd8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_GPIO_Init+0x110>)
 8000cf2:	f001 fb37 	bl	8002364 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2105      	movs	r1, #5
 8000cfa:	2006      	movs	r0, #6
 8000cfc:	f001 fa4b 	bl	8002196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d00:	2006      	movs	r0, #6
 8000d02:	f001 fa64 	bl	80021ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2105      	movs	r1, #5
 8000d0a:	2028      	movs	r0, #40	; 0x28
 8000d0c:	f001 fa43 	bl	8002196 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d10:	2028      	movs	r0, #40	; 0x28
 8000d12:	f001 fa5c 	bl	80021ce <HAL_NVIC_EnableIRQ>

}
 8000d16:	bf00      	nop
 8000d18:	3720      	adds	r7, #32
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010800 	.word	0x40010800
 8000d28:	40010c00 	.word	0x40010c00
 8000d2c:	10110000 	.word	0x10110000
 8000d30:	40011000 	.word	0x40011000

08000d34 <delayUs>:
static uint8_t dht11ReadBit(void);//Read One Bit
static uint8_t dht11Check(void);//Chack DHT11
static void dht11Rst(void);//Reset DHT11
//Пользовательская функция задержки
void delayUs(uint32_t nus)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	TIM1_Delay_us(nus);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 ff79 	bl	8001c38 <TIM1_Delay_us>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <DHT11_IO_OUT>:


void DHT11_IO_OUT(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef myGPIO_InitStruct;
		myGPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d56:	2320      	movs	r3, #32
 8000d58:	603b      	str	r3, [r7, #0]
		myGPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	607b      	str	r3, [r7, #4]
		myGPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(GPIOA, &myGPIO_InitStruct);
 8000d62:	463b      	mov	r3, r7
 8000d64:	4619      	mov	r1, r3
 8000d66:	4803      	ldr	r0, [pc, #12]	; (8000d74 <DHT11_IO_OUT+0x24>)
 8000d68:	f001 fafc 	bl	8002364 <HAL_GPIO_Init>
}
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40010800 	.word	0x40010800

08000d78 <DHT11_IO_IN>:

void DHT11_IO_IN(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
		GPIO_InitTypeDef myGPIO_InitStruct;
		myGPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d7e:	2320      	movs	r3, #32
 8000d80:	603b      	str	r3, [r7, #0]
	  myGPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d82:	2301      	movs	r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
		myGPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
		myGPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_Init(GPIOA, &myGPIO_InitStruct);
 8000d8e:	463b      	mov	r3, r7
 8000d90:	4619      	mov	r1, r3
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <DHT11_IO_IN+0x28>)
 8000d94:	f001 fae6 	bl	8002364 <HAL_GPIO_Init>
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40010800 	.word	0x40010800

08000da4 <dht11Rst>:
//Reset DHT11
static void dht11Rst(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
    DHT11_IO_OUT(); 			            //SET OUTPUT
 8000da8:	f7ff ffd2 	bl	8000d50 <DHT11_IO_OUT>
    DHT11_DQ_OUT_0; 			            //GPIOA.0=0
 8000dac:	2200      	movs	r2, #0
 8000dae:	2120      	movs	r1, #32
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <dht11Rst+0x2c>)
 8000db2:	f001 fc72 	bl	800269a <HAL_GPIO_WritePin>
    HAL_Delay(20);    			          //Pull down Least 18ms
 8000db6:	2014      	movs	r0, #20
 8000db8:	f001 f8f2 	bl	8001fa0 <HAL_Delay>
    DHT11_DQ_OUT_1; 			            //GPIOA.0=1
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2120      	movs	r1, #32
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <dht11Rst+0x2c>)
 8000dc2:	f001 fc6a 	bl	800269a <HAL_GPIO_WritePin>
    delayUs(30);     			            //Pull up 20~40us
 8000dc6:	201e      	movs	r0, #30
 8000dc8:	f7ff ffb4 	bl	8000d34 <delayUs>
}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40010800 	.word	0x40010800

08000dd4 <dht11Check>:

static uint8_t dht11Check(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
    uint8_t retry=0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	71fb      	strb	r3, [r7, #7]
    DHT11_IO_IN();                                              //SET INPUT
 8000dde:	f7ff ffcb 	bl	8000d78 <DHT11_IO_IN>
    while (DHT11_DQ_IN && (retry<100))                          //DHT11 Pull down 40~80us
 8000de2:	e005      	b.n	8000df0 <dht11Check+0x1c>
    {
        retry++;
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	3301      	adds	r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
        delayUs(1);
 8000dea:	2001      	movs	r0, #1
 8000dec:	f7ff ffa2 	bl	8000d34 <delayUs>
    while (DHT11_DQ_IN && (retry<100))                          //DHT11 Pull down 40~80us
 8000df0:	2120      	movs	r1, #32
 8000df2:	4815      	ldr	r0, [pc, #84]	; (8000e48 <dht11Check+0x74>)
 8000df4:	f001 fc3a 	bl	800266c <HAL_GPIO_ReadPin>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d002      	beq.n	8000e04 <dht11Check+0x30>
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b63      	cmp	r3, #99	; 0x63
 8000e02:	d9ef      	bls.n	8000de4 <dht11Check+0x10>
    }

    if(retry >= 100)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	2b63      	cmp	r3, #99	; 0x63
 8000e08:	d901      	bls.n	8000e0e <dht11Check+0x3a>
    {
        return 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e018      	b.n	8000e40 <dht11Check+0x6c>
    }
    else
    {
        retry=0;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	71fb      	strb	r3, [r7, #7]
    }

    while (!DHT11_DQ_IN&& (retry < 100))		    //DHT11 Pull up 40~80us
 8000e12:	e005      	b.n	8000e20 <dht11Check+0x4c>
    {
        retry++;
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	3301      	adds	r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]
        delayUs(1);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f7ff ff8a 	bl	8000d34 <delayUs>
    while (!DHT11_DQ_IN&& (retry < 100))		    //DHT11 Pull up 40~80us
 8000e20:	2120      	movs	r1, #32
 8000e22:	4809      	ldr	r0, [pc, #36]	; (8000e48 <dht11Check+0x74>)
 8000e24:	f001 fc22 	bl	800266c <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d102      	bne.n	8000e34 <dht11Check+0x60>
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b63      	cmp	r3, #99	; 0x63
 8000e32:	d9ef      	bls.n	8000e14 <dht11Check+0x40>
    }

    if(retry >= 100)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	2b63      	cmp	r3, #99	; 0x63
 8000e38:	d901      	bls.n	8000e3e <dht11Check+0x6a>
    {
        return 1;	                        //check error
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e000      	b.n	8000e40 <dht11Check+0x6c>
    }

    return 0;
 8000e3e:	2300      	movs	r3, #0
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40010800 	.word	0x40010800

08000e4c <dht11ReadBit>:

static uint8_t dht11ReadBit(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
    uint8_t retry=0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	71fb      	strb	r3, [r7, #7]
    while(DHT11_DQ_IN && (retry<100))                           //wait become Low level
 8000e56:	e005      	b.n	8000e64 <dht11ReadBit+0x18>
    {
        retry++;
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	71fb      	strb	r3, [r7, #7]
        delayUs(1);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f7ff ff68 	bl	8000d34 <delayUs>
    while(DHT11_DQ_IN && (retry<100))                           //wait become Low level
 8000e64:	2120      	movs	r1, #32
 8000e66:	4816      	ldr	r0, [pc, #88]	; (8000ec0 <dht11ReadBit+0x74>)
 8000e68:	f001 fc00 	bl	800266c <HAL_GPIO_ReadPin>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <dht11ReadBit+0x2c>
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b63      	cmp	r3, #99	; 0x63
 8000e76:	d9ef      	bls.n	8000e58 <dht11ReadBit+0xc>
    }

    retry = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	71fb      	strb	r3, [r7, #7]
    while(!DHT11_DQ_IN && (retry < 100))		    //wait become High level
 8000e7c:	e005      	b.n	8000e8a <dht11ReadBit+0x3e>
    {
        retry++;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	3301      	adds	r3, #1
 8000e82:	71fb      	strb	r3, [r7, #7]
        delayUs(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff ff55 	bl	8000d34 <delayUs>
    while(!DHT11_DQ_IN && (retry < 100))		    //wait become High level
 8000e8a:	2120      	movs	r1, #32
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <dht11ReadBit+0x74>)
 8000e8e:	f001 fbed 	bl	800266c <HAL_GPIO_ReadPin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <dht11ReadBit+0x52>
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b63      	cmp	r3, #99	; 0x63
 8000e9c:	d9ef      	bls.n	8000e7e <dht11ReadBit+0x32>
    }

    delayUs(30);//wait 40us
 8000e9e:	201e      	movs	r0, #30
 8000ea0:	f7ff ff48 	bl	8000d34 <delayUs>

    if(DHT11_DQ_IN)
 8000ea4:	2120      	movs	r1, #32
 8000ea6:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <dht11ReadBit+0x74>)
 8000ea8:	f001 fbe0 	bl	800266c <HAL_GPIO_ReadPin>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <dht11ReadBit+0x6a>
    {
        return 1;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e000      	b.n	8000eb8 <dht11ReadBit+0x6c>
    }
    else
    {
        return 0;
 8000eb6:	2300      	movs	r3, #0
    }
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40010800 	.word	0x40010800

08000ec4 <dht11ReadByte>:

static uint8_t dht11ReadByte(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
    uint8_t i,dat;
    dat=0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	71bb      	strb	r3, [r7, #6]
    for (i=0; i<8; i++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	71fb      	strb	r3, [r7, #7]
 8000ed2:	e00c      	b.n	8000eee <dht11ReadByte+0x2a>
    {
        dat<<=1;
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	71bb      	strb	r3, [r7, #6]
        dat |= dht11ReadBit();
 8000eda:	f7ff ffb7 	bl	8000e4c <dht11ReadBit>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	79bb      	ldrb	r3, [r7, #6]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	71bb      	strb	r3, [r7, #6]
    for (i=0; i<8; i++)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	3301      	adds	r3, #1
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b07      	cmp	r3, #7
 8000ef2:	d9ef      	bls.n	8000ed4 <dht11ReadByte+0x10>
    }

    return dat;
 8000ef4:	79bb      	ldrb	r3, [r7, #6]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <dht11ReadData>:

static uint8_t dht11ReadData(uint8_t *temperature, uint8_t *humidity)
{
 8000efe:	b590      	push	{r4, r7, lr}
 8000f00:	b085      	sub	sp, #20
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	6039      	str	r1, [r7, #0]
    uint8_t buf[5];
    uint8_t i;
    dht11Rst();
 8000f08:	f7ff ff4c 	bl	8000da4 <dht11Rst>
    if(0 == dht11Check())
 8000f0c:	f7ff ff62 	bl	8000dd4 <dht11Check>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d125      	bne.n	8000f62 <dht11ReadData+0x64>
    {
        for(i=0; i<5; i++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	73fb      	strb	r3, [r7, #15]
 8000f1a:	e00c      	b.n	8000f36 <dht11ReadData+0x38>
        {
            buf[i] = dht11ReadByte();
 8000f1c:	7bfc      	ldrb	r4, [r7, #15]
 8000f1e:	f7ff ffd1 	bl	8000ec4 <dht11ReadByte>
 8000f22:	4603      	mov	r3, r0
 8000f24:	461a      	mov	r2, r3
 8000f26:	f104 0310 	add.w	r3, r4, #16
 8000f2a:	443b      	add	r3, r7
 8000f2c:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(i=0; i<5; i++)
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	3301      	adds	r3, #1
 8000f34:	73fb      	strb	r3, [r7, #15]
 8000f36:	7bfb      	ldrb	r3, [r7, #15]
 8000f38:	2b04      	cmp	r3, #4
 8000f3a:	d9ef      	bls.n	8000f1c <dht11ReadData+0x1e>
        }
        if(buf[4] == (buf[0]+buf[1]+buf[2]+buf[3]))
 8000f3c:	7b3b      	ldrb	r3, [r7, #12]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	7a3b      	ldrb	r3, [r7, #8]
 8000f42:	4619      	mov	r1, r3
 8000f44:	7a7b      	ldrb	r3, [r7, #9]
 8000f46:	440b      	add	r3, r1
 8000f48:	7ab9      	ldrb	r1, [r7, #10]
 8000f4a:	440b      	add	r3, r1
 8000f4c:	7af9      	ldrb	r1, [r7, #11]
 8000f4e:	440b      	add	r3, r1
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d108      	bne.n	8000f66 <dht11ReadData+0x68>
        {
            *humidity = buf[0];
 8000f54:	7a3a      	ldrb	r2, [r7, #8]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	701a      	strb	r2, [r3, #0]
            *temperature = buf[2];
 8000f5a:	7aba      	ldrb	r2, [r7, #10]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	e001      	b.n	8000f66 <dht11ReadData+0x68>
        }
    }
    else
    {
        return 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e000      	b.n	8000f68 <dht11ReadData+0x6a>
    }

    return 0;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}

08000f70 <dht11Read>:

uint8_t dht11Read(uint8_t *temperature, uint8_t *humidity)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
    uint8_t curTem = 0, curHum = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	727b      	strb	r3, [r7, #9]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	723b      	strb	r3, [r7, #8]
    uint16_t temMeans = 0, humMeans = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	81fb      	strh	r3, [r7, #14]
 8000f86:	2300      	movs	r3, #0
 8000f88:	81bb      	strh	r3, [r7, #12]
    uint8_t curI = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	72fb      	strb	r3, [r7, #11]
    uint8_t ret = 0;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	72bb      	strb	r3, [r7, #10]

    ret = dht11ReadData(&curTem, &curHum);
 8000f92:	f107 0208 	add.w	r2, r7, #8
 8000f96:	f107 0309 	add.w	r3, r7, #9
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ffae 	bl	8000efe <dht11ReadData>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	72bb      	strb	r3, [r7, #10]

    if(1 != ret)
 8000fa6:	7abb      	ldrb	r3, [r7, #10]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d034      	beq.n	8001016 <dht11Read+0xa6>
    {
        //Cycle store ten times stronghold
        if(MEAN_NUM > temphumTypedef.curI)
 8000fac:	4b56      	ldr	r3, [pc, #344]	; (8001108 <dht11Read+0x198>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b09      	cmp	r3, #9
 8000fb2:	d816      	bhi.n	8000fe2 <dht11Read+0x72>
        {
            temphumTypedef.thBufs[temphumTypedef.curI][0] = curTem;
 8000fb4:	4b54      	ldr	r3, [pc, #336]	; (8001108 <dht11Read+0x198>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	7a79      	ldrb	r1, [r7, #9]
 8000fba:	4a53      	ldr	r2, [pc, #332]	; (8001108 <dht11Read+0x198>)
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	709a      	strb	r2, [r3, #2]
            temphumTypedef.thBufs[temphumTypedef.curI][1] = curHum;
 8000fc4:	4b50      	ldr	r3, [pc, #320]	; (8001108 <dht11Read+0x198>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	7a39      	ldrb	r1, [r7, #8]
 8000fca:	4a4f      	ldr	r2, [pc, #316]	; (8001108 <dht11Read+0x198>)
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	4413      	add	r3, r2
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	70da      	strb	r2, [r3, #3]

            temphumTypedef.curI++;
 8000fd4:	4b4c      	ldr	r3, [pc, #304]	; (8001108 <dht11Read+0x198>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b4a      	ldr	r3, [pc, #296]	; (8001108 <dht11Read+0x198>)
 8000fde:	701a      	strb	r2, [r3, #0]
 8000fe0:	e01b      	b.n	800101a <dht11Read+0xaa>
        }
        else
        {
            temphumTypedef.curI = 0;
 8000fe2:	4b49      	ldr	r3, [pc, #292]	; (8001108 <dht11Read+0x198>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]

            temphumTypedef.thBufs[temphumTypedef.curI][0] = curTem;
 8000fe8:	4b47      	ldr	r3, [pc, #284]	; (8001108 <dht11Read+0x198>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	7a79      	ldrb	r1, [r7, #9]
 8000fee:	4a46      	ldr	r2, [pc, #280]	; (8001108 <dht11Read+0x198>)
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4413      	add	r3, r2
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	709a      	strb	r2, [r3, #2]
            temphumTypedef.thBufs[temphumTypedef.curI][1] = curHum;
 8000ff8:	4b43      	ldr	r3, [pc, #268]	; (8001108 <dht11Read+0x198>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	7a39      	ldrb	r1, [r7, #8]
 8000ffe:	4a42      	ldr	r2, [pc, #264]	; (8001108 <dht11Read+0x198>)
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	4413      	add	r3, r2
 8001004:	460a      	mov	r2, r1
 8001006:	70da      	strb	r2, [r3, #3]

            temphumTypedef.curI++;
 8001008:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <dht11Read+0x198>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <dht11Read+0x198>)
 8001012:	701a      	strb	r2, [r3, #0]
 8001014:	e001      	b.n	800101a <dht11Read+0xaa>
        }
    }
    else
    {
        return (1);
 8001016:	2301      	movs	r3, #1
 8001018:	e072      	b.n	8001100 <dht11Read+0x190>
    }

    if(MEAN_NUM <= temphumTypedef.curI)
 800101a:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <dht11Read+0x198>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b09      	cmp	r3, #9
 8001020:	d902      	bls.n	8001028 <dht11Read+0xb8>
    {
        temphumTypedef.thAmount = MEAN_NUM;
 8001022:	4b39      	ldr	r3, [pc, #228]	; (8001108 <dht11Read+0x198>)
 8001024:	220a      	movs	r2, #10
 8001026:	705a      	strb	r2, [r3, #1]
    }

    if(0 == temphumTypedef.thAmount)
 8001028:	4b37      	ldr	r3, [pc, #220]	; (8001108 <dht11Read+0x198>)
 800102a:	785b      	ldrb	r3, [r3, #1]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d131      	bne.n	8001094 <dht11Read+0x124>
    {
        //Calculate Before ten the mean
        for(curI = 0; curI < temphumTypedef.curI; curI++)
 8001030:	2300      	movs	r3, #0
 8001032:	72fb      	strb	r3, [r7, #11]
 8001034:	e014      	b.n	8001060 <dht11Read+0xf0>
        {
            temMeans += temphumTypedef.thBufs[curI][0];
 8001036:	7afb      	ldrb	r3, [r7, #11]
 8001038:	4a33      	ldr	r2, [pc, #204]	; (8001108 <dht11Read+0x198>)
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	789b      	ldrb	r3, [r3, #2]
 8001040:	b29a      	uxth	r2, r3
 8001042:	89fb      	ldrh	r3, [r7, #14]
 8001044:	4413      	add	r3, r2
 8001046:	81fb      	strh	r3, [r7, #14]
            humMeans += temphumTypedef.thBufs[curI][1];
 8001048:	7afb      	ldrb	r3, [r7, #11]
 800104a:	4a2f      	ldr	r2, [pc, #188]	; (8001108 <dht11Read+0x198>)
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4413      	add	r3, r2
 8001050:	78db      	ldrb	r3, [r3, #3]
 8001052:	b29a      	uxth	r2, r3
 8001054:	89bb      	ldrh	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	81bb      	strh	r3, [r7, #12]
        for(curI = 0; curI < temphumTypedef.curI; curI++)
 800105a:	7afb      	ldrb	r3, [r7, #11]
 800105c:	3301      	adds	r3, #1
 800105e:	72fb      	strb	r3, [r7, #11]
 8001060:	4b29      	ldr	r3, [pc, #164]	; (8001108 <dht11Read+0x198>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	7afa      	ldrb	r2, [r7, #11]
 8001066:	429a      	cmp	r2, r3
 8001068:	d3e5      	bcc.n	8001036 <dht11Read+0xc6>
        }

        temMeans = temMeans / temphumTypedef.curI;
 800106a:	89fb      	ldrh	r3, [r7, #14]
 800106c:	4a26      	ldr	r2, [pc, #152]	; (8001108 <dht11Read+0x198>)
 800106e:	7812      	ldrb	r2, [r2, #0]
 8001070:	fb93 f3f2 	sdiv	r3, r3, r2
 8001074:	81fb      	strh	r3, [r7, #14]
        humMeans = humMeans / temphumTypedef.curI;
 8001076:	89bb      	ldrh	r3, [r7, #12]
 8001078:	4a23      	ldr	r2, [pc, #140]	; (8001108 <dht11Read+0x198>)
 800107a:	7812      	ldrb	r2, [r2, #0]
 800107c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001080:	81bb      	strh	r3, [r7, #12]

        *temperature = temMeans;
 8001082:	89fb      	ldrh	r3, [r7, #14]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	701a      	strb	r2, [r3, #0]
        *humidity = humMeans;
 800108a:	89bb      	ldrh	r3, [r7, #12]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	e034      	b.n	80010fe <dht11Read+0x18e>
    }
    else if(MEAN_NUM == temphumTypedef.thAmount)
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <dht11Read+0x198>)
 8001096:	785b      	ldrb	r3, [r3, #1]
 8001098:	2b0a      	cmp	r3, #10
 800109a:	d130      	bne.n	80010fe <dht11Read+0x18e>
    {
        //Calculate After ten times the mean
        for(curI = 0; curI < temphumTypedef.thAmount; curI++)
 800109c:	2300      	movs	r3, #0
 800109e:	72fb      	strb	r3, [r7, #11]
 80010a0:	e014      	b.n	80010cc <dht11Read+0x15c>
        {
            temMeans += temphumTypedef.thBufs[curI][0];
 80010a2:	7afb      	ldrb	r3, [r7, #11]
 80010a4:	4a18      	ldr	r2, [pc, #96]	; (8001108 <dht11Read+0x198>)
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	789b      	ldrb	r3, [r3, #2]
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	89fb      	ldrh	r3, [r7, #14]
 80010b0:	4413      	add	r3, r2
 80010b2:	81fb      	strh	r3, [r7, #14]
            humMeans += temphumTypedef.thBufs[curI][1];
 80010b4:	7afb      	ldrb	r3, [r7, #11]
 80010b6:	4a14      	ldr	r2, [pc, #80]	; (8001108 <dht11Read+0x198>)
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	78db      	ldrb	r3, [r3, #3]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	89bb      	ldrh	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	81bb      	strh	r3, [r7, #12]
        for(curI = 0; curI < temphumTypedef.thAmount; curI++)
 80010c6:	7afb      	ldrb	r3, [r7, #11]
 80010c8:	3301      	adds	r3, #1
 80010ca:	72fb      	strb	r3, [r7, #11]
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <dht11Read+0x198>)
 80010ce:	785b      	ldrb	r3, [r3, #1]
 80010d0:	7afa      	ldrb	r2, [r7, #11]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d3e5      	bcc.n	80010a2 <dht11Read+0x132>
        }

        temMeans = temMeans / temphumTypedef.thAmount;
 80010d6:	89fb      	ldrh	r3, [r7, #14]
 80010d8:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <dht11Read+0x198>)
 80010da:	7852      	ldrb	r2, [r2, #1]
 80010dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80010e0:	81fb      	strh	r3, [r7, #14]
        humMeans = humMeans / temphumTypedef.thAmount;
 80010e2:	89bb      	ldrh	r3, [r7, #12]
 80010e4:	4a08      	ldr	r2, [pc, #32]	; (8001108 <dht11Read+0x198>)
 80010e6:	7852      	ldrb	r2, [r2, #1]
 80010e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80010ec:	81bb      	strh	r3, [r7, #12]

        *temperature = (uint8_t)temMeans;
 80010ee:	89fb      	ldrh	r3, [r7, #14]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	701a      	strb	r2, [r3, #0]
        *humidity = (uint8_t)humMeans;
 80010f6:	89bb      	ldrh	r3, [r7, #12]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	701a      	strb	r2, [r3, #0]
    }

    return (0);
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000394 	.word	0x20000394

0800110c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001112:	f000 fee3 	bl	8001edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001116:	f000 f83f 	bl	8001198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800111a:	f7ff fd7d 	bl	8000c18 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800111e:	f000 fdc7 	bl	8001cb0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001122:	f000 fdef 	bl	8001d04 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001126:	f000 fd17 	bl	8001b58 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2,usart2_rxone,1);			//ОТКРОЙТЕ ПРЕРЫВАНИЙ USART1 И ПОЛУЧИТЕ СООБЩЕНИЕ О ПОДПИСКЕ
 800112a:	2201      	movs	r2, #1
 800112c:	4915      	ldr	r1, [pc, #84]	; (8001184 <main+0x78>)
 800112e:	4816      	ldr	r0, [pc, #88]	; (8001188 <main+0x7c>)
 8001130:	f002 fa47 	bl	80035c2 <HAL_UART_Receive_IT>
	ES8266_MQTT_Init();										//ИНИЦИАЛИЗИРОВАТЬ MQTT
 8001134:	f000 f9d8 	bl	80014e8 <ES8266_MQTT_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint16_t Counter_RUNInfo_Send = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	80fb      	strh	r3, [r7, #6]
	uint16_t Counter_StatusReport = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	80bb      	strh	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //ПЕЧАТЬ ТЕКУЩЕГО СОСТОЯНИЯ
	  		if(Counter_RUNInfo_Send++>COUNTER_RUNINFOSEND)
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	1c5a      	adds	r2, r3, #1
 8001144:	80fa      	strh	r2, [r7, #6]
 8001146:	2ba6      	cmp	r3, #166	; 0xa6
 8001148:	d904      	bls.n	8001154 <main+0x48>
	  		{
	  			Counter_RUNInfo_Send = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	80fb      	strh	r3, [r7, #6]
	  			user_main_info("ПРОГРАММА ЗАПУЩЕНА！\r\n");
 800114e:	480f      	ldr	r0, [pc, #60]	; (800118c <main+0x80>)
 8001150:	f002 ff56 	bl	8004000 <puts>
	  		}
	  		//ОТЧЕТ О МЕСТНОМ СТАТУСЕ
	  			if(Counter_StatusReport++>COUNTER_STATUSREPORT)
 8001154:	88bb      	ldrh	r3, [r7, #4]
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	80ba      	strh	r2, [r7, #4]
 800115a:	2b64      	cmp	r3, #100	; 0x64
 800115c:	d903      	bls.n	8001166 <main+0x5a>
	  			{
	  				Counter_StatusReport = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	80bb      	strh	r3, [r7, #4]
	  				STM32DHT11_StatusReport();
 8001162:	f000 fa45 	bl	80015f0 <STM32DHT11_StatusReport>
	  			}

	  			//ЕСЛИ В ПРИНИМАЮЩЕМ КЭШЕ ЕСТЬ ДАННЫЕ
	  			if(usart2_rxcounter)
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <main+0x84>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d006      	beq.n	800117c <main+0x70>
	  			{
	  				deal_MQTT_message(usart2_rxbuf,usart2_rxcounter);
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <main+0x84>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b29b      	uxth	r3, r3
 8001174:	4619      	mov	r1, r3
 8001176:	4807      	ldr	r0, [pc, #28]	; (8001194 <main+0x88>)
 8001178:	f000 fac4 	bl	8001704 <deal_MQTT_message>
	  			}

	  			HAL_Delay(LOOPTIME);
 800117c:	201e      	movs	r0, #30
 800117e:	f000 ff0f 	bl	8001fa0 <HAL_Delay>
	  		if(Counter_RUNInfo_Send++>COUNTER_RUNINFOSEND)
 8001182:	e7dd      	b.n	8001140 <main+0x34>
 8001184:	2000038c 	.word	0x2000038c
 8001188:	20000588 	.word	0x20000588
 800118c:	080053ac 	.word	0x080053ac
 8001190:	2000038d 	.word	0x2000038d
 8001194:	2000018c 	.word	0x2000018c

08001198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b090      	sub	sp, #64	; 0x40
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0318 	add.w	r3, r7, #24
 80011a2:	2228      	movs	r2, #40	; 0x28
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f002 fe9c 	bl	8003ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ba:	2301      	movs	r3, #1
 80011bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011cc:	2302      	movs	r3, #2
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011dc:	f107 0318 	add.w	r3, r7, #24
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fa8b 	bl	80026fc <HAL_RCC_OscConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011ec:	f000 fb96 	bl	800191c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f0:	230f      	movs	r3, #15
 80011f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f4:	2302      	movs	r3, #2
 80011f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	2102      	movs	r1, #2
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fcf8 	bl	8002c00 <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001216:	f000 fb81 	bl	800191c <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3740      	adds	r7, #64	; 0x40
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */
/******************************  USART2 ПОЛУЧАЕТ КОД ПРЕРЫВАНИЯ  *****************************/

// ПОСЛЕДОВАТЕЛЬНЫЙ ПОРТ ДРАЙВЕРА ESP8266 ПОЛУЧАЕТ ФУНКЦИЮ ОБРАБОТКИ ПРЕРЫВАНИЙ
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)	// ОПРЕДЕЛЕНИЕ, КАКОЙ ПОСЛЕДОВАТЕЛЬНЫЙ ПОРТ ВЫЗВАЛ ПРЕРЫВАНИЕ
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0c      	ldr	r2, [pc, #48]	; (8001264 <HAL_UART_RxCpltCallback+0x40>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d111      	bne.n	800125a <HAL_UART_RxCpltCallback+0x36>
	{
		//ПОМЕСТИТЬ ПОЛУЧЕННЫЕ ДАННЫЕ В ПРИНИМАЮЩИЙ МАССИВ USART1 RECEIVING
		usart2_rxbuf[usart2_rxcounter] = usart2_rxone[0];
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_UART_RxCpltCallback+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	461a      	mov	r2, r3
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_UART_RxCpltCallback+0x48>)
 800123e:	7819      	ldrb	r1, [r3, #0]
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_UART_RxCpltCallback+0x4c>)
 8001242:	5499      	strb	r1, [r3, r2]
		usart2_rxcounter++;	//ПОЛУЧЕННОЕ КОЛИЧЕСТВО＋1
 8001244:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_UART_RxCpltCallback+0x44>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	b2da      	uxtb	r2, r3
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_UART_RxCpltCallback+0x44>)
 800124e:	701a      	strb	r2, [r3, #0]

		//ПОВТОРНОЕ ВКЛЮЧЕНИЕ ПОСЛЕДОВАТЕЛЬНОГО ПОРТА 1 ДЛЯ ПРИЕМА ПРЕРЫВАНИЙ
		HAL_UART_Receive_IT(&huart2,usart2_rxone,1);
 8001250:	2201      	movs	r2, #1
 8001252:	4906      	ldr	r1, [pc, #24]	; (800126c <HAL_UART_RxCpltCallback+0x48>)
 8001254:	4807      	ldr	r0, [pc, #28]	; (8001274 <HAL_UART_RxCpltCallback+0x50>)
 8001256:	f002 f9b4 	bl	80035c2 <HAL_UART_Receive_IT>
	}
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40004400 	.word	0x40004400
 8001268:	2000038d 	.word	0x2000038d
 800126c:	2000038c 	.word	0x2000038c
 8001270:	2000018c 	.word	0x2000018c
 8001274:	20000588 	.word	0x20000588

08001278 <KEY1_Pressed>:

/******************************  КЛЮЧЕВОЙ КОД ПРЕРЫВАНИЙ  *****************************/

//КЛАВИША 1, НАЖМИТЕ, ЧТОБЫ ВЫПОЛНИТЬ ФУНКЦИЮ
void KEY1_Pressed(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	user_main_debug("НАЖАТИЕ KEY_1\r\n");
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <KEY1_Pressed+0x14>)
 800127e:	f002 febf 	bl	8004000 <puts>
	Change_LED_Status();
 8001282:	f000 f825 	bl	80012d0 <Change_LED_Status>
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	080053e8 	.word	0x080053e8

08001290 <KEY2_Pressed>:

//КЛАВИША 2, НАЖМИТЕ, ЧТОБЫ ВЫПОЛНИТЬ ФУНКЦИЮ
void KEY2_Pressed(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	user_main_debug("НАЖАТИЕ KEY_2\r\n");
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <KEY2_Pressed+0x10>)
 8001296:	f002 feb3 	bl	8004000 <puts>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08005410 	.word	0x08005410

080012a4 <HAL_GPIO_EXTI_Callback>:

//КЛЮЧЕВАЯ ФУНКЦИЯ ОБРАБОТКИ ПРЕРЫВАНИЙ
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	80fb      	strh	r3, [r7, #6]
    switch(GPIO_Pin)
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_EXTI_Callback+0x18>
 80012b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_EXTI_Callback+0x1e>
    {
        case KEY_1_Pin:KEY1_Pressed();break;
        case KEY_2_Pin:KEY2_Pressed();break;
        default:break;
 80012ba:	e005      	b.n	80012c8 <HAL_GPIO_EXTI_Callback+0x24>
        case KEY_1_Pin:KEY1_Pressed();break;
 80012bc:	f7ff ffdc 	bl	8001278 <KEY1_Pressed>
 80012c0:	e002      	b.n	80012c8 <HAL_GPIO_EXTI_Callback+0x24>
        case KEY_2_Pin:KEY2_Pressed();break;
 80012c2:	f7ff ffe5 	bl	8001290 <KEY2_Pressed>
 80012c6:	bf00      	nop
    }
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <Change_LED_Status>:

//ИЗМЕНЕНИЯ СОСТОЯНИЙ СВЕТОДИОДНОЙ ПОДСВЕТКИ
void Change_LED_Status(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	static uint8_t ledstatus = 0;

	switch(ledstatus++)
 80012d4:	4b5c      	ldr	r3, [pc, #368]	; (8001448 <Change_LED_Status+0x178>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	b2d1      	uxtb	r1, r2
 80012dc:	4a5a      	ldr	r2, [pc, #360]	; (8001448 <Change_LED_Status+0x178>)
 80012de:	7011      	strb	r1, [r2, #0]
 80012e0:	2b07      	cmp	r3, #7
 80012e2:	f200 80ab 	bhi.w	800143c <Change_LED_Status+0x16c>
 80012e6:	a201      	add	r2, pc, #4	; (adr r2, 80012ec <Change_LED_Status+0x1c>)
 80012e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ec:	0800130d 	.word	0x0800130d
 80012f0:	08001333 	.word	0x08001333
 80012f4:	08001359 	.word	0x08001359
 80012f8:	0800137f 	.word	0x0800137f
 80012fc:	080013a5 	.word	0x080013a5
 8001300:	080013cb 	.word	0x080013cb
 8001304:	080013f1 	.word	0x080013f1
 8001308:	08001417 	.word	0x08001417
	{
		case 0://000
			HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001312:	484e      	ldr	r0, [pc, #312]	; (800144c <Change_LED_Status+0x17c>)
 8001314:	f001 f9c1 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131e:	484b      	ldr	r0, [pc, #300]	; (800144c <Change_LED_Status+0x17c>)
 8001320:	f001 f9bb 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800132a:	4848      	ldr	r0, [pc, #288]	; (800144c <Change_LED_Status+0x17c>)
 800132c:	f001 f9b5 	bl	800269a <HAL_GPIO_WritePin>
		break;
 8001330:	e088      	b.n	8001444 <Change_LED_Status+0x174>
		case 1://001
			HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001338:	4844      	ldr	r0, [pc, #272]	; (800144c <Change_LED_Status+0x17c>)
 800133a:	f001 f9ae 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001344:	4841      	ldr	r0, [pc, #260]	; (800144c <Change_LED_Status+0x17c>)
 8001346:	f001 f9a8 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001350:	483e      	ldr	r0, [pc, #248]	; (800144c <Change_LED_Status+0x17c>)
 8001352:	f001 f9a2 	bl	800269a <HAL_GPIO_WritePin>
		break;
 8001356:	e075      	b.n	8001444 <Change_LED_Status+0x174>
		case 2://010
			HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800135e:	483b      	ldr	r0, [pc, #236]	; (800144c <Change_LED_Status+0x17c>)
 8001360:	f001 f99b 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_SET);
 8001364:	2201      	movs	r2, #1
 8001366:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800136a:	4838      	ldr	r0, [pc, #224]	; (800144c <Change_LED_Status+0x17c>)
 800136c:	f001 f995 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_RESET);
 8001370:	2200      	movs	r2, #0
 8001372:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001376:	4835      	ldr	r0, [pc, #212]	; (800144c <Change_LED_Status+0x17c>)
 8001378:	f001 f98f 	bl	800269a <HAL_GPIO_WritePin>
		break;
 800137c:	e062      	b.n	8001444 <Change_LED_Status+0x174>
		case 3://011
			HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001384:	4831      	ldr	r0, [pc, #196]	; (800144c <Change_LED_Status+0x17c>)
 8001386:	f001 f988 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_SET);
 800138a:	2201      	movs	r2, #1
 800138c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001390:	482e      	ldr	r0, [pc, #184]	; (800144c <Change_LED_Status+0x17c>)
 8001392:	f001 f982 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_SET);
 8001396:	2201      	movs	r2, #1
 8001398:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800139c:	482b      	ldr	r0, [pc, #172]	; (800144c <Change_LED_Status+0x17c>)
 800139e:	f001 f97c 	bl	800269a <HAL_GPIO_WritePin>
		break;
 80013a2:	e04f      	b.n	8001444 <Change_LED_Status+0x174>
		case 4://100
			HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013aa:	4828      	ldr	r0, [pc, #160]	; (800144c <Change_LED_Status+0x17c>)
 80013ac:	f001 f975 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b6:	4825      	ldr	r0, [pc, #148]	; (800144c <Change_LED_Status+0x17c>)
 80013b8:	f001 f96f 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013c2:	4822      	ldr	r0, [pc, #136]	; (800144c <Change_LED_Status+0x17c>)
 80013c4:	f001 f969 	bl	800269a <HAL_GPIO_WritePin>
		break;
 80013c8:	e03c      	b.n	8001444 <Change_LED_Status+0x174>
		case 5://101
			HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013d0:	481e      	ldr	r0, [pc, #120]	; (800144c <Change_LED_Status+0x17c>)
 80013d2:	f001 f962 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013dc:	481b      	ldr	r0, [pc, #108]	; (800144c <Change_LED_Status+0x17c>)
 80013de:	f001 f95c 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e8:	4818      	ldr	r0, [pc, #96]	; (800144c <Change_LED_Status+0x17c>)
 80013ea:	f001 f956 	bl	800269a <HAL_GPIO_WritePin>
		break;
 80013ee:	e029      	b.n	8001444 <Change_LED_Status+0x174>
		case 6://110
			HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013f6:	4815      	ldr	r0, [pc, #84]	; (800144c <Change_LED_Status+0x17c>)
 80013f8:	f001 f94f 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_SET);
 80013fc:	2201      	movs	r2, #1
 80013fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001402:	4812      	ldr	r0, [pc, #72]	; (800144c <Change_LED_Status+0x17c>)
 8001404:	f001 f949 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800140e:	480f      	ldr	r0, [pc, #60]	; (800144c <Change_LED_Status+0x17c>)
 8001410:	f001 f943 	bl	800269a <HAL_GPIO_WritePin>
		break;
 8001414:	e016      	b.n	8001444 <Change_LED_Status+0x174>
		case 7://111
			HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);
 8001416:	2201      	movs	r2, #1
 8001418:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <Change_LED_Status+0x17c>)
 800141e:	f001 f93c 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_SET);
 8001422:	2201      	movs	r2, #1
 8001424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <Change_LED_Status+0x17c>)
 800142a:	f001 f936 	bl	800269a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_SET);
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <Change_LED_Status+0x17c>)
 8001436:	f001 f930 	bl	800269a <HAL_GPIO_WritePin>
		break;
 800143a:	e003      	b.n	8001444 <Change_LED_Status+0x174>
		default:ledstatus=0;break;
 800143c:	4b02      	ldr	r3, [pc, #8]	; (8001448 <Change_LED_Status+0x178>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	bf00      	nop
	}
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200004f6 	.word	0x200004f6
 800144c:	40010c00 	.word	0x40010c00

08001450 <Enter_ErrorMode>:

/******************************  КОД РЕЖИМА ОШИБКИ  *****************************/

//ВОЙДИТЕ В РЕЖИМ ОШИБКИ И ДОЖДИТЕСЬ РУЧНОГО ПЕРЕЗАПУЧКА
void Enter_ErrorMode(uint8_t mode)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_SET);
 800145a:	2201      	movs	r2, #1
 800145c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001460:	4819      	ldr	r0, [pc, #100]	; (80014c8 <Enter_ErrorMode+0x78>)
 8001462:	f001 f91a 	bl	800269a <HAL_GPIO_WritePin>
	while(1)
	{
		switch(mode){
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b04      	cmp	r3, #4
 800146a:	d821      	bhi.n	80014b0 <Enter_ErrorMode+0x60>
 800146c:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <Enter_ErrorMode+0x24>)
 800146e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001472:	bf00      	nop
 8001474:	08001489 	.word	0x08001489
 8001478:	08001491 	.word	0x08001491
 800147c:	08001499 	.word	0x08001499
 8001480:	080014a1 	.word	0x080014a1
 8001484:	080014a9 	.word	0x080014a9
			case 0:user_main_error("ESP8266 СБОЙ ИНИЦИАЛИЗАЦИИ！\r\n");break;
 8001488:	4810      	ldr	r0, [pc, #64]	; (80014cc <Enter_ErrorMode+0x7c>)
 800148a:	f002 fdb9 	bl	8004000 <puts>
 800148e:	e013      	b.n	80014b8 <Enter_ErrorMode+0x68>
			case 1:user_main_error("ESP8266 НЕ УДАЛОСЬ ПОДКЛЮЧИТСЯ К ТОЧКЕ ДОСТУПА！\r\n");break;
 8001490:	480f      	ldr	r0, [pc, #60]	; (80014d0 <Enter_ErrorMode+0x80>)
 8001492:	f002 fdb5 	bl	8004000 <puts>
 8001496:	e00f      	b.n	80014b8 <Enter_ErrorMode+0x68>
			case 2:user_main_error("ESP8266 НЕ УДАЛОСЬ ПОДКЛЮЧИТСЯ К ОБЛАЧНОМУ СЕРВЕРУ！\r\n");break;
 8001498:	480e      	ldr	r0, [pc, #56]	; (80014d4 <Enter_ErrorMode+0x84>)
 800149a:	f002 fdb1 	bl	8004000 <puts>
 800149e:	e00b      	b.n	80014b8 <Enter_ErrorMode+0x68>
			case 3:user_main_error("ESP8266 ОШИБКА ВХОДА В СИСТЕМУ MQTT！\r\n");break;
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <Enter_ErrorMode+0x88>)
 80014a2:	f002 fdad 	bl	8004000 <puts>
 80014a6:	e007      	b.n	80014b8 <Enter_ErrorMode+0x68>
			case 4:user_main_error("ESP8266ОШИБКА В ТЕМЕ ПОДПИСКЕ MQTT！\r\n");break;
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <Enter_ErrorMode+0x8c>)
 80014aa:	f002 fda9 	bl	8004000 <puts>
 80014ae:	e003      	b.n	80014b8 <Enter_ErrorMode+0x68>
			default:user_main_info("НЕЧЕГО\r\n");break;
 80014b0:	480b      	ldr	r0, [pc, #44]	; (80014e0 <Enter_ErrorMode+0x90>)
 80014b2:	f002 fda5 	bl	8004000 <puts>
 80014b6:	bf00      	nop
		}
		user_main_info("ПОЖАЛУЙСТА, ПЕРЕЗАПУСТИТЕ");
 80014b8:	480a      	ldr	r0, [pc, #40]	; (80014e4 <Enter_ErrorMode+0x94>)
 80014ba:	f002 fda1 	bl	8004000 <puts>
		//HAL_GPIO_TogglePin(LED_R_GPIO_Port,LED_R_Pin);
		HAL_Delay(200);
 80014be:	20c8      	movs	r0, #200	; 0xc8
 80014c0:	f000 fd6e 	bl	8001fa0 <HAL_Delay>
		switch(mode){
 80014c4:	e7cf      	b.n	8001466 <Enter_ErrorMode+0x16>
 80014c6:	bf00      	nop
 80014c8:	40010c00 	.word	0x40010c00
 80014cc:	08005438 	.word	0x08005438
 80014d0:	0800547c 	.word	0x0800547c
 80014d4:	080054e4 	.word	0x080054e4
 80014d8:	08005554 	.word	0x08005554
 80014dc:	080055a4 	.word	0x080055a4
 80014e0:	080055f0 	.word	0x080055f0
 80014e4:	08005610 	.word	0x08005610

080014e8 <ES8266_MQTT_Init>:

/******************************  STM32 MQTT КОД  *****************************/

//ФУНКЦИЯ ИНИЦИАЛИЗАЦИИ MQTT
void ES8266_MQTT_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
	uint8_t status=0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	71fb      	strb	r3, [r7, #7]

	//ИНИЦИАЛИЗАЦИЯ
	if(ESP8266_Init())
 80014f2:	f7fe feff 	bl	80002f4 <ESP8266_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d006      	beq.n	800150a <ES8266_MQTT_Init+0x22>
	{
		user_main_info("ESP8266 ИНЦИАЛИЗАЦИЯ ПРОШЛА УСПЕШНО！\r\n");
 80014fc:	482f      	ldr	r0, [pc, #188]	; (80015bc <ES8266_MQTT_Init+0xd4>)
 80014fe:	f002 fd7f 	bl	8004000 <puts>
		status++;
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	3301      	adds	r3, #1
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	e002      	b.n	8001510 <ES8266_MQTT_Init+0x28>
	}
	else Enter_ErrorMode(0);
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff ffa0 	bl	8001450 <Enter_ErrorMode>

	//ПОДЛКЮЧЕНИЕ К ТОЧКЕ ДОСТУПА
	if(status==1)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d110      	bne.n	8001538 <ES8266_MQTT_Init+0x50>
	{
		if(ESP8266_ConnectAP(WIFI_NAME,WIFI_PASSWD))
 8001516:	492a      	ldr	r1, [pc, #168]	; (80015c0 <ES8266_MQTT_Init+0xd8>)
 8001518:	482a      	ldr	r0, [pc, #168]	; (80015c4 <ES8266_MQTT_Init+0xdc>)
 800151a:	f7fe ff2f 	bl	800037c <ESP8266_ConnectAP>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d006      	beq.n	8001532 <ES8266_MQTT_Init+0x4a>
		{
			user_main_info("ESP8266УСПЕШНО ПОДКЛЮЧИЛСЯ К ТОЧКЕ ДОСТУПА！\r\n");
 8001524:	4828      	ldr	r0, [pc, #160]	; (80015c8 <ES8266_MQTT_Init+0xe0>)
 8001526:	f002 fd6b 	bl	8004000 <puts>
			status++;
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	3301      	adds	r3, #1
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	e002      	b.n	8001538 <ES8266_MQTT_Init+0x50>
		}
		else Enter_ErrorMode(1);
 8001532:	2001      	movs	r0, #1
 8001534:	f7ff ff8c 	bl	8001450 <Enter_ErrorMode>
	}

	//ПОДКЛЮЧЕНИЕ К ОБЛАЧНОМУ СЕРВЕРУ
	if(status==2)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d112      	bne.n	8001564 <ES8266_MQTT_Init+0x7c>
	{
		if(ESP8266_ConnectServer("TCP",MQTT_BROKERADDRESS,1883)!=0)
 800153e:	f240 725b 	movw	r2, #1883	; 0x75b
 8001542:	4922      	ldr	r1, [pc, #136]	; (80015cc <ES8266_MQTT_Init+0xe4>)
 8001544:	4822      	ldr	r0, [pc, #136]	; (80015d0 <ES8266_MQTT_Init+0xe8>)
 8001546:	f7fe ff9f 	bl	8000488 <ESP8266_ConnectServer>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <ES8266_MQTT_Init+0x76>
		{
			user_main_info("ESP8266УСПЕШНОЕ ПОДКЛЮЧЕНИЕ К ОБЛАЧНОМУ СЕРВЕРУ！\r\n");
 8001550:	4820      	ldr	r0, [pc, #128]	; (80015d4 <ES8266_MQTT_Init+0xec>)
 8001552:	f002 fd55 	bl	8004000 <puts>
			status++;
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	3301      	adds	r3, #1
 800155a:	71fb      	strb	r3, [r7, #7]
 800155c:	e002      	b.n	8001564 <ES8266_MQTT_Init+0x7c>
		}
		else Enter_ErrorMode(2);
 800155e:	2002      	movs	r0, #2
 8001560:	f7ff ff76 	bl	8001450 <Enter_ErrorMode>
	}

	//ВХОД В MQTT
	if(status==3)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b03      	cmp	r3, #3
 8001568:	d111      	bne.n	800158e <ES8266_MQTT_Init+0xa6>
	{
		if(MQTT_Connect(MQTT_CLIENTID, MQTT_USARNAME, MQTT_PASSWD) != 0)
 800156a:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <ES8266_MQTT_Init+0xf0>)
 800156c:	491b      	ldr	r1, [pc, #108]	; (80015dc <ES8266_MQTT_Init+0xf4>)
 800156e:	481c      	ldr	r0, [pc, #112]	; (80015e0 <ES8266_MQTT_Init+0xf8>)
 8001570:	f7ff f80a 	bl	8000588 <MQTT_Connect>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <ES8266_MQTT_Init+0xa0>
		{
			user_main_info("ESP8266 ОБЛАЧНЫЙ СЕРВЕР MQTT УСПЕШОН ВОШЕЛ В СИСТЕМУ！\r\n");
 800157a:	481a      	ldr	r0, [pc, #104]	; (80015e4 <ES8266_MQTT_Init+0xfc>)
 800157c:	f002 fd40 	bl	8004000 <puts>
			status++;
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	3301      	adds	r3, #1
 8001584:	71fb      	strb	r3, [r7, #7]
 8001586:	e002      	b.n	800158e <ES8266_MQTT_Init+0xa6>
		}
		else Enter_ErrorMode(3);
 8001588:	2003      	movs	r0, #3
 800158a:	f7ff ff61 	bl	8001450 <Enter_ErrorMode>
	}

	//ПОДПИСКА НА ТЕМЫ
	if(status==4)
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d10e      	bne.n	80015b2 <ES8266_MQTT_Init+0xca>
	{
		if(MQTT_SubscribeTopic(MQTT_SUBSCRIBE_TOPIC,0,1) != 0)
 8001594:	2201      	movs	r2, #1
 8001596:	2100      	movs	r1, #0
 8001598:	4813      	ldr	r0, [pc, #76]	; (80015e8 <ES8266_MQTT_Init+0x100>)
 800159a:	f7ff f98b 	bl	80008b4 <MQTT_SubscribeTopic>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <ES8266_MQTT_Init+0xc4>
		{
			user_main_info("ESP8266 ОБЛАЧНЫЙ СЕРВЕР УСПЕШНО ПОДПИСАЛСЯ НА ЭТУ ТЕМУ！\r\n");
 80015a4:	4811      	ldr	r0, [pc, #68]	; (80015ec <ES8266_MQTT_Init+0x104>)
 80015a6:	f002 fd2b 	bl	8004000 <puts>
		}
		else Enter_ErrorMode(4);
	}
}
 80015aa:	e002      	b.n	80015b2 <ES8266_MQTT_Init+0xca>
		else Enter_ErrorMode(4);
 80015ac:	2004      	movs	r0, #4
 80015ae:	f7ff ff4f 	bl	8001450 <Enter_ErrorMode>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	080059f8 	.word	0x080059f8
 80015c0:	0800575c 	.word	0x0800575c
 80015c4:	08005768 	.word	0x08005768
 80015c8:	08005a4c 	.word	0x08005a4c
 80015cc:	080057d4 	.word	0x080057d4
 80015d0:	08005808 	.word	0x08005808
 80015d4:	08005aac 	.word	0x08005aac
 80015d8:	08005874 	.word	0x08005874
 80015dc:	080058a0 	.word	0x080058a0
 80015e0:	080058b4 	.word	0x080058b4
 80015e4:	08005b18 	.word	0x08005b18
 80015e8:	08005948 	.word	0x08005948
 80015ec:	08005b84 	.word	0x08005b84

080015f0 <STM32DHT11_StatusReport>:

//ОТЧЕТ О СОСТОЯНИИ MCU
void STM32DHT11_StatusReport(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
	uint8_t temperature;
	uint8_t humidity;
	uint8_t get_times;

	// 获ПОЛУЧЕНИЕ ИНФОРМАЦИИ О ТЕМПЕРАТУРЕ И ВЛАЖНОСТИ И РАСПЕЧАТАТЬ ЕЕ С ПОМОЩЬЮ ПОСЛЕДОВАТЕЛЬНОГО ПОРТА, ПОЛУЧИТЬ ЕЕ ДЕСЯТЬ РАЗ,ПОКА ОНА УСПЕШНО НЕ ВЫСКОЧИТ
	for(get_times=0;get_times<10;get_times++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	71fb      	strb	r3, [r7, #7]
 80015fa:	e013      	b.n	8001624 <STM32DHT11_StatusReport+0x34>
	{
		if(!dht11Read(&temperature, &humidity))//Read DHT11 Value
 80015fc:	1d7a      	adds	r2, r7, #5
 80015fe:	1dbb      	adds	r3, r7, #6
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fcb4 	bl	8000f70 <dht11Read>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d107      	bne.n	800161e <STM32DHT11_StatusReport+0x2e>
		{
			user_main_info("temperature=%d,humidity=%d \n",temperature,humidity);
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	4619      	mov	r1, r3
 8001612:	797b      	ldrb	r3, [r7, #5]
 8001614:	461a      	mov	r2, r3
 8001616:	4809      	ldr	r0, [pc, #36]	; (800163c <STM32DHT11_StatusReport+0x4c>)
 8001618:	f002 fc6c 	bl	8003ef4 <iprintf>
			break;
 800161c:	e005      	b.n	800162a <STM32DHT11_StatusReport+0x3a>
	for(get_times=0;get_times<10;get_times++)
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	3301      	adds	r3, #1
 8001622:	71fb      	strb	r3, [r7, #7]
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	2b09      	cmp	r3, #9
 8001628:	d9e8      	bls.n	80015fc <STM32DHT11_StatusReport+0xc>
		}
	}

	//ОТЧЕТ О ДАННЫХ ОДИН РАЗ
	MQTT_PublishData(MQTT_PUBLISH_TOPIC,mqtt_message,0);
 800162a:	2200      	movs	r2, #0
 800162c:	4904      	ldr	r1, [pc, #16]	; (8001640 <STM32DHT11_StatusReport+0x50>)
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <STM32DHT11_StatusReport+0x54>)
 8001630:	f7ff fa26 	bl	8000a80 <MQTT_PublishData>
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	080056d8 	.word	0x080056d8
 8001640:	200003ac 	.word	0x200003ac
 8001644:	08005bf8 	.word	0x08005bf8

08001648 <ReadStrUnit>:

char temp_str[30];    // ВРЕМЕННАЯ ПОДСТРОКА
void ReadStrUnit(char * str,char *temp_str,int idx,int len)  // ПОЛУЧЕНИЕ ВРЕМЕННОЙ ВЛОЖЕННОЙ СТРОКИ, РАВНУЮ ДЛИНЕ ВЛОЖЕННОЙ СТРОКИ ИЗ РОДИТЕЛЬСКОЙ СТРОКИ
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
 8001654:	603b      	str	r3, [r7, #0]
    int index;
    for(index = 0; index < len; index++)
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	e00d      	b.n	8001678 <ReadStrUnit+0x30>
    {
        temp_str[index] = str[idx+index];
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	4413      	add	r3, r2
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	441a      	add	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	68b9      	ldr	r1, [r7, #8]
 800166c:	440b      	add	r3, r1
 800166e:	7812      	ldrb	r2, [r2, #0]
 8001670:	701a      	strb	r2, [r3, #0]
    for(index = 0; index < len; index++)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	3301      	adds	r3, #1
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	dbed      	blt.n	800165c <ReadStrUnit+0x14>
    }
    temp_str[index] = '\0';
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	4413      	add	r3, r2
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
}
 800168a:	bf00      	nop
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <GetSubStrPos>:
int GetSubStrPos(char *str1,char *str2)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
    int idx = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
    int len1 = strlen(str1);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7fe fd5c 	bl	8000160 <strlen>
 80016a8:	4603      	mov	r3, r0
 80016aa:	613b      	str	r3, [r7, #16]
    int len2 = strlen(str2);
 80016ac:	6838      	ldr	r0, [r7, #0]
 80016ae:	f7fe fd57 	bl	8000160 <strlen>
 80016b2:	4603      	mov	r3, r0
 80016b4:	60fb      	str	r3, [r7, #12]

    if( len1 < len2)
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	da02      	bge.n	80016c4 <GetSubStrPos+0x30>
    {
        //printf("error 1 \n"); // ДОЧЕРНЯЯ СТРОКА ДЛИННЕЕ РОДИТЕЛЬСКОЙ СТРОКИ
        return -1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	e018      	b.n	80016f6 <GetSubStrPos+0x62>
    }

    while(1)
    {
        ReadStrUnit(str1,temp_str,idx,len2);    // НЕПРЕРЫВНО ПОЛУЧАТЬ ОБНОВЛЕНИЕ ВРЕМЕННОЙ ВЛОЖЕННОЙ СТРОКИ ИЗ ПОЗИЦИИ IDX РОДИТЕЛЬСКОЙ СТРОКИ
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	490d      	ldr	r1, [pc, #52]	; (8001700 <GetSubStrPos+0x6c>)
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ffbc 	bl	8001648 <ReadStrUnit>
        if(strcmp(str2,temp_str)==0)break;      // ЕСЛИ ВРЕМЕННАЯ ПОДСТРОКА И ПОДСТРОКА СОВПАДАЮТ, ЦИКЛ ЗАВЕРШАЕТСЯ
 80016d0:	490b      	ldr	r1, [pc, #44]	; (8001700 <GetSubStrPos+0x6c>)
 80016d2:	6838      	ldr	r0, [r7, #0]
 80016d4:	f7fe fd3a 	bl	800014c <strcmp>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d009      	beq.n	80016f2 <GetSubStrPos+0x5e>
        idx++;                                  // ИЗМЕНЕНИЕ ПОЛОЖЕНИЯ ВЗЯТИЕ ВРЕМЕННЫХ ВЛОЖЕННЫХ СТРОК ИЗ РОДИТЕЛЬСКОЙ СТРОКИ
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
        if(idx>=len1)return -1;                 // ЕСЛИ IDX ПРЕВЫСИЛ ДЛИНУ ВНУТРЕННЕЙ СТРОКИ, ВНУТРЕННЯЯ СТРОКА НЕ СОДЕРЖИТЬ ДОЧЕРНЕЙ СТРОКИ
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dbeb      	blt.n	80016c4 <GetSubStrPos+0x30>
 80016ec:	f04f 33ff 	mov.w	r3, #4294967295
 80016f0:	e001      	b.n	80016f6 <GetSubStrPos+0x62>
        if(strcmp(str2,temp_str)==0)break;      // ЕСЛИ ВРЕМЕННАЯ ПОДСТРОКА И ПОДСТРОКА СОВПАДАЮТ, ЦИКЛ ЗАВЕРШАЕТСЯ
 80016f2:	bf00      	nop
    }

    return idx;    // ВОЗВРАЩАЕТ ПОЗИЦИЮ ПЕРВОГО СИМВОЛА ВЛОЖЕННОЙ СТРОКИ В РОДИТЕЛЬСКОЙ СТРОКЕ
 80016f4:	697b      	ldr	r3, [r7, #20]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200004d8 	.word	0x200004d8

08001704 <deal_MQTT_message>:

//ОБРАБАТЫВАТЬ СООБЩЕНИЯ, ОТПРАВЛЕННЫЕ MQTT
void deal_MQTT_message(uint8_t* buf,uint16_t len)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800170a:	af00      	add	r7, sp, #0
 800170c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001710:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001714:	6018      	str	r0, [r3, #0]
 8001716:	460a      	mov	r2, r1
 8001718:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800171c:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 8001720:	801a      	strh	r2, [r3, #0]
	uint8_t data[512];
	uint16_t data_len = len;
 8001722:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001726:	f2a3 2316 	subw	r3, r3, #534	; 0x216
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
	for(int i=0;i<data_len;i++)
 8001730:	2300      	movs	r3, #0
 8001732:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8001736:	e020      	b.n	800177a <deal_MQTT_message+0x76>
	{
		data[i] = buf[i];
 8001738:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800173c:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8001740:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	4413      	add	r3, r2
 8001748:	7819      	ldrb	r1, [r3, #0]
 800174a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800174e:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8001752:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001756:	4413      	add	r3, r2
 8001758:	460a      	mov	r2, r1
 800175a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1,&data[i],1,100);
 800175c:	f107 0208 	add.w	r2, r7, #8
 8001760:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001764:	18d1      	adds	r1, r2, r3
 8001766:	2364      	movs	r3, #100	; 0x64
 8001768:	2201      	movs	r2, #1
 800176a:	4865      	ldr	r0, [pc, #404]	; (8001900 <deal_MQTT_message+0x1fc>)
 800176c:	f001 fe97 	bl	800349e <HAL_UART_Transmit>
	for(int i=0;i<data_len;i++)
 8001770:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001774:	3301      	adds	r3, #1
 8001776:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 800177a:	f8b7 3212 	ldrh.w	r3, [r7, #530]	; 0x212
 800177e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001782:	429a      	cmp	r2, r3
 8001784:	dbd8      	blt.n	8001738 <deal_MQTT_message+0x34>
	}
	memset(usart2_rxbuf,0,sizeof(usart2_rxbuf)); //ОЧИСТИТЬ БУФЕР ПРИЕМА
 8001786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800178a:	2100      	movs	r1, #0
 800178c:	485d      	ldr	r0, [pc, #372]	; (8001904 <deal_MQTT_message+0x200>)
 800178e:	f002 fba9 	bl	8003ee4 <memset>
	usart2_rxcounter=0;
 8001792:	4b5d      	ldr	r3, [pc, #372]	; (8001908 <deal_MQTT_message+0x204>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
	//user_main_info("MQTT ПОЛУЧИЛ СООБЩЕНИЕ, ДЛИНА ДАННЫХ=%d \n",data_len);

	//УЗНАЙТЕ ВКЛЮЧЕН ЛИ КРАСНЫЙ ИНДИКАТОР
	int i = GetSubStrPos((char*)data,"LEDR");
 8001798:	f107 0308 	add.w	r3, r7, #8
 800179c:	495b      	ldr	r1, [pc, #364]	; (800190c <deal_MQTT_message+0x208>)
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff78 	bl	8001694 <GetSubStrPos>
 80017a4:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	if( i>0 )
 80017a8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	dd2d      	ble.n	800180c <deal_MQTT_message+0x108>
	{
		uint8_t ledr_status = data[i+6]-'0';
 80017b0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80017b4:	3306      	adds	r3, #6
 80017b6:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80017ba:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 80017be:	5cd3      	ldrb	r3, [r2, r3]
 80017c0:	3b30      	subs	r3, #48	; 0x30
 80017c2:	f887 320b 	strb.w	r3, [r7, #523]	; 0x20b
		HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017cc:	4850      	ldr	r0, [pc, #320]	; (8001910 <deal_MQTT_message+0x20c>)
 80017ce:	f000 ff64 	bl	800269a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_SET);
 80017d2:	2201      	movs	r2, #1
 80017d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d8:	484d      	ldr	r0, [pc, #308]	; (8001910 <deal_MQTT_message+0x20c>)
 80017da:	f000 ff5e 	bl	800269a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_SET);
 80017de:	2201      	movs	r2, #1
 80017e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e4:	484a      	ldr	r0, [pc, #296]	; (8001910 <deal_MQTT_message+0x20c>)
 80017e6:	f000 ff58 	bl	800269a <HAL_GPIO_WritePin>
		if(ledr_status)
 80017ea:	f897 320b 	ldrb.w	r3, [r7, #523]	; 0x20b
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <deal_MQTT_message+0xfc>
			HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017f8:	4845      	ldr	r0, [pc, #276]	; (8001910 <deal_MQTT_message+0x20c>)
 80017fa:	f000 ff4e 	bl	800269a <HAL_GPIO_WritePin>
 80017fe:	e005      	b.n	800180c <deal_MQTT_message+0x108>
		else
			HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);
 8001800:	2201      	movs	r2, #1
 8001802:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001806:	4842      	ldr	r0, [pc, #264]	; (8001910 <deal_MQTT_message+0x20c>)
 8001808:	f000 ff47 	bl	800269a <HAL_GPIO_WritePin>
	}

	//УЗНАЙТЕ ВКЛЮЧЕН ЛИ ЗЕЛЕНЫЙ ИНДИКАТОР
	i = GetSubStrPos((char*)data,"LEDG");
 800180c:	f107 0308 	add.w	r3, r7, #8
 8001810:	4940      	ldr	r1, [pc, #256]	; (8001914 <deal_MQTT_message+0x210>)
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff3e 	bl	8001694 <GetSubStrPos>
 8001818:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	if( i>0 )
 800181c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001820:	2b00      	cmp	r3, #0
 8001822:	dd2d      	ble.n	8001880 <deal_MQTT_message+0x17c>
	{
		uint8_t ledr_status = data[i+6]-'0';
 8001824:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001828:	3306      	adds	r3, #6
 800182a:	f507 7206 	add.w	r2, r7, #536	; 0x218
 800182e:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8001832:	5cd3      	ldrb	r3, [r2, r3]
 8001834:	3b30      	subs	r3, #48	; 0x30
 8001836:	f887 320a 	strb.w	r3, [r7, #522]	; 0x20a
		HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001840:	4833      	ldr	r0, [pc, #204]	; (8001910 <deal_MQTT_message+0x20c>)
 8001842:	f000 ff2a 	bl	800269a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_SET);
 8001846:	2201      	movs	r2, #1
 8001848:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800184c:	4830      	ldr	r0, [pc, #192]	; (8001910 <deal_MQTT_message+0x20c>)
 800184e:	f000 ff24 	bl	800269a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_SET);
 8001852:	2201      	movs	r2, #1
 8001854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001858:	482d      	ldr	r0, [pc, #180]	; (8001910 <deal_MQTT_message+0x20c>)
 800185a:	f000 ff1e 	bl	800269a <HAL_GPIO_WritePin>
		if(ledr_status)
 800185e:	f897 320a 	ldrb.w	r3, [r7, #522]	; 0x20a
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <deal_MQTT_message+0x170>
			HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800186c:	4828      	ldr	r0, [pc, #160]	; (8001910 <deal_MQTT_message+0x20c>)
 800186e:	f000 ff14 	bl	800269a <HAL_GPIO_WritePin>
 8001872:	e005      	b.n	8001880 <deal_MQTT_message+0x17c>
		else
			HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800187a:	4825      	ldr	r0, [pc, #148]	; (8001910 <deal_MQTT_message+0x20c>)
 800187c:	f000 ff0d 	bl	800269a <HAL_GPIO_WritePin>
	}

	//УЗНАЙТЕ ВКЛЮЧЕН ЛИ СИНИЙ ИНДИКАТОР
	i = GetSubStrPos((char*)data,"LEDB");
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4924      	ldr	r1, [pc, #144]	; (8001918 <deal_MQTT_message+0x214>)
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff04 	bl	8001694 <GetSubStrPos>
 800188c:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	if( i>0 )
 8001890:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001894:	2b00      	cmp	r3, #0
 8001896:	dd2d      	ble.n	80018f4 <deal_MQTT_message+0x1f0>
	{
		uint8_t ledr_status = data[i+6]-'0';
 8001898:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800189c:	3306      	adds	r3, #6
 800189e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 80018a2:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 80018a6:	5cd3      	ldrb	r3, [r2, r3]
 80018a8:	3b30      	subs	r3, #48	; 0x30
 80018aa:	f887 3209 	strb.w	r3, [r7, #521]	; 0x209
		HAL_GPIO_WritePin(LED_R_GPIO_Port,LED_R_Pin,GPIO_PIN_SET);
 80018ae:	2201      	movs	r2, #1
 80018b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018b4:	4816      	ldr	r0, [pc, #88]	; (8001910 <deal_MQTT_message+0x20c>)
 80018b6:	f000 fef0 	bl	800269a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_SET);
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c0:	4813      	ldr	r0, [pc, #76]	; (8001910 <deal_MQTT_message+0x20c>)
 80018c2:	f000 feea 	bl	800269a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_SET);
 80018c6:	2201      	movs	r2, #1
 80018c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018cc:	4810      	ldr	r0, [pc, #64]	; (8001910 <deal_MQTT_message+0x20c>)
 80018ce:	f000 fee4 	bl	800269a <HAL_GPIO_WritePin>
		if(ledr_status)
 80018d2:	f897 3209 	ldrb.w	r3, [r7, #521]	; 0x209
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d006      	beq.n	80018e8 <deal_MQTT_message+0x1e4>
			HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e0:	480b      	ldr	r0, [pc, #44]	; (8001910 <deal_MQTT_message+0x20c>)
 80018e2:	f000 feda 	bl	800269a <HAL_GPIO_WritePin>
		else
			HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_SET);
	}

}
 80018e6:	e005      	b.n	80018f4 <deal_MQTT_message+0x1f0>
			HAL_GPIO_WritePin(LED_B_GPIO_Port,LED_B_Pin,GPIO_PIN_SET);
 80018e8:	2201      	movs	r2, #1
 80018ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ee:	4808      	ldr	r0, [pc, #32]	; (8001910 <deal_MQTT_message+0x20c>)
 80018f0:	f000 fed3 	bl	800269a <HAL_GPIO_WritePin>
}
 80018f4:	bf00      	nop
 80018f6:	f507 7706 	add.w	r7, r7, #536	; 0x218
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000544 	.word	0x20000544
 8001904:	2000018c 	.word	0x2000018c
 8001908:	2000038d 	.word	0x2000038d
 800190c:	08005c2c 	.word	0x08005c2c
 8001910:	40010c00 	.word	0x40010c00
 8001914:	08005c34 	.word	0x08005c34
 8001918:	08005c3c 	.word	0x08005c3c

0800191c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001920:	b672      	cpsid	i
}
 8001922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001924:	e7fe      	b.n	8001924 <Error_Handler+0x8>
	...

08001928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800192e:	4b15      	ldr	r3, [pc, #84]	; (8001984 <HAL_MspInit+0x5c>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	4a14      	ldr	r2, [pc, #80]	; (8001984 <HAL_MspInit+0x5c>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6193      	str	r3, [r2, #24]
 800193a:	4b12      	ldr	r3, [pc, #72]	; (8001984 <HAL_MspInit+0x5c>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001946:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <HAL_MspInit+0x5c>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a0e      	ldr	r2, [pc, #56]	; (8001984 <HAL_MspInit+0x5c>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	61d3      	str	r3, [r2, #28]
 8001952:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <HAL_MspInit+0x5c>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_MspInit+0x60>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_MspInit+0x60>)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <NMI_Handler+0x4>

08001992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <HardFault_Handler+0x4>

08001998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <MemManage_Handler+0x4>

0800199e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a2:	e7fe      	b.n	80019a2 <BusFault_Handler+0x4>

080019a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <UsageFault_Handler+0x4>

080019aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019b6:	b480      	push	{r7}
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	46bd      	mov	sp, r7
 80019be:	bc80      	pop	{r7}
 80019c0:	4770      	bx	lr

080019c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019d2:	f000 fac9 	bl	8001f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}

080019da <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_1_Pin);
 80019de:	2001      	movs	r0, #1
 80019e0:	f000 fe74 	bl	80026cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019e4:	bf00      	nop
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <USART2_IRQHandler+0x10>)
 80019ee:	f001 fe19 	bl	8003624 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000588 	.word	0x20000588

080019fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_2_Pin);
 8001a00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a04:	f000 fe62 	bl	80026cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	e00a      	b.n	8001a34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a1e:	f3af 8000 	nop.w
 8001a22:	4601      	mov	r1, r0
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	b2ca      	uxtb	r2, r1
 8001a2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697a      	ldr	r2, [r7, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	dbf0      	blt.n	8001a1e <_read+0x12>
	}

return len;
 8001a3c:	687b      	ldr	r3, [r7, #4]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e009      	b.n	8001a6c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	60ba      	str	r2, [r7, #8]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	dbf1      	blt.n	8001a58 <_write+0x12>
	}
	return len;
 8001a74:	687b      	ldr	r3, [r7, #4]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <_close>:

int _close(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
	return -1;
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aa4:	605a      	str	r2, [r3, #4]
	return 0;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <_isatty>:

int _isatty(int file)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
	return 1;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	607a      	str	r2, [r7, #4]
	return 0;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
	...

08001ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b10:	f002 f9b0 	bl	8003e74 <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20005000 	.word	0x20005000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	200004f8 	.word	0x200004f8
 8001b48:	200005e0 	.word	0x200005e0

08001b4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr

08001b58 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5e:	f107 0308 	add.w	r3, r7, #8
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6c:	463b      	mov	r3, r7
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b74:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <MX_TIM1_Init+0x9c>)
 8001b76:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <MX_TIM1_Init+0xa0>)
 8001b78:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 719;
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <MX_TIM1_Init+0x9c>)
 8001b7c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001b80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b82:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <MX_TIM1_Init+0x9c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <MX_TIM1_Init+0x9c>)
 8001b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b90:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <MX_TIM1_Init+0x9c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <MX_TIM1_Init+0x9c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <MX_TIM1_Init+0x9c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ba2:	4814      	ldr	r0, [pc, #80]	; (8001bf4 <MX_TIM1_Init+0x9c>)
 8001ba4:	f001 f9c4 	bl	8002f30 <HAL_TIM_Base_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001bae:	f7ff feb5 	bl	800191c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bb8:	f107 0308 	add.w	r3, r7, #8
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <MX_TIM1_Init+0x9c>)
 8001bc0:	f001 fa05 	bl	8002fce <HAL_TIM_ConfigClockSource>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001bca:	f7ff fea7 	bl	800191c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4806      	ldr	r0, [pc, #24]	; (8001bf4 <MX_TIM1_Init+0x9c>)
 8001bdc:	f001 fbb4 	bl	8003348 <HAL_TIMEx_MasterConfigSynchronization>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001be6:	f7ff fe99 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200004fc 	.word	0x200004fc
 8001bf8:	40012c00 	.word	0x40012c00

08001bfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_TIM_Base_MspInit+0x34>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d10b      	bne.n	8001c26 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_TIM_Base_MspInit+0x38>)
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_TIM_Base_MspInit+0x38>)
 8001c14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c18:	6193      	str	r3, [r2, #24]
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_TIM_Base_MspInit+0x38>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001c26:	bf00      	nop
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr
 8001c30:	40012c00 	.word	0x40012c00
 8001c34:	40021000 	.word	0x40021000

08001c38 <TIM1_Delay_us>:
}

/* USER CODE BEGIN 1 */
//Используете таймер 1, чтобы выполнить функцию задержки уровня us, для датчика температуры и влажность, диапазон 0-6553us
void TIM1_Delay_us(uint16_t n_us)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	80fb      	strh	r3, [r7, #6]
__HAL_TIM_SetCounter(&htim1, 0);//htim1
 8001c42:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <TIM1_Delay_us+0x74>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2200      	movs	r2, #0
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24

//Запустить таймер для подсчета
__HAL_TIM_ENABLE(&htim1);
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <TIM1_Delay_us+0x74>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <TIM1_Delay_us+0x74>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

while(__HAL_TIM_GetCounter(&htim1) < (10 * n_us));//частота счета 10 МГц
 8001c5a:	bf00      	nop
 8001c5c:	4b13      	ldr	r3, [pc, #76]	; (8001cac <TIM1_Delay_us+0x74>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c62:	88fa      	ldrh	r2, [r7, #6]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	4299      	cmp	r1, r3
 8001c6e:	d3f5      	bcc.n	8001c5c <TIM1_Delay_us+0x24>
/***************ОТКЛЮЧЕНИЕ ПЕРЕФЕРИЙНОГО УСТРОЙСТВА********************/
__HAL_TIM_DISABLE(&htim1);
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <TIM1_Delay_us+0x74>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6a1a      	ldr	r2, [r3, #32]
 8001c76:	f241 1311 	movw	r3, #4369	; 0x1111
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d10f      	bne.n	8001ca0 <TIM1_Delay_us+0x68>
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <TIM1_Delay_us+0x74>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6a1a      	ldr	r2, [r3, #32]
 8001c86:	f240 4344 	movw	r3, #1092	; 0x444
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d107      	bne.n	8001ca0 <TIM1_Delay_us+0x68>
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <TIM1_Delay_us+0x74>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <TIM1_Delay_us+0x74>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0201 	bic.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
/***************ОТКЛЮЧЕНИЕ ПЕРЕФЕРИЙНОГО УСТРОЙСТВА********************/
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200004fc 	.word	0x200004fc

08001cb0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cb4:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001cb6:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <MX_USART1_UART_Init+0x50>)
 8001cb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cc8:	4b0c      	ldr	r3, [pc, #48]	; (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ce6:	4805      	ldr	r0, [pc, #20]	; (8001cfc <MX_USART1_UART_Init+0x4c>)
 8001ce8:	f001 fb8c 	bl	8003404 <HAL_UART_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cf2:	f7ff fe13 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000544 	.word	0x20000544
 8001d00:	40013800 	.word	0x40013800

08001d04 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d0a:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <MX_USART2_UART_Init+0x50>)
 8001d0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d0e:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d22:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2e:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d3a:	4805      	ldr	r0, [pc, #20]	; (8001d50 <MX_USART2_UART_Init+0x4c>)
 8001d3c:	f001 fb62 	bl	8003404 <HAL_UART_Init>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d46:	f7ff fde9 	bl	800191c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000588 	.word	0x20000588
 8001d54:	40004400 	.word	0x40004400

08001d58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08c      	sub	sp, #48	; 0x30
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a41      	ldr	r2, [pc, #260]	; (8001e78 <HAL_UART_MspInit+0x120>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d13e      	bne.n	8001df6 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d78:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <HAL_UART_MspInit+0x124>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a3f      	ldr	r2, [pc, #252]	; (8001e7c <HAL_UART_MspInit+0x124>)
 8001d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_UART_MspInit+0x124>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <HAL_UART_MspInit+0x124>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a39      	ldr	r2, [pc, #228]	; (8001e7c <HAL_UART_MspInit+0x124>)
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b37      	ldr	r3, [pc, #220]	; (8001e7c <HAL_UART_MspInit+0x124>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001da8:	2340      	movs	r3, #64	; 0x40
 8001daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db4:	f107 031c 	add.w	r3, r7, #28
 8001db8:	4619      	mov	r1, r3
 8001dba:	4831      	ldr	r0, [pc, #196]	; (8001e80 <HAL_UART_MspInit+0x128>)
 8001dbc:	f000 fad2 	bl	8002364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	482b      	ldr	r0, [pc, #172]	; (8001e80 <HAL_UART_MspInit+0x128>)
 8001dd4:	f000 fac6 	bl	8002364 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <HAL_UART_MspInit+0x12c>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dee:	4a25      	ldr	r2, [pc, #148]	; (8001e84 <HAL_UART_MspInit+0x12c>)
 8001df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df2:	6053      	str	r3, [r2, #4]
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001df4:	e03c      	b.n	8001e70 <HAL_UART_MspInit+0x118>
  else if(uartHandle->Instance==USART2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a23      	ldr	r2, [pc, #140]	; (8001e88 <HAL_UART_MspInit+0x130>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d137      	bne.n	8001e70 <HAL_UART_MspInit+0x118>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e00:	4b1e      	ldr	r3, [pc, #120]	; (8001e7c <HAL_UART_MspInit+0x124>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <HAL_UART_MspInit+0x124>)
 8001e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0a:	61d3      	str	r3, [r2, #28]
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <HAL_UART_MspInit+0x124>)
 8001e0e:	69db      	ldr	r3, [r3, #28]
 8001e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e18:	4b18      	ldr	r3, [pc, #96]	; (8001e7c <HAL_UART_MspInit+0x124>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <HAL_UART_MspInit+0x124>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	6193      	str	r3, [r2, #24]
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_UART_MspInit+0x124>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e30:	2304      	movs	r3, #4
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	4619      	mov	r1, r3
 8001e42:	4812      	ldr	r0, [pc, #72]	; (8001e8c <HAL_UART_MspInit+0x134>)
 8001e44:	f000 fa8e 	bl	8002364 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e48:	2308      	movs	r3, #8
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	480c      	ldr	r0, [pc, #48]	; (8001e8c <HAL_UART_MspInit+0x134>)
 8001e5c:	f000 fa82 	bl	8002364 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2103      	movs	r1, #3
 8001e64:	2026      	movs	r0, #38	; 0x26
 8001e66:	f000 f996 	bl	8002196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e6a:	2026      	movs	r0, #38	; 0x26
 8001e6c:	f000 f9af 	bl	80021ce <HAL_NVIC_EnableIRQ>
}
 8001e70:	bf00      	nop
 8001e72:	3730      	adds	r7, #48	; 0x30
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40013800 	.word	0x40013800
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40010c00 	.word	0x40010c00
 8001e84:	40010000 	.word	0x40010000
 8001e88:	40004400 	.word	0x40004400
 8001e8c:	40010800 	.word	0x40010800

08001e90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e90:	480c      	ldr	r0, [pc, #48]	; (8001ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e92:	490d      	ldr	r1, [pc, #52]	; (8001ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e94:	4a0d      	ldr	r2, [pc, #52]	; (8001ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ea8:	4c0a      	ldr	r4, [pc, #40]	; (8001ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001eb6:	f7ff fe49 	bl	8001b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eba:	f001 ffe1 	bl	8003e80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ebe:	f7ff f925 	bl	800110c <main>
  bx lr
 8001ec2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ecc:	08005d0c 	.word	0x08005d0c
  ldr r2, =_sbss
 8001ed0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ed4:	200005e0 	.word	0x200005e0

08001ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC1_2_IRQHandler>
	...

08001edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_Init+0x28>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a07      	ldr	r2, [pc, #28]	; (8001f04 <HAL_Init+0x28>)
 8001ee6:	f043 0310 	orr.w	r3, r3, #16
 8001eea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f000 f947 	bl	8002180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef2:	200f      	movs	r0, #15
 8001ef4:	f000 f808 	bl	8001f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef8:	f7ff fd16 	bl	8001928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40022000 	.word	0x40022000

08001f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_InitTick+0x54>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_InitTick+0x58>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f95f 	bl	80021ea <HAL_SYSTICK_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00e      	b.n	8001f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b0f      	cmp	r3, #15
 8001f3a:	d80a      	bhi.n	8001f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f000 f927 	bl	8002196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f48:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <HAL_InitTick+0x5c>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000008 	.word	0x20000008
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_IncTick+0x1c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_IncTick+0x20>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a03      	ldr	r2, [pc, #12]	; (8001f88 <HAL_IncTick+0x20>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	20000008 	.word	0x20000008
 8001f88:	200005cc 	.word	0x200005cc

08001f8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b02      	ldr	r3, [pc, #8]	; (8001f9c <HAL_GetTick+0x10>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	200005cc 	.word	0x200005cc

08001fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff fff0 	bl	8001f8c <HAL_GetTick>
 8001fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d005      	beq.n	8001fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_Delay+0x44>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc6:	bf00      	nop
 8001fc8:	f7ff ffe0 	bl	8001f8c <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f7      	bhi.n	8001fc8 <HAL_Delay+0x28>
  {
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000008 	.word	0x20000008

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	; (800202c <__NVIC_SetPriorityGrouping+0x44>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	bc80      	pop	{r7}
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db0b      	blt.n	8002076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4906      	ldr	r1, [pc, #24]	; (8002080 <__NVIC_EnableIRQ+0x34>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	; (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bc80      	pop	{r7}
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	; 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	; 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3b01      	subs	r3, #1
 8002148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800214c:	d301      	bcc.n	8002152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800214e:	2301      	movs	r3, #1
 8002150:	e00f      	b.n	8002172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <SysTick_Config+0x40>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3b01      	subs	r3, #1
 8002158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215a:	210f      	movs	r1, #15
 800215c:	f04f 30ff 	mov.w	r0, #4294967295
 8002160:	f7ff ff90 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002164:	4b05      	ldr	r3, [pc, #20]	; (800217c <SysTick_Config+0x40>)
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216a:	4b04      	ldr	r3, [pc, #16]	; (800217c <SysTick_Config+0x40>)
 800216c:	2207      	movs	r2, #7
 800216e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	e000e010 	.word	0xe000e010

08002180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff ff2d 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 800218e:	bf00      	nop
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002196:	b580      	push	{r7, lr}
 8002198:	b086      	sub	sp, #24
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	60b9      	str	r1, [r7, #8]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a8:	f7ff ff42 	bl	8002030 <__NVIC_GetPriorityGrouping>
 80021ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	68b9      	ldr	r1, [r7, #8]
 80021b2:	6978      	ldr	r0, [r7, #20]
 80021b4:	f7ff ff90 	bl	80020d8 <NVIC_EncodePriority>
 80021b8:	4602      	mov	r2, r0
 80021ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff5f 	bl	8002084 <__NVIC_SetPriority>
}
 80021c6:	bf00      	nop
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff ff35 	bl	800204c <__NVIC_EnableIRQ>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffa2 	bl	800213c <SysTick_Config>
 80021f8:	4603      	mov	r3, r0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002202:	b480      	push	{r7}
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002214:	2b02      	cmp	r3, #2
 8002216:	d008      	beq.n	800222a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2204      	movs	r2, #4
 800221c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e020      	b.n	800226c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f022 020e 	bic.w	r2, r2, #14
 8002238:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0201 	bic.w	r2, r2, #1
 8002248:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	2101      	movs	r1, #1
 8002254:	fa01 f202 	lsl.w	r2, r1, r2
 8002258:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
	...

08002278 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800228a:	2b02      	cmp	r3, #2
 800228c:	d005      	beq.n	800229a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2204      	movs	r2, #4
 8002292:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e051      	b.n	800233e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 020e 	bic.w	r2, r2, #14
 80022a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0201 	bic.w	r2, r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a22      	ldr	r2, [pc, #136]	; (8002348 <HAL_DMA_Abort_IT+0xd0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d029      	beq.n	8002318 <HAL_DMA_Abort_IT+0xa0>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a20      	ldr	r2, [pc, #128]	; (800234c <HAL_DMA_Abort_IT+0xd4>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d022      	beq.n	8002314 <HAL_DMA_Abort_IT+0x9c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_DMA_Abort_IT+0xd8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d01a      	beq.n	800230e <HAL_DMA_Abort_IT+0x96>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a1d      	ldr	r2, [pc, #116]	; (8002354 <HAL_DMA_Abort_IT+0xdc>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d012      	beq.n	8002308 <HAL_DMA_Abort_IT+0x90>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1c      	ldr	r2, [pc, #112]	; (8002358 <HAL_DMA_Abort_IT+0xe0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d00a      	beq.n	8002302 <HAL_DMA_Abort_IT+0x8a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1a      	ldr	r2, [pc, #104]	; (800235c <HAL_DMA_Abort_IT+0xe4>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d102      	bne.n	80022fc <HAL_DMA_Abort_IT+0x84>
 80022f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022fa:	e00e      	b.n	800231a <HAL_DMA_Abort_IT+0xa2>
 80022fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002300:	e00b      	b.n	800231a <HAL_DMA_Abort_IT+0xa2>
 8002302:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002306:	e008      	b.n	800231a <HAL_DMA_Abort_IT+0xa2>
 8002308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800230c:	e005      	b.n	800231a <HAL_DMA_Abort_IT+0xa2>
 800230e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002312:	e002      	b.n	800231a <HAL_DMA_Abort_IT+0xa2>
 8002314:	2310      	movs	r3, #16
 8002316:	e000      	b.n	800231a <HAL_DMA_Abort_IT+0xa2>
 8002318:	2301      	movs	r3, #1
 800231a:	4a11      	ldr	r2, [pc, #68]	; (8002360 <HAL_DMA_Abort_IT+0xe8>)
 800231c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	4798      	blx	r3
    } 
  }
  return status;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40020008 	.word	0x40020008
 800234c:	4002001c 	.word	0x4002001c
 8002350:	40020030 	.word	0x40020030
 8002354:	40020044 	.word	0x40020044
 8002358:	40020058 	.word	0x40020058
 800235c:	4002006c 	.word	0x4002006c
 8002360:	40020000 	.word	0x40020000

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b08b      	sub	sp, #44	; 0x2c
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800236e:	2300      	movs	r3, #0
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002376:	e169      	b.n	800264c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002378:	2201      	movs	r2, #1
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	69fa      	ldr	r2, [r7, #28]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	429a      	cmp	r2, r3
 8002392:	f040 8158 	bne.w	8002646 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4a9a      	ldr	r2, [pc, #616]	; (8002604 <HAL_GPIO_Init+0x2a0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d05e      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023a0:	4a98      	ldr	r2, [pc, #608]	; (8002604 <HAL_GPIO_Init+0x2a0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d875      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023a6:	4a98      	ldr	r2, [pc, #608]	; (8002608 <HAL_GPIO_Init+0x2a4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d058      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023ac:	4a96      	ldr	r2, [pc, #600]	; (8002608 <HAL_GPIO_Init+0x2a4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d86f      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023b2:	4a96      	ldr	r2, [pc, #600]	; (800260c <HAL_GPIO_Init+0x2a8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d052      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023b8:	4a94      	ldr	r2, [pc, #592]	; (800260c <HAL_GPIO_Init+0x2a8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d869      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023be:	4a94      	ldr	r2, [pc, #592]	; (8002610 <HAL_GPIO_Init+0x2ac>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d04c      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023c4:	4a92      	ldr	r2, [pc, #584]	; (8002610 <HAL_GPIO_Init+0x2ac>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d863      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023ca:	4a92      	ldr	r2, [pc, #584]	; (8002614 <HAL_GPIO_Init+0x2b0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d046      	beq.n	800245e <HAL_GPIO_Init+0xfa>
 80023d0:	4a90      	ldr	r2, [pc, #576]	; (8002614 <HAL_GPIO_Init+0x2b0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d85d      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023d6:	2b12      	cmp	r3, #18
 80023d8:	d82a      	bhi.n	8002430 <HAL_GPIO_Init+0xcc>
 80023da:	2b12      	cmp	r3, #18
 80023dc:	d859      	bhi.n	8002492 <HAL_GPIO_Init+0x12e>
 80023de:	a201      	add	r2, pc, #4	; (adr r2, 80023e4 <HAL_GPIO_Init+0x80>)
 80023e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e4:	0800245f 	.word	0x0800245f
 80023e8:	08002439 	.word	0x08002439
 80023ec:	0800244b 	.word	0x0800244b
 80023f0:	0800248d 	.word	0x0800248d
 80023f4:	08002493 	.word	0x08002493
 80023f8:	08002493 	.word	0x08002493
 80023fc:	08002493 	.word	0x08002493
 8002400:	08002493 	.word	0x08002493
 8002404:	08002493 	.word	0x08002493
 8002408:	08002493 	.word	0x08002493
 800240c:	08002493 	.word	0x08002493
 8002410:	08002493 	.word	0x08002493
 8002414:	08002493 	.word	0x08002493
 8002418:	08002493 	.word	0x08002493
 800241c:	08002493 	.word	0x08002493
 8002420:	08002493 	.word	0x08002493
 8002424:	08002493 	.word	0x08002493
 8002428:	08002441 	.word	0x08002441
 800242c:	08002455 	.word	0x08002455
 8002430:	4a79      	ldr	r2, [pc, #484]	; (8002618 <HAL_GPIO_Init+0x2b4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d013      	beq.n	800245e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002436:	e02c      	b.n	8002492 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	623b      	str	r3, [r7, #32]
          break;
 800243e:	e029      	b.n	8002494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	3304      	adds	r3, #4
 8002446:	623b      	str	r3, [r7, #32]
          break;
 8002448:	e024      	b.n	8002494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	3308      	adds	r3, #8
 8002450:	623b      	str	r3, [r7, #32]
          break;
 8002452:	e01f      	b.n	8002494 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	330c      	adds	r3, #12
 800245a:	623b      	str	r3, [r7, #32]
          break;
 800245c:	e01a      	b.n	8002494 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d102      	bne.n	800246c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002466:	2304      	movs	r3, #4
 8002468:	623b      	str	r3, [r7, #32]
          break;
 800246a:	e013      	b.n	8002494 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d105      	bne.n	8002480 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002474:	2308      	movs	r3, #8
 8002476:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	611a      	str	r2, [r3, #16]
          break;
 800247e:	e009      	b.n	8002494 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002480:	2308      	movs	r3, #8
 8002482:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	615a      	str	r2, [r3, #20]
          break;
 800248a:	e003      	b.n	8002494 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800248c:	2300      	movs	r3, #0
 800248e:	623b      	str	r3, [r7, #32]
          break;
 8002490:	e000      	b.n	8002494 <HAL_GPIO_Init+0x130>
          break;
 8002492:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	2bff      	cmp	r3, #255	; 0xff
 8002498:	d801      	bhi.n	800249e <HAL_GPIO_Init+0x13a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	e001      	b.n	80024a2 <HAL_GPIO_Init+0x13e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3304      	adds	r3, #4
 80024a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2bff      	cmp	r3, #255	; 0xff
 80024a8:	d802      	bhi.n	80024b0 <HAL_GPIO_Init+0x14c>
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	e002      	b.n	80024b6 <HAL_GPIO_Init+0x152>
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	3b08      	subs	r3, #8
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	210f      	movs	r1, #15
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	fa01 f303 	lsl.w	r3, r1, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	401a      	ands	r2, r3
 80024c8:	6a39      	ldr	r1, [r7, #32]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	431a      	orrs	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 80b1 	beq.w	8002646 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024e4:	4b4d      	ldr	r3, [pc, #308]	; (800261c <HAL_GPIO_Init+0x2b8>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	4a4c      	ldr	r2, [pc, #304]	; (800261c <HAL_GPIO_Init+0x2b8>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6193      	str	r3, [r2, #24]
 80024f0:	4b4a      	ldr	r3, [pc, #296]	; (800261c <HAL_GPIO_Init+0x2b8>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024fc:	4a48      	ldr	r2, [pc, #288]	; (8002620 <HAL_GPIO_Init+0x2bc>)
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002508:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	220f      	movs	r2, #15
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	4013      	ands	r3, r2
 800251e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a40      	ldr	r2, [pc, #256]	; (8002624 <HAL_GPIO_Init+0x2c0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d013      	beq.n	8002550 <HAL_GPIO_Init+0x1ec>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a3f      	ldr	r2, [pc, #252]	; (8002628 <HAL_GPIO_Init+0x2c4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00d      	beq.n	800254c <HAL_GPIO_Init+0x1e8>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a3e      	ldr	r2, [pc, #248]	; (800262c <HAL_GPIO_Init+0x2c8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d007      	beq.n	8002548 <HAL_GPIO_Init+0x1e4>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a3d      	ldr	r2, [pc, #244]	; (8002630 <HAL_GPIO_Init+0x2cc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_GPIO_Init+0x1e0>
 8002540:	2303      	movs	r3, #3
 8002542:	e006      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002544:	2304      	movs	r3, #4
 8002546:	e004      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002548:	2302      	movs	r3, #2
 800254a:	e002      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <HAL_GPIO_Init+0x1ee>
 8002550:	2300      	movs	r3, #0
 8002552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002554:	f002 0203 	and.w	r2, r2, #3
 8002558:	0092      	lsls	r2, r2, #2
 800255a:	4093      	lsls	r3, r2
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002562:	492f      	ldr	r1, [pc, #188]	; (8002620 <HAL_GPIO_Init+0x2bc>)
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800257c:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	492c      	ldr	r1, [pc, #176]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800258a:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	43db      	mvns	r3, r3
 8002592:	4928      	ldr	r1, [pc, #160]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 8002594:	4013      	ands	r3, r2
 8002596:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d006      	beq.n	80025b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025a4:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4922      	ldr	r1, [pc, #136]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025b2:	4b20      	ldr	r3, [pc, #128]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	491e      	ldr	r1, [pc, #120]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025bc:	4013      	ands	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d006      	beq.n	80025da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	4918      	ldr	r1, [pc, #96]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	608b      	str	r3, [r1, #8]
 80025d8:	e006      	b.n	80025e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025da:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025dc:	689a      	ldr	r2, [r3, #8]
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	4914      	ldr	r1, [pc, #80]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d021      	beq.n	8002638 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	490e      	ldr	r1, [pc, #56]	; (8002634 <HAL_GPIO_Init+0x2d0>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60cb      	str	r3, [r1, #12]
 8002600:	e021      	b.n	8002646 <HAL_GPIO_Init+0x2e2>
 8002602:	bf00      	nop
 8002604:	10320000 	.word	0x10320000
 8002608:	10310000 	.word	0x10310000
 800260c:	10220000 	.word	0x10220000
 8002610:	10210000 	.word	0x10210000
 8002614:	10120000 	.word	0x10120000
 8002618:	10110000 	.word	0x10110000
 800261c:	40021000 	.word	0x40021000
 8002620:	40010000 	.word	0x40010000
 8002624:	40010800 	.word	0x40010800
 8002628:	40010c00 	.word	0x40010c00
 800262c:	40011000 	.word	0x40011000
 8002630:	40011400 	.word	0x40011400
 8002634:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_GPIO_Init+0x304>)
 800263a:	68da      	ldr	r2, [r3, #12]
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	43db      	mvns	r3, r3
 8002640:	4909      	ldr	r1, [pc, #36]	; (8002668 <HAL_GPIO_Init+0x304>)
 8002642:	4013      	ands	r3, r2
 8002644:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	3301      	adds	r3, #1
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	f47f ae8e 	bne.w	8002378 <HAL_GPIO_Init+0x14>
  }
}
 800265c:	bf00      	nop
 800265e:	bf00      	nop
 8002660:	372c      	adds	r7, #44	; 0x2c
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	40010400 	.word	0x40010400

0800266c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	887b      	ldrh	r3, [r7, #2]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
 8002688:	e001      	b.n	800268e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002690:	4618      	mov	r0, r3
 8002692:	3714      	adds	r7, #20
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr

0800269a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	807b      	strh	r3, [r7, #2]
 80026a6:	4613      	mov	r3, r2
 80026a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026aa:	787b      	ldrb	r3, [r7, #1]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026b0:	887a      	ldrh	r2, [r7, #2]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026b6:	e003      	b.n	80026c0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026b8:	887b      	ldrh	r3, [r7, #2]
 80026ba:	041a      	lsls	r2, r3, #16
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	611a      	str	r2, [r3, #16]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr
	...

080026cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026d6:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026d8:	695a      	ldr	r2, [r3, #20]
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d006      	beq.n	80026f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026e2:	4a05      	ldr	r2, [pc, #20]	; (80026f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026e8:	88fb      	ldrh	r3, [r7, #6]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fdda 	bl	80012a4 <HAL_GPIO_EXTI_Callback>
  }
}
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40010400 	.word	0x40010400

080026fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e272      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8087 	beq.w	800282a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800271c:	4b92      	ldr	r3, [pc, #584]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b04      	cmp	r3, #4
 8002726:	d00c      	beq.n	8002742 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002728:	4b8f      	ldr	r3, [pc, #572]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b08      	cmp	r3, #8
 8002732:	d112      	bne.n	800275a <HAL_RCC_OscConfig+0x5e>
 8002734:	4b8c      	ldr	r3, [pc, #560]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d10b      	bne.n	800275a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002742:	4b89      	ldr	r3, [pc, #548]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d06c      	beq.n	8002828 <HAL_RCC_OscConfig+0x12c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d168      	bne.n	8002828 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e24c      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x76>
 8002764:	4b80      	ldr	r3, [pc, #512]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a7f      	ldr	r2, [pc, #508]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 800276a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	e02e      	b.n	80027d0 <HAL_RCC_OscConfig+0xd4>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0x98>
 800277a:	4b7b      	ldr	r3, [pc, #492]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a7a      	ldr	r2, [pc, #488]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 8002780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b78      	ldr	r3, [pc, #480]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a77      	ldr	r2, [pc, #476]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 800278c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e01d      	b.n	80027d0 <HAL_RCC_OscConfig+0xd4>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0xbc>
 800279e:	4b72      	ldr	r3, [pc, #456]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a71      	ldr	r2, [pc, #452]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b6f      	ldr	r3, [pc, #444]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a6e      	ldr	r2, [pc, #440]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e00b      	b.n	80027d0 <HAL_RCC_OscConfig+0xd4>
 80027b8:	4b6b      	ldr	r3, [pc, #428]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a6a      	ldr	r2, [pc, #424]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 80027be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4b68      	ldr	r3, [pc, #416]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a67      	ldr	r2, [pc, #412]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff fbd8 	bl	8001f8c <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e0:	f7ff fbd4 	bl	8001f8c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e200      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b5d      	ldr	r3, [pc, #372]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0xe4>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7ff fbc4 	bl	8001f8c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002808:	f7ff fbc0 	bl	8001f8c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e1ec      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	4b53      	ldr	r3, [pc, #332]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x10c>
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d063      	beq.n	80028fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002836:	4b4c      	ldr	r3, [pc, #304]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002842:	4b49      	ldr	r3, [pc, #292]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b08      	cmp	r3, #8
 800284c:	d11c      	bne.n	8002888 <HAL_RCC_OscConfig+0x18c>
 800284e:	4b46      	ldr	r3, [pc, #280]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d116      	bne.n	8002888 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285a:	4b43      	ldr	r3, [pc, #268]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_RCC_OscConfig+0x176>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e1c0      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002872:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4939      	ldr	r1, [pc, #228]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	e03a      	b.n	80028fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002890:	4b36      	ldr	r3, [pc, #216]	; (800296c <HAL_RCC_OscConfig+0x270>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002896:	f7ff fb79 	bl	8001f8c <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289e:	f7ff fb75 	bl	8001f8c <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e1a1      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4927      	ldr	r1, [pc, #156]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
 80028d0:	e015      	b.n	80028fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d2:	4b26      	ldr	r3, [pc, #152]	; (800296c <HAL_RCC_OscConfig+0x270>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7ff fb58 	bl	8001f8c <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e0:	f7ff fb54 	bl	8001f8c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e180      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d03a      	beq.n	8002980 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d019      	beq.n	8002946 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002912:	4b17      	ldr	r3, [pc, #92]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002918:	f7ff fb38 	bl	8001f8c <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002920:	f7ff fb34 	bl	8001f8c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e160      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <HAL_RCC_OscConfig+0x26c>)
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800293e:	2001      	movs	r0, #1
 8002940:	f000 fad8 	bl	8002ef4 <RCC_Delay>
 8002944:	e01c      	b.n	8002980 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800294c:	f7ff fb1e 	bl	8001f8c <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002952:	e00f      	b.n	8002974 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002954:	f7ff fb1a 	bl	8001f8c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d908      	bls.n	8002974 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e146      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	42420000 	.word	0x42420000
 8002970:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002974:	4b92      	ldr	r3, [pc, #584]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1e9      	bne.n	8002954 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80a6 	beq.w	8002ada <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002992:	4b8b      	ldr	r3, [pc, #556]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10d      	bne.n	80029ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299e:	4b88      	ldr	r3, [pc, #544]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	4a87      	ldr	r2, [pc, #540]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a8:	61d3      	str	r3, [r2, #28]
 80029aa:	4b85      	ldr	r3, [pc, #532]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b6:	2301      	movs	r3, #1
 80029b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ba:	4b82      	ldr	r3, [pc, #520]	; (8002bc4 <HAL_RCC_OscConfig+0x4c8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d118      	bne.n	80029f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c6:	4b7f      	ldr	r3, [pc, #508]	; (8002bc4 <HAL_RCC_OscConfig+0x4c8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a7e      	ldr	r2, [pc, #504]	; (8002bc4 <HAL_RCC_OscConfig+0x4c8>)
 80029cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d2:	f7ff fadb 	bl	8001f8c <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029da:	f7ff fad7 	bl	8001f8c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b64      	cmp	r3, #100	; 0x64
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e103      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ec:	4b75      	ldr	r3, [pc, #468]	; (8002bc4 <HAL_RCC_OscConfig+0x4c8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x312>
 8002a00:	4b6f      	ldr	r3, [pc, #444]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4a6e      	ldr	r2, [pc, #440]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6213      	str	r3, [r2, #32]
 8002a0c:	e02d      	b.n	8002a6a <HAL_RCC_OscConfig+0x36e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCC_OscConfig+0x334>
 8002a16:	4b6a      	ldr	r3, [pc, #424]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	4a69      	ldr	r2, [pc, #420]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	f023 0301 	bic.w	r3, r3, #1
 8002a20:	6213      	str	r3, [r2, #32]
 8002a22:	4b67      	ldr	r3, [pc, #412]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	4a66      	ldr	r2, [pc, #408]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a28:	f023 0304 	bic.w	r3, r3, #4
 8002a2c:	6213      	str	r3, [r2, #32]
 8002a2e:	e01c      	b.n	8002a6a <HAL_RCC_OscConfig+0x36e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCC_OscConfig+0x356>
 8002a38:	4b61      	ldr	r3, [pc, #388]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4a60      	ldr	r2, [pc, #384]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	6213      	str	r3, [r2, #32]
 8002a44:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	4a5d      	ldr	r2, [pc, #372]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	6213      	str	r3, [r2, #32]
 8002a50:	e00b      	b.n	8002a6a <HAL_RCC_OscConfig+0x36e>
 8002a52:	4b5b      	ldr	r3, [pc, #364]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	4a5a      	ldr	r2, [pc, #360]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a58:	f023 0301 	bic.w	r3, r3, #1
 8002a5c:	6213      	str	r3, [r2, #32]
 8002a5e:	4b58      	ldr	r3, [pc, #352]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4a57      	ldr	r2, [pc, #348]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	f023 0304 	bic.w	r3, r3, #4
 8002a68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d015      	beq.n	8002a9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a72:	f7ff fa8b 	bl	8001f8c <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a78:	e00a      	b.n	8002a90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7ff fa87 	bl	8001f8c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e0b1      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a90:	4b4b      	ldr	r3, [pc, #300]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ee      	beq.n	8002a7a <HAL_RCC_OscConfig+0x37e>
 8002a9c:	e014      	b.n	8002ac8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9e:	f7ff fa75 	bl	8001f8c <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa4:	e00a      	b.n	8002abc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7ff fa71 	bl	8001f8c <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e09b      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002abc:	4b40      	ldr	r3, [pc, #256]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d1ee      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ac8:	7dfb      	ldrb	r3, [r7, #23]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d105      	bne.n	8002ada <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ace:	4b3c      	ldr	r3, [pc, #240]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8087 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae4:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d061      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d146      	bne.n	8002b86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002af8:	4b33      	ldr	r3, [pc, #204]	; (8002bc8 <HAL_RCC_OscConfig+0x4cc>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afe:	f7ff fa45 	bl	8001f8c <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b06:	f7ff fa41 	bl	8001f8c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e06d      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b18:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f0      	bne.n	8002b06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2c:	d108      	bne.n	8002b40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b2e:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	4921      	ldr	r1, [pc, #132]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b40:	4b1f      	ldr	r3, [pc, #124]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a19      	ldr	r1, [r3, #32]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	430b      	orrs	r3, r1
 8002b52:	491b      	ldr	r1, [pc, #108]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <HAL_RCC_OscConfig+0x4cc>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7ff fa15 	bl	8001f8c <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b66:	f7ff fa11 	bl	8001f8c <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e03d      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x46a>
 8002b84:	e035      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_RCC_OscConfig+0x4cc>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7ff f9fe 	bl	8001f8c <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b94:	f7ff f9fa 	bl	8001f8c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e026      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x498>
 8002bb2:	e01e      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d107      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e019      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	40007000 	.word	0x40007000
 8002bc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_OscConfig+0x500>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d106      	bne.n	8002bee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d001      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0d0      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c14:	4b6a      	ldr	r3, [pc, #424]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d910      	bls.n	8002c44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b67      	ldr	r3, [pc, #412]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 0207 	bic.w	r2, r3, #7
 8002c2a:	4965      	ldr	r1, [pc, #404]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c32:	4b63      	ldr	r3, [pc, #396]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0307 	and.w	r3, r3, #7
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e0b8      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d020      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c5c:	4b59      	ldr	r3, [pc, #356]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4a58      	ldr	r2, [pc, #352]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c74:	4b53      	ldr	r3, [pc, #332]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a52      	ldr	r2, [pc, #328]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c80:	4b50      	ldr	r3, [pc, #320]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	494d      	ldr	r1, [pc, #308]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d040      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b47      	ldr	r3, [pc, #284]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d115      	bne.n	8002cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e07f      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbe:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e073      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cce:	4b3d      	ldr	r3, [pc, #244]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e06b      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cde:	4b39      	ldr	r3, [pc, #228]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f023 0203 	bic.w	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4936      	ldr	r1, [pc, #216]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf0:	f7ff f94c 	bl	8001f8c <HAL_GetTick>
 8002cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf8:	f7ff f948 	bl	8001f8c <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e053      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 020c 	and.w	r2, r3, #12
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d1eb      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d20:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d210      	bcs.n	8002d50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b24      	ldr	r3, [pc, #144]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 0207 	bic.w	r2, r3, #7
 8002d36:	4922      	ldr	r1, [pc, #136]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e032      	b.n	8002db6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0304 	and.w	r3, r3, #4
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d5c:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4916      	ldr	r1, [pc, #88]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0308 	and.w	r3, r3, #8
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d7a:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	490e      	ldr	r1, [pc, #56]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d8e:	f000 f821 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 8002d92:	4602      	mov	r2, r0
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	490a      	ldr	r1, [pc, #40]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002da0:	5ccb      	ldrb	r3, [r1, r3]
 8002da2:	fa22 f303 	lsr.w	r3, r2, r3
 8002da6:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <HAL_RCC_ClockConfig+0x1cc>)
 8002da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002daa:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <HAL_RCC_ClockConfig+0x1d0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff f8aa 	bl	8001f08 <HAL_InitTick>

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40022000 	.word	0x40022000
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	08005c54 	.word	0x08005c54
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd4:	b490      	push	{r4, r7}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002dda:	4b29      	ldr	r3, [pc, #164]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xac>)
 8002ddc:	1d3c      	adds	r4, r7, #4
 8002dde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002de0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002de4:	f240 2301 	movw	r3, #513	; 0x201
 8002de8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	2300      	movs	r3, #0
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dfe:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 030c 	and.w	r3, r3, #12
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d002      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x40>
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d003      	beq.n	8002e1a <HAL_RCC_GetSysClockFreq+0x46>
 8002e12:	e02b      	b.n	8002e6c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e14:	4b1c      	ldr	r3, [pc, #112]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e16:	623b      	str	r3, [r7, #32]
      break;
 8002e18:	e02b      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	0c9b      	lsrs	r3, r3, #18
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	3328      	adds	r3, #40	; 0x28
 8002e24:	443b      	add	r3, r7
 8002e26:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e2a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d012      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e36:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	0c5b      	lsrs	r3, r3, #17
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	3328      	adds	r3, #40	; 0x28
 8002e42:	443b      	add	r3, r7
 8002e44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	4a0e      	ldr	r2, [pc, #56]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e4e:	fb03 f202 	mul.w	r2, r3, r2
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5a:	e004      	b.n	8002e66 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	4a0b      	ldr	r2, [pc, #44]	; (8002e8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e60:	fb02 f303 	mul.w	r3, r2, r3
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	623b      	str	r3, [r7, #32]
      break;
 8002e6a:	e002      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e6e:	623b      	str	r3, [r7, #32]
      break;
 8002e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e72:	6a3b      	ldr	r3, [r7, #32]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3728      	adds	r7, #40	; 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc90      	pop	{r4, r7}
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	08005c44 	.word	0x08005c44
 8002e84:	40021000 	.word	0x40021000
 8002e88:	007a1200 	.word	0x007a1200
 8002e8c:	003d0900 	.word	0x003d0900

08002e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e94:	4b02      	ldr	r3, [pc, #8]	; (8002ea0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr
 8002ea0:	20000000 	.word	0x20000000

08002ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ea8:	f7ff fff2 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002eac:	4602      	mov	r2, r0
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	4903      	ldr	r1, [pc, #12]	; (8002ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eba:	5ccb      	ldrb	r3, [r1, r3]
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40021000 	.word	0x40021000
 8002ec8:	08005c64 	.word	0x08005c64

08002ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ed0:	f7ff ffde 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	0adb      	lsrs	r3, r3, #11
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4903      	ldr	r1, [pc, #12]	; (8002ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	08005c64 	.word	0x08005c64

08002ef4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002efc:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <RCC_Delay+0x34>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <RCC_Delay+0x38>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0a5b      	lsrs	r3, r3, #9
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	fb02 f303 	mul.w	r3, r2, r3
 8002f0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f10:	bf00      	nop
  }
  while (Delay --);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1e5a      	subs	r2, r3, #1
 8002f16:	60fa      	str	r2, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f9      	bne.n	8002f10 <RCC_Delay+0x1c>
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	10624dd3 	.word	0x10624dd3

08002f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d101      	bne.n	8002f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e041      	b.n	8002fc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe fe50 	bl	8001bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4610      	mov	r0, r2
 8002f70:	f000 f8f2 	bl	8003158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d101      	bne.n	8002fe6 <HAL_TIM_ConfigClockSource+0x18>
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	e0b3      	b.n	800314e <HAL_TIM_ConfigClockSource+0x180>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003004:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800300c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800301e:	d03e      	beq.n	800309e <HAL_TIM_ConfigClockSource+0xd0>
 8003020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003024:	f200 8087 	bhi.w	8003136 <HAL_TIM_ConfigClockSource+0x168>
 8003028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800302c:	f000 8085 	beq.w	800313a <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003034:	d87f      	bhi.n	8003136 <HAL_TIM_ConfigClockSource+0x168>
 8003036:	2b70      	cmp	r3, #112	; 0x70
 8003038:	d01a      	beq.n	8003070 <HAL_TIM_ConfigClockSource+0xa2>
 800303a:	2b70      	cmp	r3, #112	; 0x70
 800303c:	d87b      	bhi.n	8003136 <HAL_TIM_ConfigClockSource+0x168>
 800303e:	2b60      	cmp	r3, #96	; 0x60
 8003040:	d050      	beq.n	80030e4 <HAL_TIM_ConfigClockSource+0x116>
 8003042:	2b60      	cmp	r3, #96	; 0x60
 8003044:	d877      	bhi.n	8003136 <HAL_TIM_ConfigClockSource+0x168>
 8003046:	2b50      	cmp	r3, #80	; 0x50
 8003048:	d03c      	beq.n	80030c4 <HAL_TIM_ConfigClockSource+0xf6>
 800304a:	2b50      	cmp	r3, #80	; 0x50
 800304c:	d873      	bhi.n	8003136 <HAL_TIM_ConfigClockSource+0x168>
 800304e:	2b40      	cmp	r3, #64	; 0x40
 8003050:	d058      	beq.n	8003104 <HAL_TIM_ConfigClockSource+0x136>
 8003052:	2b40      	cmp	r3, #64	; 0x40
 8003054:	d86f      	bhi.n	8003136 <HAL_TIM_ConfigClockSource+0x168>
 8003056:	2b30      	cmp	r3, #48	; 0x30
 8003058:	d064      	beq.n	8003124 <HAL_TIM_ConfigClockSource+0x156>
 800305a:	2b30      	cmp	r3, #48	; 0x30
 800305c:	d86b      	bhi.n	8003136 <HAL_TIM_ConfigClockSource+0x168>
 800305e:	2b20      	cmp	r3, #32
 8003060:	d060      	beq.n	8003124 <HAL_TIM_ConfigClockSource+0x156>
 8003062:	2b20      	cmp	r3, #32
 8003064:	d867      	bhi.n	8003136 <HAL_TIM_ConfigClockSource+0x168>
 8003066:	2b00      	cmp	r3, #0
 8003068:	d05c      	beq.n	8003124 <HAL_TIM_ConfigClockSource+0x156>
 800306a:	2b10      	cmp	r3, #16
 800306c:	d05a      	beq.n	8003124 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800306e:	e062      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	6899      	ldr	r1, [r3, #8]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f000 f943 	bl	800330a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003092:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	609a      	str	r2, [r3, #8]
      break;
 800309c:	e04e      	b.n	800313c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6899      	ldr	r1, [r3, #8]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f000 f92c 	bl	800330a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030c0:	609a      	str	r2, [r3, #8]
      break;
 80030c2:	e03b      	b.n	800313c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	461a      	mov	r2, r3
 80030d2:	f000 f8a3 	bl	800321c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2150      	movs	r1, #80	; 0x50
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 f8fa 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 80030e2:	e02b      	b.n	800313c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6859      	ldr	r1, [r3, #4]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	461a      	mov	r2, r3
 80030f2:	f000 f8c1 	bl	8003278 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2160      	movs	r1, #96	; 0x60
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 f8ea 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 8003102:	e01b      	b.n	800313c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6818      	ldr	r0, [r3, #0]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6859      	ldr	r1, [r3, #4]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	461a      	mov	r2, r3
 8003112:	f000 f883 	bl	800321c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2140      	movs	r1, #64	; 0x40
 800311c:	4618      	mov	r0, r3
 800311e:	f000 f8da 	bl	80032d6 <TIM_ITRx_SetConfig>
      break;
 8003122:	e00b      	b.n	800313c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f000 f8d1 	bl	80032d6 <TIM_ITRx_SetConfig>
        break;
 8003134:	e002      	b.n	800313c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800313a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a29      	ldr	r2, [pc, #164]	; (8003210 <TIM_Base_SetConfig+0xb8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d00b      	beq.n	8003188 <TIM_Base_SetConfig+0x30>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003176:	d007      	beq.n	8003188 <TIM_Base_SetConfig+0x30>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a26      	ldr	r2, [pc, #152]	; (8003214 <TIM_Base_SetConfig+0xbc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <TIM_Base_SetConfig+0x30>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a25      	ldr	r2, [pc, #148]	; (8003218 <TIM_Base_SetConfig+0xc0>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d108      	bne.n	800319a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a1c      	ldr	r2, [pc, #112]	; (8003210 <TIM_Base_SetConfig+0xb8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00b      	beq.n	80031ba <TIM_Base_SetConfig+0x62>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a8:	d007      	beq.n	80031ba <TIM_Base_SetConfig+0x62>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a19      	ldr	r2, [pc, #100]	; (8003214 <TIM_Base_SetConfig+0xbc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d003      	beq.n	80031ba <TIM_Base_SetConfig+0x62>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a18      	ldr	r2, [pc, #96]	; (8003218 <TIM_Base_SetConfig+0xc0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d108      	bne.n	80031cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a07      	ldr	r2, [pc, #28]	; (8003210 <TIM_Base_SetConfig+0xb8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d103      	bne.n	8003200 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	615a      	str	r2, [r3, #20]
}
 8003206:	bf00      	nop
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40000400 	.word	0x40000400
 8003218:	40000800 	.word	0x40000800

0800321c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f023 0201 	bic.w	r2, r3, #1
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f023 030a 	bic.w	r3, r3, #10
 8003258:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003278:	b480      	push	{r7}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	f023 0210 	bic.w	r2, r3, #16
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	031b      	lsls	r3, r3, #12
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	621a      	str	r2, [r3, #32]
}
 80032cc:	bf00      	nop
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr

080032d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f043 0307 	orr.w	r3, r3, #7
 80032f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	bf00      	nop
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	bc80      	pop	{r7}
 8003308:	4770      	bx	lr

0800330a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800330a:	b480      	push	{r7}
 800330c:	b087      	sub	sp, #28
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003324:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	021a      	lsls	r2, r3, #8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	431a      	orrs	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4313      	orrs	r3, r2
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	609a      	str	r2, [r3, #8]
}
 800333e:	bf00      	nop
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800335c:	2302      	movs	r3, #2
 800335e:	e046      	b.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d00e      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ac:	d009      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a12      	ldr	r2, [pc, #72]	; (80033fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d004      	beq.n	80033c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a10      	ldr	r2, [pc, #64]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d10c      	bne.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3714      	adds	r7, #20
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40012c00 	.word	0x40012c00
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800

08003404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e03f      	b.n	8003496 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d106      	bne.n	8003430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe fc94 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2224      	movs	r2, #36	; 0x24
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 fc85 	bl	8003d58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800345c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695a      	ldr	r2, [r3, #20]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800346c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800347c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b08a      	sub	sp, #40	; 0x28
 80034a2:	af02      	add	r7, sp, #8
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	4613      	mov	r3, r2
 80034ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	d17c      	bne.n	80035b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d002      	beq.n	80034ca <HAL_UART_Transmit+0x2c>
 80034c4:	88fb      	ldrh	r3, [r7, #6]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e075      	b.n	80035ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_UART_Transmit+0x3e>
 80034d8:	2302      	movs	r3, #2
 80034da:	e06e      	b.n	80035ba <HAL_UART_Transmit+0x11c>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2221      	movs	r2, #33	; 0x21
 80034ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034f2:	f7fe fd4b 	bl	8001f8c <HAL_GetTick>
 80034f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	88fa      	ldrh	r2, [r7, #6]
 8003502:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350c:	d108      	bne.n	8003520 <HAL_UART_Transmit+0x82>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d104      	bne.n	8003520 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	e003      	b.n	8003528 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003530:	e02a      	b.n	8003588 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2200      	movs	r2, #0
 800353a:	2180      	movs	r1, #128	; 0x80
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 fa38 	bl	80039b2 <UART_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e036      	b.n	80035ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10b      	bne.n	800356a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003560:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	3302      	adds	r3, #2
 8003566:	61bb      	str	r3, [r7, #24]
 8003568:	e007      	b.n	800357a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	781a      	ldrb	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	3301      	adds	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1cf      	bne.n	8003532 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2200      	movs	r2, #0
 800359a:	2140      	movs	r1, #64	; 0x40
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 fa08 	bl	80039b2 <UART_WaitOnFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e006      	b.n	80035ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e000      	b.n	80035ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	4613      	mov	r3, r2
 80035ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d11d      	bne.n	8003618 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_UART_Receive_IT+0x26>
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e016      	b.n	800361a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_UART_Receive_IT+0x38>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e00f      	b.n	800361a <HAL_UART_Receive_IT+0x58>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	461a      	mov	r2, r3
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fa19 	bl	8003a46 <UART_Start_Receive_IT>
 8003614:	4603      	mov	r3, r0
 8003616:	e000      	b.n	800361a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003618:	2302      	movs	r3, #2
  }
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003644:	2300      	movs	r3, #0
 8003646:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10d      	bne.n	8003676 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_UART_IRQHandler+0x52>
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fac9 	bl	8003c06 <UART_Receive_IT>
      return;
 8003674:	e17b      	b.n	800396e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80b1 	beq.w	80037e0 <HAL_UART_IRQHandler+0x1bc>
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d105      	bne.n	8003694 <HAL_UART_IRQHandler+0x70>
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 80a6 	beq.w	80037e0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <HAL_UART_IRQHandler+0x90>
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	f043 0201 	orr.w	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	f003 0304 	and.w	r3, r3, #4
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_UART_IRQHandler+0xb0>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0202 	orr.w	r2, r3, #2
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_UART_IRQHandler+0xd0>
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	f043 0204 	orr.w	r2, r3, #4
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00f      	beq.n	800371e <HAL_UART_IRQHandler+0xfa>
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d104      	bne.n	8003712 <HAL_UART_IRQHandler+0xee>
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f043 0208 	orr.w	r2, r3, #8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 811e 	beq.w	8003964 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_UART_IRQHandler+0x11e>
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fa62 	bl	8003c06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d102      	bne.n	800376a <HAL_UART_IRQHandler+0x146>
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d031      	beq.n	80037ce <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f9a4 	bl	8003ab8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d023      	beq.n	80037c6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800378c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	2b00      	cmp	r3, #0
 8003794:	d013      	beq.n	80037be <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	4a76      	ldr	r2, [pc, #472]	; (8003974 <HAL_UART_IRQHandler+0x350>)
 800379c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fd68 	bl	8002278 <HAL_DMA_Abort_IT>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d016      	beq.n	80037dc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037b8:	4610      	mov	r0, r2
 80037ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	e00e      	b.n	80037dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f8e3 	bl	800398a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c4:	e00a      	b.n	80037dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8df 	bl	800398a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037cc:	e006      	b.n	80037dc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f8db 	bl	800398a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037da:	e0c3      	b.n	8003964 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	bf00      	nop
    return;
 80037de:	e0c1      	b.n	8003964 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	f040 80a1 	bne.w	800392c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 809b 	beq.w	800392c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8095 	beq.w	800392c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	d04e      	beq.n	80038c4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003830:	8a3b      	ldrh	r3, [r7, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 8098 	beq.w	8003968 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800383c:	8a3a      	ldrh	r2, [r7, #16]
 800383e:	429a      	cmp	r2, r3
 8003840:	f080 8092 	bcs.w	8003968 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	8a3a      	ldrh	r2, [r7, #16]
 8003848:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b20      	cmp	r3, #32
 8003852:	d02b      	beq.n	80038ac <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003862:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	695a      	ldr	r2, [r3, #20]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003882:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0210 	bic.w	r2, r2, #16
 80038a0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fe fcab 	bl	8002202 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	4619      	mov	r1, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f86d 	bl	800399c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80038c2:	e051      	b.n	8003968 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d047      	beq.n	800396c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80038dc:	8a7b      	ldrh	r3, [r7, #18]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d044      	beq.n	800396c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038f0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0210 	bic.w	r2, r2, #16
 800391e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003920:	8a7b      	ldrh	r3, [r7, #18]
 8003922:	4619      	mov	r1, r3
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f839 	bl	800399c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800392a:	e01f      	b.n	800396c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003932:	2b00      	cmp	r3, #0
 8003934:	d008      	beq.n	8003948 <HAL_UART_IRQHandler+0x324>
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 f8f9 	bl	8003b38 <UART_Transmit_IT>
    return;
 8003946:	e012      	b.n	800396e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00d      	beq.n	800396e <HAL_UART_IRQHandler+0x34a>
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f93a 	bl	8003bd6 <UART_EndTransmit_IT>
    return;
 8003962:	e004      	b.n	800396e <HAL_UART_IRQHandler+0x34a>
    return;
 8003964:	bf00      	nop
 8003966:	e002      	b.n	800396e <HAL_UART_IRQHandler+0x34a>
      return;
 8003968:	bf00      	nop
 800396a:	e000      	b.n	800396e <HAL_UART_IRQHandler+0x34a>
      return;
 800396c:	bf00      	nop
  }
}
 800396e:	3728      	adds	r7, #40	; 0x28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	08003b11 	.word	0x08003b11

08003978 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr

0800398a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr

080039b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	603b      	str	r3, [r7, #0]
 80039be:	4613      	mov	r3, r2
 80039c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039c2:	e02c      	b.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ca:	d028      	beq.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80039d2:	f7fe fadb 	bl	8001f8c <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d21d      	bcs.n	8003a1e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039f0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695a      	ldr	r2, [r3, #20]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e00f      	b.n	8003a3e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4013      	ands	r3, r2
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	bf0c      	ite	eq
 8003a2e:	2301      	moveq	r3, #1
 8003a30:	2300      	movne	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	461a      	mov	r2, r3
 8003a36:	79fb      	ldrb	r3, [r7, #7]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d0c3      	beq.n	80039c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	60f8      	str	r0, [r7, #12]
 8003a4e:	60b9      	str	r1, [r7, #8]
 8003a50:	4613      	mov	r3, r2
 8003a52:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	88fa      	ldrh	r2, [r7, #6]
 8003a5e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	88fa      	ldrh	r2, [r7, #6]
 8003a64:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2222      	movs	r2, #34	; 0x22
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0220 	orr.w	r2, r2, #32
 8003aaa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68da      	ldr	r2, [r3, #12]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ace:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695a      	ldr	r2, [r3, #20]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d107      	bne.n	8003af8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f022 0210 	bic.w	r2, r2, #16
 8003af6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b06:	bf00      	nop
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr

08003b10 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff ff2d 	bl	800398a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b21      	cmp	r3, #33	; 0x21
 8003b4a:	d13e      	bne.n	8003bca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b54:	d114      	bne.n	8003b80 <UART_Transmit_IT+0x48>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d110      	bne.n	8003b80 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	881b      	ldrh	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b72:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	1c9a      	adds	r2, r3, #2
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	621a      	str	r2, [r3, #32]
 8003b7e:	e008      	b.n	8003b92 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	1c59      	adds	r1, r3, #1
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6211      	str	r1, [r2, #32]
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10f      	bne.n	8003bc6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68da      	ldr	r2, [r3, #12]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e000      	b.n	8003bcc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bca:	2302      	movs	r3, #2
  }
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr

08003bd6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff febe 	bl	8003978 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b22      	cmp	r3, #34	; 0x22
 8003c18:	f040 8099 	bne.w	8003d4e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c24:	d117      	bne.n	8003c56 <UART_Receive_IT+0x50>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d113      	bne.n	8003c56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c36:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	1c9a      	adds	r2, r3, #2
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28
 8003c54:	e026      	b.n	8003ca4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c68:	d007      	beq.n	8003c7a <UART_Receive_IT+0x74>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10a      	bne.n	8003c88 <UART_Receive_IT+0x82>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d106      	bne.n	8003c88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	e008      	b.n	8003c9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d148      	bne.n	8003d4a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0220 	bic.w	r2, r2, #32
 8003cc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0201 	bic.w	r2, r2, #1
 8003ce6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d123      	bne.n	8003d40 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0210 	bic.w	r2, r2, #16
 8003d0c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d10a      	bne.n	8003d32 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60fb      	str	r3, [r7, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d36:	4619      	mov	r1, r3
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff fe2f 	bl	800399c <HAL_UARTEx_RxEventCallback>
 8003d3e:	e002      	b.n	8003d46 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fd fa6f 	bl	8001224 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e002      	b.n	8003d50 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e000      	b.n	8003d50 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003d4e:	2302      	movs	r3, #2
  }
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d92:	f023 030c 	bic.w	r3, r3, #12
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	6812      	ldr	r2, [r2, #0]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a2c      	ldr	r2, [pc, #176]	; (8003e6c <UART_SetConfig+0x114>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d103      	bne.n	8003dc8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003dc0:	f7ff f884 	bl	8002ecc <HAL_RCC_GetPCLK2Freq>
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	e002      	b.n	8003dce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003dc8:	f7ff f86c 	bl	8002ea4 <HAL_RCC_GetPCLK1Freq>
 8003dcc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009a      	lsls	r2, r3, #2
 8003dd8:	441a      	add	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de4:	4a22      	ldr	r2, [pc, #136]	; (8003e70 <UART_SetConfig+0x118>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	0119      	lsls	r1, r3, #4
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	009a      	lsls	r2, r3, #2
 8003df8:	441a      	add	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e04:	4b1a      	ldr	r3, [pc, #104]	; (8003e70 <UART_SetConfig+0x118>)
 8003e06:	fba3 0302 	umull	r0, r3, r3, r2
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	2064      	movs	r0, #100	; 0x64
 8003e0e:	fb00 f303 	mul.w	r3, r0, r3
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	3332      	adds	r3, #50	; 0x32
 8003e18:	4a15      	ldr	r2, [pc, #84]	; (8003e70 <UART_SetConfig+0x118>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e24:	4419      	add	r1, r3
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009a      	lsls	r2, r3, #2
 8003e30:	441a      	add	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <UART_SetConfig+0x118>)
 8003e3e:	fba3 0302 	umull	r0, r3, r3, r2
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2064      	movs	r0, #100	; 0x64
 8003e46:	fb00 f303 	mul.w	r3, r0, r3
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	3332      	adds	r3, #50	; 0x32
 8003e50:	4a07      	ldr	r2, [pc, #28]	; (8003e70 <UART_SetConfig+0x118>)
 8003e52:	fba2 2303 	umull	r2, r3, r2, r3
 8003e56:	095b      	lsrs	r3, r3, #5
 8003e58:	f003 020f 	and.w	r2, r3, #15
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	440a      	add	r2, r1
 8003e62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e64:	bf00      	nop
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40013800 	.word	0x40013800
 8003e70:	51eb851f 	.word	0x51eb851f

08003e74 <__errno>:
 8003e74:	4b01      	ldr	r3, [pc, #4]	; (8003e7c <__errno+0x8>)
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	2000000c 	.word	0x2000000c

08003e80 <__libc_init_array>:
 8003e80:	b570      	push	{r4, r5, r6, lr}
 8003e82:	2600      	movs	r6, #0
 8003e84:	4d0c      	ldr	r5, [pc, #48]	; (8003eb8 <__libc_init_array+0x38>)
 8003e86:	4c0d      	ldr	r4, [pc, #52]	; (8003ebc <__libc_init_array+0x3c>)
 8003e88:	1b64      	subs	r4, r4, r5
 8003e8a:	10a4      	asrs	r4, r4, #2
 8003e8c:	42a6      	cmp	r6, r4
 8003e8e:	d109      	bne.n	8003ea4 <__libc_init_array+0x24>
 8003e90:	f001 fa1e 	bl	80052d0 <_init>
 8003e94:	2600      	movs	r6, #0
 8003e96:	4d0a      	ldr	r5, [pc, #40]	; (8003ec0 <__libc_init_array+0x40>)
 8003e98:	4c0a      	ldr	r4, [pc, #40]	; (8003ec4 <__libc_init_array+0x44>)
 8003e9a:	1b64      	subs	r4, r4, r5
 8003e9c:	10a4      	asrs	r4, r4, #2
 8003e9e:	42a6      	cmp	r6, r4
 8003ea0:	d105      	bne.n	8003eae <__libc_init_array+0x2e>
 8003ea2:	bd70      	pop	{r4, r5, r6, pc}
 8003ea4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ea8:	4798      	blx	r3
 8003eaa:	3601      	adds	r6, #1
 8003eac:	e7ee      	b.n	8003e8c <__libc_init_array+0xc>
 8003eae:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eb2:	4798      	blx	r3
 8003eb4:	3601      	adds	r6, #1
 8003eb6:	e7f2      	b.n	8003e9e <__libc_init_array+0x1e>
 8003eb8:	08005d04 	.word	0x08005d04
 8003ebc:	08005d04 	.word	0x08005d04
 8003ec0:	08005d04 	.word	0x08005d04
 8003ec4:	08005d08 	.word	0x08005d08

08003ec8 <memcpy>:
 8003ec8:	440a      	add	r2, r1
 8003eca:	4291      	cmp	r1, r2
 8003ecc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ed0:	d100      	bne.n	8003ed4 <memcpy+0xc>
 8003ed2:	4770      	bx	lr
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eda:	4291      	cmp	r1, r2
 8003edc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ee0:	d1f9      	bne.n	8003ed6 <memcpy+0xe>
 8003ee2:	bd10      	pop	{r4, pc}

08003ee4 <memset>:
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	4402      	add	r2, r0
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d100      	bne.n	8003eee <memset+0xa>
 8003eec:	4770      	bx	lr
 8003eee:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef2:	e7f9      	b.n	8003ee8 <memset+0x4>

08003ef4 <iprintf>:
 8003ef4:	b40f      	push	{r0, r1, r2, r3}
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <iprintf+0x2c>)
 8003ef8:	b513      	push	{r0, r1, r4, lr}
 8003efa:	681c      	ldr	r4, [r3, #0]
 8003efc:	b124      	cbz	r4, 8003f08 <iprintf+0x14>
 8003efe:	69a3      	ldr	r3, [r4, #24]
 8003f00:	b913      	cbnz	r3, 8003f08 <iprintf+0x14>
 8003f02:	4620      	mov	r0, r4
 8003f04:	f000 fa90 	bl	8004428 <__sinit>
 8003f08:	ab05      	add	r3, sp, #20
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	9a04      	ldr	r2, [sp, #16]
 8003f0e:	68a1      	ldr	r1, [r4, #8]
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	f000 fdef 	bl	8004af4 <_vfiprintf_r>
 8003f16:	b002      	add	sp, #8
 8003f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f1c:	b004      	add	sp, #16
 8003f1e:	4770      	bx	lr
 8003f20:	2000000c 	.word	0x2000000c

08003f24 <_puts_r>:
 8003f24:	b570      	push	{r4, r5, r6, lr}
 8003f26:	460e      	mov	r6, r1
 8003f28:	4605      	mov	r5, r0
 8003f2a:	b118      	cbz	r0, 8003f34 <_puts_r+0x10>
 8003f2c:	6983      	ldr	r3, [r0, #24]
 8003f2e:	b90b      	cbnz	r3, 8003f34 <_puts_r+0x10>
 8003f30:	f000 fa7a 	bl	8004428 <__sinit>
 8003f34:	69ab      	ldr	r3, [r5, #24]
 8003f36:	68ac      	ldr	r4, [r5, #8]
 8003f38:	b913      	cbnz	r3, 8003f40 <_puts_r+0x1c>
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f000 fa74 	bl	8004428 <__sinit>
 8003f40:	4b2c      	ldr	r3, [pc, #176]	; (8003ff4 <_puts_r+0xd0>)
 8003f42:	429c      	cmp	r4, r3
 8003f44:	d120      	bne.n	8003f88 <_puts_r+0x64>
 8003f46:	686c      	ldr	r4, [r5, #4]
 8003f48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f4a:	07db      	lsls	r3, r3, #31
 8003f4c:	d405      	bmi.n	8003f5a <_puts_r+0x36>
 8003f4e:	89a3      	ldrh	r3, [r4, #12]
 8003f50:	0598      	lsls	r0, r3, #22
 8003f52:	d402      	bmi.n	8003f5a <_puts_r+0x36>
 8003f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f56:	f000 fb05 	bl	8004564 <__retarget_lock_acquire_recursive>
 8003f5a:	89a3      	ldrh	r3, [r4, #12]
 8003f5c:	0719      	lsls	r1, r3, #28
 8003f5e:	d51d      	bpl.n	8003f9c <_puts_r+0x78>
 8003f60:	6923      	ldr	r3, [r4, #16]
 8003f62:	b1db      	cbz	r3, 8003f9c <_puts_r+0x78>
 8003f64:	3e01      	subs	r6, #1
 8003f66:	68a3      	ldr	r3, [r4, #8]
 8003f68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	60a3      	str	r3, [r4, #8]
 8003f70:	bb39      	cbnz	r1, 8003fc2 <_puts_r+0x9e>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	da38      	bge.n	8003fe8 <_puts_r+0xc4>
 8003f76:	4622      	mov	r2, r4
 8003f78:	210a      	movs	r1, #10
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f000 f87e 	bl	800407c <__swbuf_r>
 8003f80:	3001      	adds	r0, #1
 8003f82:	d011      	beq.n	8003fa8 <_puts_r+0x84>
 8003f84:	250a      	movs	r5, #10
 8003f86:	e011      	b.n	8003fac <_puts_r+0x88>
 8003f88:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <_puts_r+0xd4>)
 8003f8a:	429c      	cmp	r4, r3
 8003f8c:	d101      	bne.n	8003f92 <_puts_r+0x6e>
 8003f8e:	68ac      	ldr	r4, [r5, #8]
 8003f90:	e7da      	b.n	8003f48 <_puts_r+0x24>
 8003f92:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <_puts_r+0xd8>)
 8003f94:	429c      	cmp	r4, r3
 8003f96:	bf08      	it	eq
 8003f98:	68ec      	ldreq	r4, [r5, #12]
 8003f9a:	e7d5      	b.n	8003f48 <_puts_r+0x24>
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f000 f8be 	bl	8004120 <__swsetup_r>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	d0dd      	beq.n	8003f64 <_puts_r+0x40>
 8003fa8:	f04f 35ff 	mov.w	r5, #4294967295
 8003fac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fae:	07da      	lsls	r2, r3, #31
 8003fb0:	d405      	bmi.n	8003fbe <_puts_r+0x9a>
 8003fb2:	89a3      	ldrh	r3, [r4, #12]
 8003fb4:	059b      	lsls	r3, r3, #22
 8003fb6:	d402      	bmi.n	8003fbe <_puts_r+0x9a>
 8003fb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fba:	f000 fad4 	bl	8004566 <__retarget_lock_release_recursive>
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	bd70      	pop	{r4, r5, r6, pc}
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	da04      	bge.n	8003fd0 <_puts_r+0xac>
 8003fc6:	69a2      	ldr	r2, [r4, #24]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	dc06      	bgt.n	8003fda <_puts_r+0xb6>
 8003fcc:	290a      	cmp	r1, #10
 8003fce:	d004      	beq.n	8003fda <_puts_r+0xb6>
 8003fd0:	6823      	ldr	r3, [r4, #0]
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	6022      	str	r2, [r4, #0]
 8003fd6:	7019      	strb	r1, [r3, #0]
 8003fd8:	e7c5      	b.n	8003f66 <_puts_r+0x42>
 8003fda:	4622      	mov	r2, r4
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f000 f84d 	bl	800407c <__swbuf_r>
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	d1bf      	bne.n	8003f66 <_puts_r+0x42>
 8003fe6:	e7df      	b.n	8003fa8 <_puts_r+0x84>
 8003fe8:	250a      	movs	r5, #10
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	6022      	str	r2, [r4, #0]
 8003ff0:	701d      	strb	r5, [r3, #0]
 8003ff2:	e7db      	b.n	8003fac <_puts_r+0x88>
 8003ff4:	08005c90 	.word	0x08005c90
 8003ff8:	08005cb0 	.word	0x08005cb0
 8003ffc:	08005c70 	.word	0x08005c70

08004000 <puts>:
 8004000:	4b02      	ldr	r3, [pc, #8]	; (800400c <puts+0xc>)
 8004002:	4601      	mov	r1, r0
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	f7ff bf8d 	b.w	8003f24 <_puts_r>
 800400a:	bf00      	nop
 800400c:	2000000c 	.word	0x2000000c

08004010 <siprintf>:
 8004010:	b40e      	push	{r1, r2, r3}
 8004012:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004016:	b500      	push	{lr}
 8004018:	b09c      	sub	sp, #112	; 0x70
 800401a:	ab1d      	add	r3, sp, #116	; 0x74
 800401c:	9002      	str	r0, [sp, #8]
 800401e:	9006      	str	r0, [sp, #24]
 8004020:	9107      	str	r1, [sp, #28]
 8004022:	9104      	str	r1, [sp, #16]
 8004024:	4808      	ldr	r0, [pc, #32]	; (8004048 <siprintf+0x38>)
 8004026:	4909      	ldr	r1, [pc, #36]	; (800404c <siprintf+0x3c>)
 8004028:	f853 2b04 	ldr.w	r2, [r3], #4
 800402c:	9105      	str	r1, [sp, #20]
 800402e:	6800      	ldr	r0, [r0, #0]
 8004030:	a902      	add	r1, sp, #8
 8004032:	9301      	str	r3, [sp, #4]
 8004034:	f000 fc36 	bl	80048a4 <_svfiprintf_r>
 8004038:	2200      	movs	r2, #0
 800403a:	9b02      	ldr	r3, [sp, #8]
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	b01c      	add	sp, #112	; 0x70
 8004040:	f85d eb04 	ldr.w	lr, [sp], #4
 8004044:	b003      	add	sp, #12
 8004046:	4770      	bx	lr
 8004048:	2000000c 	.word	0x2000000c
 800404c:	ffff0208 	.word	0xffff0208

08004050 <strstr>:
 8004050:	780a      	ldrb	r2, [r1, #0]
 8004052:	b570      	push	{r4, r5, r6, lr}
 8004054:	b96a      	cbnz	r2, 8004072 <strstr+0x22>
 8004056:	bd70      	pop	{r4, r5, r6, pc}
 8004058:	429a      	cmp	r2, r3
 800405a:	d109      	bne.n	8004070 <strstr+0x20>
 800405c:	460c      	mov	r4, r1
 800405e:	4605      	mov	r5, r0
 8004060:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0f6      	beq.n	8004056 <strstr+0x6>
 8004068:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800406c:	429e      	cmp	r6, r3
 800406e:	d0f7      	beq.n	8004060 <strstr+0x10>
 8004070:	3001      	adds	r0, #1
 8004072:	7803      	ldrb	r3, [r0, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1ef      	bne.n	8004058 <strstr+0x8>
 8004078:	4618      	mov	r0, r3
 800407a:	e7ec      	b.n	8004056 <strstr+0x6>

0800407c <__swbuf_r>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	460e      	mov	r6, r1
 8004080:	4614      	mov	r4, r2
 8004082:	4605      	mov	r5, r0
 8004084:	b118      	cbz	r0, 800408e <__swbuf_r+0x12>
 8004086:	6983      	ldr	r3, [r0, #24]
 8004088:	b90b      	cbnz	r3, 800408e <__swbuf_r+0x12>
 800408a:	f000 f9cd 	bl	8004428 <__sinit>
 800408e:	4b21      	ldr	r3, [pc, #132]	; (8004114 <__swbuf_r+0x98>)
 8004090:	429c      	cmp	r4, r3
 8004092:	d12b      	bne.n	80040ec <__swbuf_r+0x70>
 8004094:	686c      	ldr	r4, [r5, #4]
 8004096:	69a3      	ldr	r3, [r4, #24]
 8004098:	60a3      	str	r3, [r4, #8]
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	071a      	lsls	r2, r3, #28
 800409e:	d52f      	bpl.n	8004100 <__swbuf_r+0x84>
 80040a0:	6923      	ldr	r3, [r4, #16]
 80040a2:	b36b      	cbz	r3, 8004100 <__swbuf_r+0x84>
 80040a4:	6923      	ldr	r3, [r4, #16]
 80040a6:	6820      	ldr	r0, [r4, #0]
 80040a8:	b2f6      	uxtb	r6, r6
 80040aa:	1ac0      	subs	r0, r0, r3
 80040ac:	6963      	ldr	r3, [r4, #20]
 80040ae:	4637      	mov	r7, r6
 80040b0:	4283      	cmp	r3, r0
 80040b2:	dc04      	bgt.n	80040be <__swbuf_r+0x42>
 80040b4:	4621      	mov	r1, r4
 80040b6:	4628      	mov	r0, r5
 80040b8:	f000 f922 	bl	8004300 <_fflush_r>
 80040bc:	bb30      	cbnz	r0, 800410c <__swbuf_r+0x90>
 80040be:	68a3      	ldr	r3, [r4, #8]
 80040c0:	3001      	adds	r0, #1
 80040c2:	3b01      	subs	r3, #1
 80040c4:	60a3      	str	r3, [r4, #8]
 80040c6:	6823      	ldr	r3, [r4, #0]
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	6022      	str	r2, [r4, #0]
 80040cc:	701e      	strb	r6, [r3, #0]
 80040ce:	6963      	ldr	r3, [r4, #20]
 80040d0:	4283      	cmp	r3, r0
 80040d2:	d004      	beq.n	80040de <__swbuf_r+0x62>
 80040d4:	89a3      	ldrh	r3, [r4, #12]
 80040d6:	07db      	lsls	r3, r3, #31
 80040d8:	d506      	bpl.n	80040e8 <__swbuf_r+0x6c>
 80040da:	2e0a      	cmp	r6, #10
 80040dc:	d104      	bne.n	80040e8 <__swbuf_r+0x6c>
 80040de:	4621      	mov	r1, r4
 80040e0:	4628      	mov	r0, r5
 80040e2:	f000 f90d 	bl	8004300 <_fflush_r>
 80040e6:	b988      	cbnz	r0, 800410c <__swbuf_r+0x90>
 80040e8:	4638      	mov	r0, r7
 80040ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ec:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <__swbuf_r+0x9c>)
 80040ee:	429c      	cmp	r4, r3
 80040f0:	d101      	bne.n	80040f6 <__swbuf_r+0x7a>
 80040f2:	68ac      	ldr	r4, [r5, #8]
 80040f4:	e7cf      	b.n	8004096 <__swbuf_r+0x1a>
 80040f6:	4b09      	ldr	r3, [pc, #36]	; (800411c <__swbuf_r+0xa0>)
 80040f8:	429c      	cmp	r4, r3
 80040fa:	bf08      	it	eq
 80040fc:	68ec      	ldreq	r4, [r5, #12]
 80040fe:	e7ca      	b.n	8004096 <__swbuf_r+0x1a>
 8004100:	4621      	mov	r1, r4
 8004102:	4628      	mov	r0, r5
 8004104:	f000 f80c 	bl	8004120 <__swsetup_r>
 8004108:	2800      	cmp	r0, #0
 800410a:	d0cb      	beq.n	80040a4 <__swbuf_r+0x28>
 800410c:	f04f 37ff 	mov.w	r7, #4294967295
 8004110:	e7ea      	b.n	80040e8 <__swbuf_r+0x6c>
 8004112:	bf00      	nop
 8004114:	08005c90 	.word	0x08005c90
 8004118:	08005cb0 	.word	0x08005cb0
 800411c:	08005c70 	.word	0x08005c70

08004120 <__swsetup_r>:
 8004120:	4b32      	ldr	r3, [pc, #200]	; (80041ec <__swsetup_r+0xcc>)
 8004122:	b570      	push	{r4, r5, r6, lr}
 8004124:	681d      	ldr	r5, [r3, #0]
 8004126:	4606      	mov	r6, r0
 8004128:	460c      	mov	r4, r1
 800412a:	b125      	cbz	r5, 8004136 <__swsetup_r+0x16>
 800412c:	69ab      	ldr	r3, [r5, #24]
 800412e:	b913      	cbnz	r3, 8004136 <__swsetup_r+0x16>
 8004130:	4628      	mov	r0, r5
 8004132:	f000 f979 	bl	8004428 <__sinit>
 8004136:	4b2e      	ldr	r3, [pc, #184]	; (80041f0 <__swsetup_r+0xd0>)
 8004138:	429c      	cmp	r4, r3
 800413a:	d10f      	bne.n	800415c <__swsetup_r+0x3c>
 800413c:	686c      	ldr	r4, [r5, #4]
 800413e:	89a3      	ldrh	r3, [r4, #12]
 8004140:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004144:	0719      	lsls	r1, r3, #28
 8004146:	d42c      	bmi.n	80041a2 <__swsetup_r+0x82>
 8004148:	06dd      	lsls	r5, r3, #27
 800414a:	d411      	bmi.n	8004170 <__swsetup_r+0x50>
 800414c:	2309      	movs	r3, #9
 800414e:	6033      	str	r3, [r6, #0]
 8004150:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004154:	f04f 30ff 	mov.w	r0, #4294967295
 8004158:	81a3      	strh	r3, [r4, #12]
 800415a:	e03e      	b.n	80041da <__swsetup_r+0xba>
 800415c:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <__swsetup_r+0xd4>)
 800415e:	429c      	cmp	r4, r3
 8004160:	d101      	bne.n	8004166 <__swsetup_r+0x46>
 8004162:	68ac      	ldr	r4, [r5, #8]
 8004164:	e7eb      	b.n	800413e <__swsetup_r+0x1e>
 8004166:	4b24      	ldr	r3, [pc, #144]	; (80041f8 <__swsetup_r+0xd8>)
 8004168:	429c      	cmp	r4, r3
 800416a:	bf08      	it	eq
 800416c:	68ec      	ldreq	r4, [r5, #12]
 800416e:	e7e6      	b.n	800413e <__swsetup_r+0x1e>
 8004170:	0758      	lsls	r0, r3, #29
 8004172:	d512      	bpl.n	800419a <__swsetup_r+0x7a>
 8004174:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004176:	b141      	cbz	r1, 800418a <__swsetup_r+0x6a>
 8004178:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800417c:	4299      	cmp	r1, r3
 800417e:	d002      	beq.n	8004186 <__swsetup_r+0x66>
 8004180:	4630      	mov	r0, r6
 8004182:	f000 fa57 	bl	8004634 <_free_r>
 8004186:	2300      	movs	r3, #0
 8004188:	6363      	str	r3, [r4, #52]	; 0x34
 800418a:	89a3      	ldrh	r3, [r4, #12]
 800418c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004190:	81a3      	strh	r3, [r4, #12]
 8004192:	2300      	movs	r3, #0
 8004194:	6063      	str	r3, [r4, #4]
 8004196:	6923      	ldr	r3, [r4, #16]
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	89a3      	ldrh	r3, [r4, #12]
 800419c:	f043 0308 	orr.w	r3, r3, #8
 80041a0:	81a3      	strh	r3, [r4, #12]
 80041a2:	6923      	ldr	r3, [r4, #16]
 80041a4:	b94b      	cbnz	r3, 80041ba <__swsetup_r+0x9a>
 80041a6:	89a3      	ldrh	r3, [r4, #12]
 80041a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041b0:	d003      	beq.n	80041ba <__swsetup_r+0x9a>
 80041b2:	4621      	mov	r1, r4
 80041b4:	4630      	mov	r0, r6
 80041b6:	f000 f9fd 	bl	80045b4 <__smakebuf_r>
 80041ba:	89a0      	ldrh	r0, [r4, #12]
 80041bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041c0:	f010 0301 	ands.w	r3, r0, #1
 80041c4:	d00a      	beq.n	80041dc <__swsetup_r+0xbc>
 80041c6:	2300      	movs	r3, #0
 80041c8:	60a3      	str	r3, [r4, #8]
 80041ca:	6963      	ldr	r3, [r4, #20]
 80041cc:	425b      	negs	r3, r3
 80041ce:	61a3      	str	r3, [r4, #24]
 80041d0:	6923      	ldr	r3, [r4, #16]
 80041d2:	b943      	cbnz	r3, 80041e6 <__swsetup_r+0xc6>
 80041d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80041d8:	d1ba      	bne.n	8004150 <__swsetup_r+0x30>
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	0781      	lsls	r1, r0, #30
 80041de:	bf58      	it	pl
 80041e0:	6963      	ldrpl	r3, [r4, #20]
 80041e2:	60a3      	str	r3, [r4, #8]
 80041e4:	e7f4      	b.n	80041d0 <__swsetup_r+0xb0>
 80041e6:	2000      	movs	r0, #0
 80041e8:	e7f7      	b.n	80041da <__swsetup_r+0xba>
 80041ea:	bf00      	nop
 80041ec:	2000000c 	.word	0x2000000c
 80041f0:	08005c90 	.word	0x08005c90
 80041f4:	08005cb0 	.word	0x08005cb0
 80041f8:	08005c70 	.word	0x08005c70

080041fc <__sflush_r>:
 80041fc:	898a      	ldrh	r2, [r1, #12]
 80041fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004200:	4605      	mov	r5, r0
 8004202:	0710      	lsls	r0, r2, #28
 8004204:	460c      	mov	r4, r1
 8004206:	d457      	bmi.n	80042b8 <__sflush_r+0xbc>
 8004208:	684b      	ldr	r3, [r1, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	dc04      	bgt.n	8004218 <__sflush_r+0x1c>
 800420e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	dc01      	bgt.n	8004218 <__sflush_r+0x1c>
 8004214:	2000      	movs	r0, #0
 8004216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800421a:	2e00      	cmp	r6, #0
 800421c:	d0fa      	beq.n	8004214 <__sflush_r+0x18>
 800421e:	2300      	movs	r3, #0
 8004220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004224:	682f      	ldr	r7, [r5, #0]
 8004226:	602b      	str	r3, [r5, #0]
 8004228:	d032      	beq.n	8004290 <__sflush_r+0x94>
 800422a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800422c:	89a3      	ldrh	r3, [r4, #12]
 800422e:	075a      	lsls	r2, r3, #29
 8004230:	d505      	bpl.n	800423e <__sflush_r+0x42>
 8004232:	6863      	ldr	r3, [r4, #4]
 8004234:	1ac0      	subs	r0, r0, r3
 8004236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004238:	b10b      	cbz	r3, 800423e <__sflush_r+0x42>
 800423a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800423c:	1ac0      	subs	r0, r0, r3
 800423e:	2300      	movs	r3, #0
 8004240:	4602      	mov	r2, r0
 8004242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004244:	4628      	mov	r0, r5
 8004246:	6a21      	ldr	r1, [r4, #32]
 8004248:	47b0      	blx	r6
 800424a:	1c43      	adds	r3, r0, #1
 800424c:	89a3      	ldrh	r3, [r4, #12]
 800424e:	d106      	bne.n	800425e <__sflush_r+0x62>
 8004250:	6829      	ldr	r1, [r5, #0]
 8004252:	291d      	cmp	r1, #29
 8004254:	d82c      	bhi.n	80042b0 <__sflush_r+0xb4>
 8004256:	4a29      	ldr	r2, [pc, #164]	; (80042fc <__sflush_r+0x100>)
 8004258:	40ca      	lsrs	r2, r1
 800425a:	07d6      	lsls	r6, r2, #31
 800425c:	d528      	bpl.n	80042b0 <__sflush_r+0xb4>
 800425e:	2200      	movs	r2, #0
 8004260:	6062      	str	r2, [r4, #4]
 8004262:	6922      	ldr	r2, [r4, #16]
 8004264:	04d9      	lsls	r1, r3, #19
 8004266:	6022      	str	r2, [r4, #0]
 8004268:	d504      	bpl.n	8004274 <__sflush_r+0x78>
 800426a:	1c42      	adds	r2, r0, #1
 800426c:	d101      	bne.n	8004272 <__sflush_r+0x76>
 800426e:	682b      	ldr	r3, [r5, #0]
 8004270:	b903      	cbnz	r3, 8004274 <__sflush_r+0x78>
 8004272:	6560      	str	r0, [r4, #84]	; 0x54
 8004274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004276:	602f      	str	r7, [r5, #0]
 8004278:	2900      	cmp	r1, #0
 800427a:	d0cb      	beq.n	8004214 <__sflush_r+0x18>
 800427c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004280:	4299      	cmp	r1, r3
 8004282:	d002      	beq.n	800428a <__sflush_r+0x8e>
 8004284:	4628      	mov	r0, r5
 8004286:	f000 f9d5 	bl	8004634 <_free_r>
 800428a:	2000      	movs	r0, #0
 800428c:	6360      	str	r0, [r4, #52]	; 0x34
 800428e:	e7c2      	b.n	8004216 <__sflush_r+0x1a>
 8004290:	6a21      	ldr	r1, [r4, #32]
 8004292:	2301      	movs	r3, #1
 8004294:	4628      	mov	r0, r5
 8004296:	47b0      	blx	r6
 8004298:	1c41      	adds	r1, r0, #1
 800429a:	d1c7      	bne.n	800422c <__sflush_r+0x30>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0c4      	beq.n	800422c <__sflush_r+0x30>
 80042a2:	2b1d      	cmp	r3, #29
 80042a4:	d001      	beq.n	80042aa <__sflush_r+0xae>
 80042a6:	2b16      	cmp	r3, #22
 80042a8:	d101      	bne.n	80042ae <__sflush_r+0xb2>
 80042aa:	602f      	str	r7, [r5, #0]
 80042ac:	e7b2      	b.n	8004214 <__sflush_r+0x18>
 80042ae:	89a3      	ldrh	r3, [r4, #12]
 80042b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042b4:	81a3      	strh	r3, [r4, #12]
 80042b6:	e7ae      	b.n	8004216 <__sflush_r+0x1a>
 80042b8:	690f      	ldr	r7, [r1, #16]
 80042ba:	2f00      	cmp	r7, #0
 80042bc:	d0aa      	beq.n	8004214 <__sflush_r+0x18>
 80042be:	0793      	lsls	r3, r2, #30
 80042c0:	bf18      	it	ne
 80042c2:	2300      	movne	r3, #0
 80042c4:	680e      	ldr	r6, [r1, #0]
 80042c6:	bf08      	it	eq
 80042c8:	694b      	ldreq	r3, [r1, #20]
 80042ca:	1bf6      	subs	r6, r6, r7
 80042cc:	600f      	str	r7, [r1, #0]
 80042ce:	608b      	str	r3, [r1, #8]
 80042d0:	2e00      	cmp	r6, #0
 80042d2:	dd9f      	ble.n	8004214 <__sflush_r+0x18>
 80042d4:	4633      	mov	r3, r6
 80042d6:	463a      	mov	r2, r7
 80042d8:	4628      	mov	r0, r5
 80042da:	6a21      	ldr	r1, [r4, #32]
 80042dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80042e0:	47e0      	blx	ip
 80042e2:	2800      	cmp	r0, #0
 80042e4:	dc06      	bgt.n	80042f4 <__sflush_r+0xf8>
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042f0:	81a3      	strh	r3, [r4, #12]
 80042f2:	e790      	b.n	8004216 <__sflush_r+0x1a>
 80042f4:	4407      	add	r7, r0
 80042f6:	1a36      	subs	r6, r6, r0
 80042f8:	e7ea      	b.n	80042d0 <__sflush_r+0xd4>
 80042fa:	bf00      	nop
 80042fc:	20400001 	.word	0x20400001

08004300 <_fflush_r>:
 8004300:	b538      	push	{r3, r4, r5, lr}
 8004302:	690b      	ldr	r3, [r1, #16]
 8004304:	4605      	mov	r5, r0
 8004306:	460c      	mov	r4, r1
 8004308:	b913      	cbnz	r3, 8004310 <_fflush_r+0x10>
 800430a:	2500      	movs	r5, #0
 800430c:	4628      	mov	r0, r5
 800430e:	bd38      	pop	{r3, r4, r5, pc}
 8004310:	b118      	cbz	r0, 800431a <_fflush_r+0x1a>
 8004312:	6983      	ldr	r3, [r0, #24]
 8004314:	b90b      	cbnz	r3, 800431a <_fflush_r+0x1a>
 8004316:	f000 f887 	bl	8004428 <__sinit>
 800431a:	4b14      	ldr	r3, [pc, #80]	; (800436c <_fflush_r+0x6c>)
 800431c:	429c      	cmp	r4, r3
 800431e:	d11b      	bne.n	8004358 <_fflush_r+0x58>
 8004320:	686c      	ldr	r4, [r5, #4]
 8004322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0ef      	beq.n	800430a <_fflush_r+0xa>
 800432a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800432c:	07d0      	lsls	r0, r2, #31
 800432e:	d404      	bmi.n	800433a <_fflush_r+0x3a>
 8004330:	0599      	lsls	r1, r3, #22
 8004332:	d402      	bmi.n	800433a <_fflush_r+0x3a>
 8004334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004336:	f000 f915 	bl	8004564 <__retarget_lock_acquire_recursive>
 800433a:	4628      	mov	r0, r5
 800433c:	4621      	mov	r1, r4
 800433e:	f7ff ff5d 	bl	80041fc <__sflush_r>
 8004342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004344:	4605      	mov	r5, r0
 8004346:	07da      	lsls	r2, r3, #31
 8004348:	d4e0      	bmi.n	800430c <_fflush_r+0xc>
 800434a:	89a3      	ldrh	r3, [r4, #12]
 800434c:	059b      	lsls	r3, r3, #22
 800434e:	d4dd      	bmi.n	800430c <_fflush_r+0xc>
 8004350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004352:	f000 f908 	bl	8004566 <__retarget_lock_release_recursive>
 8004356:	e7d9      	b.n	800430c <_fflush_r+0xc>
 8004358:	4b05      	ldr	r3, [pc, #20]	; (8004370 <_fflush_r+0x70>)
 800435a:	429c      	cmp	r4, r3
 800435c:	d101      	bne.n	8004362 <_fflush_r+0x62>
 800435e:	68ac      	ldr	r4, [r5, #8]
 8004360:	e7df      	b.n	8004322 <_fflush_r+0x22>
 8004362:	4b04      	ldr	r3, [pc, #16]	; (8004374 <_fflush_r+0x74>)
 8004364:	429c      	cmp	r4, r3
 8004366:	bf08      	it	eq
 8004368:	68ec      	ldreq	r4, [r5, #12]
 800436a:	e7da      	b.n	8004322 <_fflush_r+0x22>
 800436c:	08005c90 	.word	0x08005c90
 8004370:	08005cb0 	.word	0x08005cb0
 8004374:	08005c70 	.word	0x08005c70

08004378 <std>:
 8004378:	2300      	movs	r3, #0
 800437a:	b510      	push	{r4, lr}
 800437c:	4604      	mov	r4, r0
 800437e:	e9c0 3300 	strd	r3, r3, [r0]
 8004382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004386:	6083      	str	r3, [r0, #8]
 8004388:	8181      	strh	r1, [r0, #12]
 800438a:	6643      	str	r3, [r0, #100]	; 0x64
 800438c:	81c2      	strh	r2, [r0, #14]
 800438e:	6183      	str	r3, [r0, #24]
 8004390:	4619      	mov	r1, r3
 8004392:	2208      	movs	r2, #8
 8004394:	305c      	adds	r0, #92	; 0x5c
 8004396:	f7ff fda5 	bl	8003ee4 <memset>
 800439a:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <std+0x38>)
 800439c:	6224      	str	r4, [r4, #32]
 800439e:	6263      	str	r3, [r4, #36]	; 0x24
 80043a0:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <std+0x3c>)
 80043a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80043a4:	4b04      	ldr	r3, [pc, #16]	; (80043b8 <std+0x40>)
 80043a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043a8:	4b04      	ldr	r3, [pc, #16]	; (80043bc <std+0x44>)
 80043aa:	6323      	str	r3, [r4, #48]	; 0x30
 80043ac:	bd10      	pop	{r4, pc}
 80043ae:	bf00      	nop
 80043b0:	080050a1 	.word	0x080050a1
 80043b4:	080050c3 	.word	0x080050c3
 80043b8:	080050fb 	.word	0x080050fb
 80043bc:	0800511f 	.word	0x0800511f

080043c0 <_cleanup_r>:
 80043c0:	4901      	ldr	r1, [pc, #4]	; (80043c8 <_cleanup_r+0x8>)
 80043c2:	f000 b8af 	b.w	8004524 <_fwalk_reent>
 80043c6:	bf00      	nop
 80043c8:	08004301 	.word	0x08004301

080043cc <__sfmoreglue>:
 80043cc:	2268      	movs	r2, #104	; 0x68
 80043ce:	b570      	push	{r4, r5, r6, lr}
 80043d0:	1e4d      	subs	r5, r1, #1
 80043d2:	4355      	muls	r5, r2
 80043d4:	460e      	mov	r6, r1
 80043d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043da:	f000 f993 	bl	8004704 <_malloc_r>
 80043de:	4604      	mov	r4, r0
 80043e0:	b140      	cbz	r0, 80043f4 <__sfmoreglue+0x28>
 80043e2:	2100      	movs	r1, #0
 80043e4:	e9c0 1600 	strd	r1, r6, [r0]
 80043e8:	300c      	adds	r0, #12
 80043ea:	60a0      	str	r0, [r4, #8]
 80043ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80043f0:	f7ff fd78 	bl	8003ee4 <memset>
 80043f4:	4620      	mov	r0, r4
 80043f6:	bd70      	pop	{r4, r5, r6, pc}

080043f8 <__sfp_lock_acquire>:
 80043f8:	4801      	ldr	r0, [pc, #4]	; (8004400 <__sfp_lock_acquire+0x8>)
 80043fa:	f000 b8b3 	b.w	8004564 <__retarget_lock_acquire_recursive>
 80043fe:	bf00      	nop
 8004400:	200005d1 	.word	0x200005d1

08004404 <__sfp_lock_release>:
 8004404:	4801      	ldr	r0, [pc, #4]	; (800440c <__sfp_lock_release+0x8>)
 8004406:	f000 b8ae 	b.w	8004566 <__retarget_lock_release_recursive>
 800440a:	bf00      	nop
 800440c:	200005d1 	.word	0x200005d1

08004410 <__sinit_lock_acquire>:
 8004410:	4801      	ldr	r0, [pc, #4]	; (8004418 <__sinit_lock_acquire+0x8>)
 8004412:	f000 b8a7 	b.w	8004564 <__retarget_lock_acquire_recursive>
 8004416:	bf00      	nop
 8004418:	200005d2 	.word	0x200005d2

0800441c <__sinit_lock_release>:
 800441c:	4801      	ldr	r0, [pc, #4]	; (8004424 <__sinit_lock_release+0x8>)
 800441e:	f000 b8a2 	b.w	8004566 <__retarget_lock_release_recursive>
 8004422:	bf00      	nop
 8004424:	200005d2 	.word	0x200005d2

08004428 <__sinit>:
 8004428:	b510      	push	{r4, lr}
 800442a:	4604      	mov	r4, r0
 800442c:	f7ff fff0 	bl	8004410 <__sinit_lock_acquire>
 8004430:	69a3      	ldr	r3, [r4, #24]
 8004432:	b11b      	cbz	r3, 800443c <__sinit+0x14>
 8004434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004438:	f7ff bff0 	b.w	800441c <__sinit_lock_release>
 800443c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004440:	6523      	str	r3, [r4, #80]	; 0x50
 8004442:	4b13      	ldr	r3, [pc, #76]	; (8004490 <__sinit+0x68>)
 8004444:	4a13      	ldr	r2, [pc, #76]	; (8004494 <__sinit+0x6c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	62a2      	str	r2, [r4, #40]	; 0x28
 800444a:	42a3      	cmp	r3, r4
 800444c:	bf08      	it	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	4620      	mov	r0, r4
 8004452:	bf08      	it	eq
 8004454:	61a3      	streq	r3, [r4, #24]
 8004456:	f000 f81f 	bl	8004498 <__sfp>
 800445a:	6060      	str	r0, [r4, #4]
 800445c:	4620      	mov	r0, r4
 800445e:	f000 f81b 	bl	8004498 <__sfp>
 8004462:	60a0      	str	r0, [r4, #8]
 8004464:	4620      	mov	r0, r4
 8004466:	f000 f817 	bl	8004498 <__sfp>
 800446a:	2200      	movs	r2, #0
 800446c:	2104      	movs	r1, #4
 800446e:	60e0      	str	r0, [r4, #12]
 8004470:	6860      	ldr	r0, [r4, #4]
 8004472:	f7ff ff81 	bl	8004378 <std>
 8004476:	2201      	movs	r2, #1
 8004478:	2109      	movs	r1, #9
 800447a:	68a0      	ldr	r0, [r4, #8]
 800447c:	f7ff ff7c 	bl	8004378 <std>
 8004480:	2202      	movs	r2, #2
 8004482:	2112      	movs	r1, #18
 8004484:	68e0      	ldr	r0, [r4, #12]
 8004486:	f7ff ff77 	bl	8004378 <std>
 800448a:	2301      	movs	r3, #1
 800448c:	61a3      	str	r3, [r4, #24]
 800448e:	e7d1      	b.n	8004434 <__sinit+0xc>
 8004490:	08005c6c 	.word	0x08005c6c
 8004494:	080043c1 	.word	0x080043c1

08004498 <__sfp>:
 8004498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800449a:	4607      	mov	r7, r0
 800449c:	f7ff ffac 	bl	80043f8 <__sfp_lock_acquire>
 80044a0:	4b1e      	ldr	r3, [pc, #120]	; (800451c <__sfp+0x84>)
 80044a2:	681e      	ldr	r6, [r3, #0]
 80044a4:	69b3      	ldr	r3, [r6, #24]
 80044a6:	b913      	cbnz	r3, 80044ae <__sfp+0x16>
 80044a8:	4630      	mov	r0, r6
 80044aa:	f7ff ffbd 	bl	8004428 <__sinit>
 80044ae:	3648      	adds	r6, #72	; 0x48
 80044b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	d503      	bpl.n	80044c0 <__sfp+0x28>
 80044b8:	6833      	ldr	r3, [r6, #0]
 80044ba:	b30b      	cbz	r3, 8004500 <__sfp+0x68>
 80044bc:	6836      	ldr	r6, [r6, #0]
 80044be:	e7f7      	b.n	80044b0 <__sfp+0x18>
 80044c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044c4:	b9d5      	cbnz	r5, 80044fc <__sfp+0x64>
 80044c6:	4b16      	ldr	r3, [pc, #88]	; (8004520 <__sfp+0x88>)
 80044c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044cc:	60e3      	str	r3, [r4, #12]
 80044ce:	6665      	str	r5, [r4, #100]	; 0x64
 80044d0:	f000 f847 	bl	8004562 <__retarget_lock_init_recursive>
 80044d4:	f7ff ff96 	bl	8004404 <__sfp_lock_release>
 80044d8:	2208      	movs	r2, #8
 80044da:	4629      	mov	r1, r5
 80044dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80044e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80044e4:	6025      	str	r5, [r4, #0]
 80044e6:	61a5      	str	r5, [r4, #24]
 80044e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80044ec:	f7ff fcfa 	bl	8003ee4 <memset>
 80044f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80044f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80044f8:	4620      	mov	r0, r4
 80044fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044fc:	3468      	adds	r4, #104	; 0x68
 80044fe:	e7d9      	b.n	80044b4 <__sfp+0x1c>
 8004500:	2104      	movs	r1, #4
 8004502:	4638      	mov	r0, r7
 8004504:	f7ff ff62 	bl	80043cc <__sfmoreglue>
 8004508:	4604      	mov	r4, r0
 800450a:	6030      	str	r0, [r6, #0]
 800450c:	2800      	cmp	r0, #0
 800450e:	d1d5      	bne.n	80044bc <__sfp+0x24>
 8004510:	f7ff ff78 	bl	8004404 <__sfp_lock_release>
 8004514:	230c      	movs	r3, #12
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	e7ee      	b.n	80044f8 <__sfp+0x60>
 800451a:	bf00      	nop
 800451c:	08005c6c 	.word	0x08005c6c
 8004520:	ffff0001 	.word	0xffff0001

08004524 <_fwalk_reent>:
 8004524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004528:	4606      	mov	r6, r0
 800452a:	4688      	mov	r8, r1
 800452c:	2700      	movs	r7, #0
 800452e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004532:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004536:	f1b9 0901 	subs.w	r9, r9, #1
 800453a:	d505      	bpl.n	8004548 <_fwalk_reent+0x24>
 800453c:	6824      	ldr	r4, [r4, #0]
 800453e:	2c00      	cmp	r4, #0
 8004540:	d1f7      	bne.n	8004532 <_fwalk_reent+0xe>
 8004542:	4638      	mov	r0, r7
 8004544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004548:	89ab      	ldrh	r3, [r5, #12]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d907      	bls.n	800455e <_fwalk_reent+0x3a>
 800454e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004552:	3301      	adds	r3, #1
 8004554:	d003      	beq.n	800455e <_fwalk_reent+0x3a>
 8004556:	4629      	mov	r1, r5
 8004558:	4630      	mov	r0, r6
 800455a:	47c0      	blx	r8
 800455c:	4307      	orrs	r7, r0
 800455e:	3568      	adds	r5, #104	; 0x68
 8004560:	e7e9      	b.n	8004536 <_fwalk_reent+0x12>

08004562 <__retarget_lock_init_recursive>:
 8004562:	4770      	bx	lr

08004564 <__retarget_lock_acquire_recursive>:
 8004564:	4770      	bx	lr

08004566 <__retarget_lock_release_recursive>:
 8004566:	4770      	bx	lr

08004568 <__swhatbuf_r>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	460e      	mov	r6, r1
 800456c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004570:	4614      	mov	r4, r2
 8004572:	2900      	cmp	r1, #0
 8004574:	461d      	mov	r5, r3
 8004576:	b096      	sub	sp, #88	; 0x58
 8004578:	da08      	bge.n	800458c <__swhatbuf_r+0x24>
 800457a:	2200      	movs	r2, #0
 800457c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004580:	602a      	str	r2, [r5, #0]
 8004582:	061a      	lsls	r2, r3, #24
 8004584:	d410      	bmi.n	80045a8 <__swhatbuf_r+0x40>
 8004586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800458a:	e00e      	b.n	80045aa <__swhatbuf_r+0x42>
 800458c:	466a      	mov	r2, sp
 800458e:	f000 fded 	bl	800516c <_fstat_r>
 8004592:	2800      	cmp	r0, #0
 8004594:	dbf1      	blt.n	800457a <__swhatbuf_r+0x12>
 8004596:	9a01      	ldr	r2, [sp, #4]
 8004598:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800459c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045a0:	425a      	negs	r2, r3
 80045a2:	415a      	adcs	r2, r3
 80045a4:	602a      	str	r2, [r5, #0]
 80045a6:	e7ee      	b.n	8004586 <__swhatbuf_r+0x1e>
 80045a8:	2340      	movs	r3, #64	; 0x40
 80045aa:	2000      	movs	r0, #0
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	b016      	add	sp, #88	; 0x58
 80045b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080045b4 <__smakebuf_r>:
 80045b4:	898b      	ldrh	r3, [r1, #12]
 80045b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045b8:	079d      	lsls	r5, r3, #30
 80045ba:	4606      	mov	r6, r0
 80045bc:	460c      	mov	r4, r1
 80045be:	d507      	bpl.n	80045d0 <__smakebuf_r+0x1c>
 80045c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045c4:	6023      	str	r3, [r4, #0]
 80045c6:	6123      	str	r3, [r4, #16]
 80045c8:	2301      	movs	r3, #1
 80045ca:	6163      	str	r3, [r4, #20]
 80045cc:	b002      	add	sp, #8
 80045ce:	bd70      	pop	{r4, r5, r6, pc}
 80045d0:	466a      	mov	r2, sp
 80045d2:	ab01      	add	r3, sp, #4
 80045d4:	f7ff ffc8 	bl	8004568 <__swhatbuf_r>
 80045d8:	9900      	ldr	r1, [sp, #0]
 80045da:	4605      	mov	r5, r0
 80045dc:	4630      	mov	r0, r6
 80045de:	f000 f891 	bl	8004704 <_malloc_r>
 80045e2:	b948      	cbnz	r0, 80045f8 <__smakebuf_r+0x44>
 80045e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045e8:	059a      	lsls	r2, r3, #22
 80045ea:	d4ef      	bmi.n	80045cc <__smakebuf_r+0x18>
 80045ec:	f023 0303 	bic.w	r3, r3, #3
 80045f0:	f043 0302 	orr.w	r3, r3, #2
 80045f4:	81a3      	strh	r3, [r4, #12]
 80045f6:	e7e3      	b.n	80045c0 <__smakebuf_r+0xc>
 80045f8:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <__smakebuf_r+0x7c>)
 80045fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80045fc:	89a3      	ldrh	r3, [r4, #12]
 80045fe:	6020      	str	r0, [r4, #0]
 8004600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004604:	81a3      	strh	r3, [r4, #12]
 8004606:	9b00      	ldr	r3, [sp, #0]
 8004608:	6120      	str	r0, [r4, #16]
 800460a:	6163      	str	r3, [r4, #20]
 800460c:	9b01      	ldr	r3, [sp, #4]
 800460e:	b15b      	cbz	r3, 8004628 <__smakebuf_r+0x74>
 8004610:	4630      	mov	r0, r6
 8004612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004616:	f000 fdbb 	bl	8005190 <_isatty_r>
 800461a:	b128      	cbz	r0, 8004628 <__smakebuf_r+0x74>
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	f043 0301 	orr.w	r3, r3, #1
 8004626:	81a3      	strh	r3, [r4, #12]
 8004628:	89a0      	ldrh	r0, [r4, #12]
 800462a:	4305      	orrs	r5, r0
 800462c:	81a5      	strh	r5, [r4, #12]
 800462e:	e7cd      	b.n	80045cc <__smakebuf_r+0x18>
 8004630:	080043c1 	.word	0x080043c1

08004634 <_free_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	4605      	mov	r5, r0
 8004638:	2900      	cmp	r1, #0
 800463a:	d040      	beq.n	80046be <_free_r+0x8a>
 800463c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004640:	1f0c      	subs	r4, r1, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	bfb8      	it	lt
 8004646:	18e4      	addlt	r4, r4, r3
 8004648:	f000 fdec 	bl	8005224 <__malloc_lock>
 800464c:	4a1c      	ldr	r2, [pc, #112]	; (80046c0 <_free_r+0x8c>)
 800464e:	6813      	ldr	r3, [r2, #0]
 8004650:	b933      	cbnz	r3, 8004660 <_free_r+0x2c>
 8004652:	6063      	str	r3, [r4, #4]
 8004654:	6014      	str	r4, [r2, #0]
 8004656:	4628      	mov	r0, r5
 8004658:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800465c:	f000 bde8 	b.w	8005230 <__malloc_unlock>
 8004660:	42a3      	cmp	r3, r4
 8004662:	d908      	bls.n	8004676 <_free_r+0x42>
 8004664:	6820      	ldr	r0, [r4, #0]
 8004666:	1821      	adds	r1, r4, r0
 8004668:	428b      	cmp	r3, r1
 800466a:	bf01      	itttt	eq
 800466c:	6819      	ldreq	r1, [r3, #0]
 800466e:	685b      	ldreq	r3, [r3, #4]
 8004670:	1809      	addeq	r1, r1, r0
 8004672:	6021      	streq	r1, [r4, #0]
 8004674:	e7ed      	b.n	8004652 <_free_r+0x1e>
 8004676:	461a      	mov	r2, r3
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	b10b      	cbz	r3, 8004680 <_free_r+0x4c>
 800467c:	42a3      	cmp	r3, r4
 800467e:	d9fa      	bls.n	8004676 <_free_r+0x42>
 8004680:	6811      	ldr	r1, [r2, #0]
 8004682:	1850      	adds	r0, r2, r1
 8004684:	42a0      	cmp	r0, r4
 8004686:	d10b      	bne.n	80046a0 <_free_r+0x6c>
 8004688:	6820      	ldr	r0, [r4, #0]
 800468a:	4401      	add	r1, r0
 800468c:	1850      	adds	r0, r2, r1
 800468e:	4283      	cmp	r3, r0
 8004690:	6011      	str	r1, [r2, #0]
 8004692:	d1e0      	bne.n	8004656 <_free_r+0x22>
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4401      	add	r1, r0
 800469a:	6011      	str	r1, [r2, #0]
 800469c:	6053      	str	r3, [r2, #4]
 800469e:	e7da      	b.n	8004656 <_free_r+0x22>
 80046a0:	d902      	bls.n	80046a8 <_free_r+0x74>
 80046a2:	230c      	movs	r3, #12
 80046a4:	602b      	str	r3, [r5, #0]
 80046a6:	e7d6      	b.n	8004656 <_free_r+0x22>
 80046a8:	6820      	ldr	r0, [r4, #0]
 80046aa:	1821      	adds	r1, r4, r0
 80046ac:	428b      	cmp	r3, r1
 80046ae:	bf01      	itttt	eq
 80046b0:	6819      	ldreq	r1, [r3, #0]
 80046b2:	685b      	ldreq	r3, [r3, #4]
 80046b4:	1809      	addeq	r1, r1, r0
 80046b6:	6021      	streq	r1, [r4, #0]
 80046b8:	6063      	str	r3, [r4, #4]
 80046ba:	6054      	str	r4, [r2, #4]
 80046bc:	e7cb      	b.n	8004656 <_free_r+0x22>
 80046be:	bd38      	pop	{r3, r4, r5, pc}
 80046c0:	200005d4 	.word	0x200005d4

080046c4 <sbrk_aligned>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	4e0e      	ldr	r6, [pc, #56]	; (8004700 <sbrk_aligned+0x3c>)
 80046c8:	460c      	mov	r4, r1
 80046ca:	6831      	ldr	r1, [r6, #0]
 80046cc:	4605      	mov	r5, r0
 80046ce:	b911      	cbnz	r1, 80046d6 <sbrk_aligned+0x12>
 80046d0:	f000 fcd6 	bl	8005080 <_sbrk_r>
 80046d4:	6030      	str	r0, [r6, #0]
 80046d6:	4621      	mov	r1, r4
 80046d8:	4628      	mov	r0, r5
 80046da:	f000 fcd1 	bl	8005080 <_sbrk_r>
 80046de:	1c43      	adds	r3, r0, #1
 80046e0:	d00a      	beq.n	80046f8 <sbrk_aligned+0x34>
 80046e2:	1cc4      	adds	r4, r0, #3
 80046e4:	f024 0403 	bic.w	r4, r4, #3
 80046e8:	42a0      	cmp	r0, r4
 80046ea:	d007      	beq.n	80046fc <sbrk_aligned+0x38>
 80046ec:	1a21      	subs	r1, r4, r0
 80046ee:	4628      	mov	r0, r5
 80046f0:	f000 fcc6 	bl	8005080 <_sbrk_r>
 80046f4:	3001      	adds	r0, #1
 80046f6:	d101      	bne.n	80046fc <sbrk_aligned+0x38>
 80046f8:	f04f 34ff 	mov.w	r4, #4294967295
 80046fc:	4620      	mov	r0, r4
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
 8004700:	200005d8 	.word	0x200005d8

08004704 <_malloc_r>:
 8004704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004708:	1ccd      	adds	r5, r1, #3
 800470a:	f025 0503 	bic.w	r5, r5, #3
 800470e:	3508      	adds	r5, #8
 8004710:	2d0c      	cmp	r5, #12
 8004712:	bf38      	it	cc
 8004714:	250c      	movcc	r5, #12
 8004716:	2d00      	cmp	r5, #0
 8004718:	4607      	mov	r7, r0
 800471a:	db01      	blt.n	8004720 <_malloc_r+0x1c>
 800471c:	42a9      	cmp	r1, r5
 800471e:	d905      	bls.n	800472c <_malloc_r+0x28>
 8004720:	230c      	movs	r3, #12
 8004722:	2600      	movs	r6, #0
 8004724:	603b      	str	r3, [r7, #0]
 8004726:	4630      	mov	r0, r6
 8004728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800472c:	4e2e      	ldr	r6, [pc, #184]	; (80047e8 <_malloc_r+0xe4>)
 800472e:	f000 fd79 	bl	8005224 <__malloc_lock>
 8004732:	6833      	ldr	r3, [r6, #0]
 8004734:	461c      	mov	r4, r3
 8004736:	bb34      	cbnz	r4, 8004786 <_malloc_r+0x82>
 8004738:	4629      	mov	r1, r5
 800473a:	4638      	mov	r0, r7
 800473c:	f7ff ffc2 	bl	80046c4 <sbrk_aligned>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	4604      	mov	r4, r0
 8004744:	d14d      	bne.n	80047e2 <_malloc_r+0xde>
 8004746:	6834      	ldr	r4, [r6, #0]
 8004748:	4626      	mov	r6, r4
 800474a:	2e00      	cmp	r6, #0
 800474c:	d140      	bne.n	80047d0 <_malloc_r+0xcc>
 800474e:	6823      	ldr	r3, [r4, #0]
 8004750:	4631      	mov	r1, r6
 8004752:	4638      	mov	r0, r7
 8004754:	eb04 0803 	add.w	r8, r4, r3
 8004758:	f000 fc92 	bl	8005080 <_sbrk_r>
 800475c:	4580      	cmp	r8, r0
 800475e:	d13a      	bne.n	80047d6 <_malloc_r+0xd2>
 8004760:	6821      	ldr	r1, [r4, #0]
 8004762:	3503      	adds	r5, #3
 8004764:	1a6d      	subs	r5, r5, r1
 8004766:	f025 0503 	bic.w	r5, r5, #3
 800476a:	3508      	adds	r5, #8
 800476c:	2d0c      	cmp	r5, #12
 800476e:	bf38      	it	cc
 8004770:	250c      	movcc	r5, #12
 8004772:	4638      	mov	r0, r7
 8004774:	4629      	mov	r1, r5
 8004776:	f7ff ffa5 	bl	80046c4 <sbrk_aligned>
 800477a:	3001      	adds	r0, #1
 800477c:	d02b      	beq.n	80047d6 <_malloc_r+0xd2>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	442b      	add	r3, r5
 8004782:	6023      	str	r3, [r4, #0]
 8004784:	e00e      	b.n	80047a4 <_malloc_r+0xa0>
 8004786:	6822      	ldr	r2, [r4, #0]
 8004788:	1b52      	subs	r2, r2, r5
 800478a:	d41e      	bmi.n	80047ca <_malloc_r+0xc6>
 800478c:	2a0b      	cmp	r2, #11
 800478e:	d916      	bls.n	80047be <_malloc_r+0xba>
 8004790:	1961      	adds	r1, r4, r5
 8004792:	42a3      	cmp	r3, r4
 8004794:	6025      	str	r5, [r4, #0]
 8004796:	bf18      	it	ne
 8004798:	6059      	strne	r1, [r3, #4]
 800479a:	6863      	ldr	r3, [r4, #4]
 800479c:	bf08      	it	eq
 800479e:	6031      	streq	r1, [r6, #0]
 80047a0:	5162      	str	r2, [r4, r5]
 80047a2:	604b      	str	r3, [r1, #4]
 80047a4:	4638      	mov	r0, r7
 80047a6:	f104 060b 	add.w	r6, r4, #11
 80047aa:	f000 fd41 	bl	8005230 <__malloc_unlock>
 80047ae:	f026 0607 	bic.w	r6, r6, #7
 80047b2:	1d23      	adds	r3, r4, #4
 80047b4:	1af2      	subs	r2, r6, r3
 80047b6:	d0b6      	beq.n	8004726 <_malloc_r+0x22>
 80047b8:	1b9b      	subs	r3, r3, r6
 80047ba:	50a3      	str	r3, [r4, r2]
 80047bc:	e7b3      	b.n	8004726 <_malloc_r+0x22>
 80047be:	6862      	ldr	r2, [r4, #4]
 80047c0:	42a3      	cmp	r3, r4
 80047c2:	bf0c      	ite	eq
 80047c4:	6032      	streq	r2, [r6, #0]
 80047c6:	605a      	strne	r2, [r3, #4]
 80047c8:	e7ec      	b.n	80047a4 <_malloc_r+0xa0>
 80047ca:	4623      	mov	r3, r4
 80047cc:	6864      	ldr	r4, [r4, #4]
 80047ce:	e7b2      	b.n	8004736 <_malloc_r+0x32>
 80047d0:	4634      	mov	r4, r6
 80047d2:	6876      	ldr	r6, [r6, #4]
 80047d4:	e7b9      	b.n	800474a <_malloc_r+0x46>
 80047d6:	230c      	movs	r3, #12
 80047d8:	4638      	mov	r0, r7
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	f000 fd28 	bl	8005230 <__malloc_unlock>
 80047e0:	e7a1      	b.n	8004726 <_malloc_r+0x22>
 80047e2:	6025      	str	r5, [r4, #0]
 80047e4:	e7de      	b.n	80047a4 <_malloc_r+0xa0>
 80047e6:	bf00      	nop
 80047e8:	200005d4 	.word	0x200005d4

080047ec <__ssputs_r>:
 80047ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047f0:	688e      	ldr	r6, [r1, #8]
 80047f2:	4682      	mov	sl, r0
 80047f4:	429e      	cmp	r6, r3
 80047f6:	460c      	mov	r4, r1
 80047f8:	4690      	mov	r8, r2
 80047fa:	461f      	mov	r7, r3
 80047fc:	d838      	bhi.n	8004870 <__ssputs_r+0x84>
 80047fe:	898a      	ldrh	r2, [r1, #12]
 8004800:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004804:	d032      	beq.n	800486c <__ssputs_r+0x80>
 8004806:	6825      	ldr	r5, [r4, #0]
 8004808:	6909      	ldr	r1, [r1, #16]
 800480a:	3301      	adds	r3, #1
 800480c:	eba5 0901 	sub.w	r9, r5, r1
 8004810:	6965      	ldr	r5, [r4, #20]
 8004812:	444b      	add	r3, r9
 8004814:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004818:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800481c:	106d      	asrs	r5, r5, #1
 800481e:	429d      	cmp	r5, r3
 8004820:	bf38      	it	cc
 8004822:	461d      	movcc	r5, r3
 8004824:	0553      	lsls	r3, r2, #21
 8004826:	d531      	bpl.n	800488c <__ssputs_r+0xa0>
 8004828:	4629      	mov	r1, r5
 800482a:	f7ff ff6b 	bl	8004704 <_malloc_r>
 800482e:	4606      	mov	r6, r0
 8004830:	b950      	cbnz	r0, 8004848 <__ssputs_r+0x5c>
 8004832:	230c      	movs	r3, #12
 8004834:	f04f 30ff 	mov.w	r0, #4294967295
 8004838:	f8ca 3000 	str.w	r3, [sl]
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004842:	81a3      	strh	r3, [r4, #12]
 8004844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004848:	464a      	mov	r2, r9
 800484a:	6921      	ldr	r1, [r4, #16]
 800484c:	f7ff fb3c 	bl	8003ec8 <memcpy>
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485a:	81a3      	strh	r3, [r4, #12]
 800485c:	6126      	str	r6, [r4, #16]
 800485e:	444e      	add	r6, r9
 8004860:	6026      	str	r6, [r4, #0]
 8004862:	463e      	mov	r6, r7
 8004864:	6165      	str	r5, [r4, #20]
 8004866:	eba5 0509 	sub.w	r5, r5, r9
 800486a:	60a5      	str	r5, [r4, #8]
 800486c:	42be      	cmp	r6, r7
 800486e:	d900      	bls.n	8004872 <__ssputs_r+0x86>
 8004870:	463e      	mov	r6, r7
 8004872:	4632      	mov	r2, r6
 8004874:	4641      	mov	r1, r8
 8004876:	6820      	ldr	r0, [r4, #0]
 8004878:	f000 fcba 	bl	80051f0 <memmove>
 800487c:	68a3      	ldr	r3, [r4, #8]
 800487e:	2000      	movs	r0, #0
 8004880:	1b9b      	subs	r3, r3, r6
 8004882:	60a3      	str	r3, [r4, #8]
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	4433      	add	r3, r6
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	e7db      	b.n	8004844 <__ssputs_r+0x58>
 800488c:	462a      	mov	r2, r5
 800488e:	f000 fcd5 	bl	800523c <_realloc_r>
 8004892:	4606      	mov	r6, r0
 8004894:	2800      	cmp	r0, #0
 8004896:	d1e1      	bne.n	800485c <__ssputs_r+0x70>
 8004898:	4650      	mov	r0, sl
 800489a:	6921      	ldr	r1, [r4, #16]
 800489c:	f7ff feca 	bl	8004634 <_free_r>
 80048a0:	e7c7      	b.n	8004832 <__ssputs_r+0x46>
	...

080048a4 <_svfiprintf_r>:
 80048a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a8:	4698      	mov	r8, r3
 80048aa:	898b      	ldrh	r3, [r1, #12]
 80048ac:	4607      	mov	r7, r0
 80048ae:	061b      	lsls	r3, r3, #24
 80048b0:	460d      	mov	r5, r1
 80048b2:	4614      	mov	r4, r2
 80048b4:	b09d      	sub	sp, #116	; 0x74
 80048b6:	d50e      	bpl.n	80048d6 <_svfiprintf_r+0x32>
 80048b8:	690b      	ldr	r3, [r1, #16]
 80048ba:	b963      	cbnz	r3, 80048d6 <_svfiprintf_r+0x32>
 80048bc:	2140      	movs	r1, #64	; 0x40
 80048be:	f7ff ff21 	bl	8004704 <_malloc_r>
 80048c2:	6028      	str	r0, [r5, #0]
 80048c4:	6128      	str	r0, [r5, #16]
 80048c6:	b920      	cbnz	r0, 80048d2 <_svfiprintf_r+0x2e>
 80048c8:	230c      	movs	r3, #12
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	f04f 30ff 	mov.w	r0, #4294967295
 80048d0:	e0d1      	b.n	8004a76 <_svfiprintf_r+0x1d2>
 80048d2:	2340      	movs	r3, #64	; 0x40
 80048d4:	616b      	str	r3, [r5, #20]
 80048d6:	2300      	movs	r3, #0
 80048d8:	9309      	str	r3, [sp, #36]	; 0x24
 80048da:	2320      	movs	r3, #32
 80048dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048e0:	2330      	movs	r3, #48	; 0x30
 80048e2:	f04f 0901 	mov.w	r9, #1
 80048e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80048ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a90 <_svfiprintf_r+0x1ec>
 80048ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048f2:	4623      	mov	r3, r4
 80048f4:	469a      	mov	sl, r3
 80048f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048fa:	b10a      	cbz	r2, 8004900 <_svfiprintf_r+0x5c>
 80048fc:	2a25      	cmp	r2, #37	; 0x25
 80048fe:	d1f9      	bne.n	80048f4 <_svfiprintf_r+0x50>
 8004900:	ebba 0b04 	subs.w	fp, sl, r4
 8004904:	d00b      	beq.n	800491e <_svfiprintf_r+0x7a>
 8004906:	465b      	mov	r3, fp
 8004908:	4622      	mov	r2, r4
 800490a:	4629      	mov	r1, r5
 800490c:	4638      	mov	r0, r7
 800490e:	f7ff ff6d 	bl	80047ec <__ssputs_r>
 8004912:	3001      	adds	r0, #1
 8004914:	f000 80aa 	beq.w	8004a6c <_svfiprintf_r+0x1c8>
 8004918:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800491a:	445a      	add	r2, fp
 800491c:	9209      	str	r2, [sp, #36]	; 0x24
 800491e:	f89a 3000 	ldrb.w	r3, [sl]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80a2 	beq.w	8004a6c <_svfiprintf_r+0x1c8>
 8004928:	2300      	movs	r3, #0
 800492a:	f04f 32ff 	mov.w	r2, #4294967295
 800492e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004932:	f10a 0a01 	add.w	sl, sl, #1
 8004936:	9304      	str	r3, [sp, #16]
 8004938:	9307      	str	r3, [sp, #28]
 800493a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800493e:	931a      	str	r3, [sp, #104]	; 0x68
 8004940:	4654      	mov	r4, sl
 8004942:	2205      	movs	r2, #5
 8004944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004948:	4851      	ldr	r0, [pc, #324]	; (8004a90 <_svfiprintf_r+0x1ec>)
 800494a:	f000 fc43 	bl	80051d4 <memchr>
 800494e:	9a04      	ldr	r2, [sp, #16]
 8004950:	b9d8      	cbnz	r0, 800498a <_svfiprintf_r+0xe6>
 8004952:	06d0      	lsls	r0, r2, #27
 8004954:	bf44      	itt	mi
 8004956:	2320      	movmi	r3, #32
 8004958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800495c:	0711      	lsls	r1, r2, #28
 800495e:	bf44      	itt	mi
 8004960:	232b      	movmi	r3, #43	; 0x2b
 8004962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004966:	f89a 3000 	ldrb.w	r3, [sl]
 800496a:	2b2a      	cmp	r3, #42	; 0x2a
 800496c:	d015      	beq.n	800499a <_svfiprintf_r+0xf6>
 800496e:	4654      	mov	r4, sl
 8004970:	2000      	movs	r0, #0
 8004972:	f04f 0c0a 	mov.w	ip, #10
 8004976:	9a07      	ldr	r2, [sp, #28]
 8004978:	4621      	mov	r1, r4
 800497a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800497e:	3b30      	subs	r3, #48	; 0x30
 8004980:	2b09      	cmp	r3, #9
 8004982:	d94e      	bls.n	8004a22 <_svfiprintf_r+0x17e>
 8004984:	b1b0      	cbz	r0, 80049b4 <_svfiprintf_r+0x110>
 8004986:	9207      	str	r2, [sp, #28]
 8004988:	e014      	b.n	80049b4 <_svfiprintf_r+0x110>
 800498a:	eba0 0308 	sub.w	r3, r0, r8
 800498e:	fa09 f303 	lsl.w	r3, r9, r3
 8004992:	4313      	orrs	r3, r2
 8004994:	46a2      	mov	sl, r4
 8004996:	9304      	str	r3, [sp, #16]
 8004998:	e7d2      	b.n	8004940 <_svfiprintf_r+0x9c>
 800499a:	9b03      	ldr	r3, [sp, #12]
 800499c:	1d19      	adds	r1, r3, #4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	9103      	str	r1, [sp, #12]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bfbb      	ittet	lt
 80049a6:	425b      	neglt	r3, r3
 80049a8:	f042 0202 	orrlt.w	r2, r2, #2
 80049ac:	9307      	strge	r3, [sp, #28]
 80049ae:	9307      	strlt	r3, [sp, #28]
 80049b0:	bfb8      	it	lt
 80049b2:	9204      	strlt	r2, [sp, #16]
 80049b4:	7823      	ldrb	r3, [r4, #0]
 80049b6:	2b2e      	cmp	r3, #46	; 0x2e
 80049b8:	d10c      	bne.n	80049d4 <_svfiprintf_r+0x130>
 80049ba:	7863      	ldrb	r3, [r4, #1]
 80049bc:	2b2a      	cmp	r3, #42	; 0x2a
 80049be:	d135      	bne.n	8004a2c <_svfiprintf_r+0x188>
 80049c0:	9b03      	ldr	r3, [sp, #12]
 80049c2:	3402      	adds	r4, #2
 80049c4:	1d1a      	adds	r2, r3, #4
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	9203      	str	r2, [sp, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	bfb8      	it	lt
 80049ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80049d2:	9305      	str	r3, [sp, #20]
 80049d4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004a94 <_svfiprintf_r+0x1f0>
 80049d8:	2203      	movs	r2, #3
 80049da:	4650      	mov	r0, sl
 80049dc:	7821      	ldrb	r1, [r4, #0]
 80049de:	f000 fbf9 	bl	80051d4 <memchr>
 80049e2:	b140      	cbz	r0, 80049f6 <_svfiprintf_r+0x152>
 80049e4:	2340      	movs	r3, #64	; 0x40
 80049e6:	eba0 000a 	sub.w	r0, r0, sl
 80049ea:	fa03 f000 	lsl.w	r0, r3, r0
 80049ee:	9b04      	ldr	r3, [sp, #16]
 80049f0:	3401      	adds	r4, #1
 80049f2:	4303      	orrs	r3, r0
 80049f4:	9304      	str	r3, [sp, #16]
 80049f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049fa:	2206      	movs	r2, #6
 80049fc:	4826      	ldr	r0, [pc, #152]	; (8004a98 <_svfiprintf_r+0x1f4>)
 80049fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a02:	f000 fbe7 	bl	80051d4 <memchr>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	d038      	beq.n	8004a7c <_svfiprintf_r+0x1d8>
 8004a0a:	4b24      	ldr	r3, [pc, #144]	; (8004a9c <_svfiprintf_r+0x1f8>)
 8004a0c:	bb1b      	cbnz	r3, 8004a56 <_svfiprintf_r+0x1b2>
 8004a0e:	9b03      	ldr	r3, [sp, #12]
 8004a10:	3307      	adds	r3, #7
 8004a12:	f023 0307 	bic.w	r3, r3, #7
 8004a16:	3308      	adds	r3, #8
 8004a18:	9303      	str	r3, [sp, #12]
 8004a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a1c:	4433      	add	r3, r6
 8004a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a20:	e767      	b.n	80048f2 <_svfiprintf_r+0x4e>
 8004a22:	460c      	mov	r4, r1
 8004a24:	2001      	movs	r0, #1
 8004a26:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a2a:	e7a5      	b.n	8004978 <_svfiprintf_r+0xd4>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f04f 0c0a 	mov.w	ip, #10
 8004a32:	4619      	mov	r1, r3
 8004a34:	3401      	adds	r4, #1
 8004a36:	9305      	str	r3, [sp, #20]
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a3e:	3a30      	subs	r2, #48	; 0x30
 8004a40:	2a09      	cmp	r2, #9
 8004a42:	d903      	bls.n	8004a4c <_svfiprintf_r+0x1a8>
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0c5      	beq.n	80049d4 <_svfiprintf_r+0x130>
 8004a48:	9105      	str	r1, [sp, #20]
 8004a4a:	e7c3      	b.n	80049d4 <_svfiprintf_r+0x130>
 8004a4c:	4604      	mov	r4, r0
 8004a4e:	2301      	movs	r3, #1
 8004a50:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a54:	e7f0      	b.n	8004a38 <_svfiprintf_r+0x194>
 8004a56:	ab03      	add	r3, sp, #12
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	462a      	mov	r2, r5
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	4b10      	ldr	r3, [pc, #64]	; (8004aa0 <_svfiprintf_r+0x1fc>)
 8004a60:	a904      	add	r1, sp, #16
 8004a62:	f3af 8000 	nop.w
 8004a66:	1c42      	adds	r2, r0, #1
 8004a68:	4606      	mov	r6, r0
 8004a6a:	d1d6      	bne.n	8004a1a <_svfiprintf_r+0x176>
 8004a6c:	89ab      	ldrh	r3, [r5, #12]
 8004a6e:	065b      	lsls	r3, r3, #25
 8004a70:	f53f af2c 	bmi.w	80048cc <_svfiprintf_r+0x28>
 8004a74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a76:	b01d      	add	sp, #116	; 0x74
 8004a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7c:	ab03      	add	r3, sp, #12
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	462a      	mov	r2, r5
 8004a82:	4638      	mov	r0, r7
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <_svfiprintf_r+0x1fc>)
 8004a86:	a904      	add	r1, sp, #16
 8004a88:	f000 f9d4 	bl	8004e34 <_printf_i>
 8004a8c:	e7eb      	b.n	8004a66 <_svfiprintf_r+0x1c2>
 8004a8e:	bf00      	nop
 8004a90:	08005cd0 	.word	0x08005cd0
 8004a94:	08005cd6 	.word	0x08005cd6
 8004a98:	08005cda 	.word	0x08005cda
 8004a9c:	00000000 	.word	0x00000000
 8004aa0:	080047ed 	.word	0x080047ed

08004aa4 <__sfputc_r>:
 8004aa4:	6893      	ldr	r3, [r2, #8]
 8004aa6:	b410      	push	{r4}
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	6093      	str	r3, [r2, #8]
 8004aae:	da07      	bge.n	8004ac0 <__sfputc_r+0x1c>
 8004ab0:	6994      	ldr	r4, [r2, #24]
 8004ab2:	42a3      	cmp	r3, r4
 8004ab4:	db01      	blt.n	8004aba <__sfputc_r+0x16>
 8004ab6:	290a      	cmp	r1, #10
 8004ab8:	d102      	bne.n	8004ac0 <__sfputc_r+0x1c>
 8004aba:	bc10      	pop	{r4}
 8004abc:	f7ff bade 	b.w	800407c <__swbuf_r>
 8004ac0:	6813      	ldr	r3, [r2, #0]
 8004ac2:	1c58      	adds	r0, r3, #1
 8004ac4:	6010      	str	r0, [r2, #0]
 8004ac6:	7019      	strb	r1, [r3, #0]
 8004ac8:	4608      	mov	r0, r1
 8004aca:	bc10      	pop	{r4}
 8004acc:	4770      	bx	lr

08004ace <__sfputs_r>:
 8004ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	460f      	mov	r7, r1
 8004ad4:	4614      	mov	r4, r2
 8004ad6:	18d5      	adds	r5, r2, r3
 8004ad8:	42ac      	cmp	r4, r5
 8004ada:	d101      	bne.n	8004ae0 <__sfputs_r+0x12>
 8004adc:	2000      	movs	r0, #0
 8004ade:	e007      	b.n	8004af0 <__sfputs_r+0x22>
 8004ae0:	463a      	mov	r2, r7
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae8:	f7ff ffdc 	bl	8004aa4 <__sfputc_r>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d1f3      	bne.n	8004ad8 <__sfputs_r+0xa>
 8004af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004af4 <_vfiprintf_r>:
 8004af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af8:	460d      	mov	r5, r1
 8004afa:	4614      	mov	r4, r2
 8004afc:	4698      	mov	r8, r3
 8004afe:	4606      	mov	r6, r0
 8004b00:	b09d      	sub	sp, #116	; 0x74
 8004b02:	b118      	cbz	r0, 8004b0c <_vfiprintf_r+0x18>
 8004b04:	6983      	ldr	r3, [r0, #24]
 8004b06:	b90b      	cbnz	r3, 8004b0c <_vfiprintf_r+0x18>
 8004b08:	f7ff fc8e 	bl	8004428 <__sinit>
 8004b0c:	4b89      	ldr	r3, [pc, #548]	; (8004d34 <_vfiprintf_r+0x240>)
 8004b0e:	429d      	cmp	r5, r3
 8004b10:	d11b      	bne.n	8004b4a <_vfiprintf_r+0x56>
 8004b12:	6875      	ldr	r5, [r6, #4]
 8004b14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b16:	07d9      	lsls	r1, r3, #31
 8004b18:	d405      	bmi.n	8004b26 <_vfiprintf_r+0x32>
 8004b1a:	89ab      	ldrh	r3, [r5, #12]
 8004b1c:	059a      	lsls	r2, r3, #22
 8004b1e:	d402      	bmi.n	8004b26 <_vfiprintf_r+0x32>
 8004b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b22:	f7ff fd1f 	bl	8004564 <__retarget_lock_acquire_recursive>
 8004b26:	89ab      	ldrh	r3, [r5, #12]
 8004b28:	071b      	lsls	r3, r3, #28
 8004b2a:	d501      	bpl.n	8004b30 <_vfiprintf_r+0x3c>
 8004b2c:	692b      	ldr	r3, [r5, #16]
 8004b2e:	b9eb      	cbnz	r3, 8004b6c <_vfiprintf_r+0x78>
 8004b30:	4629      	mov	r1, r5
 8004b32:	4630      	mov	r0, r6
 8004b34:	f7ff faf4 	bl	8004120 <__swsetup_r>
 8004b38:	b1c0      	cbz	r0, 8004b6c <_vfiprintf_r+0x78>
 8004b3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b3c:	07dc      	lsls	r4, r3, #31
 8004b3e:	d50e      	bpl.n	8004b5e <_vfiprintf_r+0x6a>
 8004b40:	f04f 30ff 	mov.w	r0, #4294967295
 8004b44:	b01d      	add	sp, #116	; 0x74
 8004b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4a:	4b7b      	ldr	r3, [pc, #492]	; (8004d38 <_vfiprintf_r+0x244>)
 8004b4c:	429d      	cmp	r5, r3
 8004b4e:	d101      	bne.n	8004b54 <_vfiprintf_r+0x60>
 8004b50:	68b5      	ldr	r5, [r6, #8]
 8004b52:	e7df      	b.n	8004b14 <_vfiprintf_r+0x20>
 8004b54:	4b79      	ldr	r3, [pc, #484]	; (8004d3c <_vfiprintf_r+0x248>)
 8004b56:	429d      	cmp	r5, r3
 8004b58:	bf08      	it	eq
 8004b5a:	68f5      	ldreq	r5, [r6, #12]
 8004b5c:	e7da      	b.n	8004b14 <_vfiprintf_r+0x20>
 8004b5e:	89ab      	ldrh	r3, [r5, #12]
 8004b60:	0598      	lsls	r0, r3, #22
 8004b62:	d4ed      	bmi.n	8004b40 <_vfiprintf_r+0x4c>
 8004b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b66:	f7ff fcfe 	bl	8004566 <__retarget_lock_release_recursive>
 8004b6a:	e7e9      	b.n	8004b40 <_vfiprintf_r+0x4c>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b70:	2320      	movs	r3, #32
 8004b72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b76:	2330      	movs	r3, #48	; 0x30
 8004b78:	f04f 0901 	mov.w	r9, #1
 8004b7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004d40 <_vfiprintf_r+0x24c>
 8004b84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b88:	4623      	mov	r3, r4
 8004b8a:	469a      	mov	sl, r3
 8004b8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b90:	b10a      	cbz	r2, 8004b96 <_vfiprintf_r+0xa2>
 8004b92:	2a25      	cmp	r2, #37	; 0x25
 8004b94:	d1f9      	bne.n	8004b8a <_vfiprintf_r+0x96>
 8004b96:	ebba 0b04 	subs.w	fp, sl, r4
 8004b9a:	d00b      	beq.n	8004bb4 <_vfiprintf_r+0xc0>
 8004b9c:	465b      	mov	r3, fp
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	f7ff ff93 	bl	8004ace <__sfputs_r>
 8004ba8:	3001      	adds	r0, #1
 8004baa:	f000 80aa 	beq.w	8004d02 <_vfiprintf_r+0x20e>
 8004bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bb0:	445a      	add	r2, fp
 8004bb2:	9209      	str	r2, [sp, #36]	; 0x24
 8004bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80a2 	beq.w	8004d02 <_vfiprintf_r+0x20e>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bc8:	f10a 0a01 	add.w	sl, sl, #1
 8004bcc:	9304      	str	r3, [sp, #16]
 8004bce:	9307      	str	r3, [sp, #28]
 8004bd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bd4:	931a      	str	r3, [sp, #104]	; 0x68
 8004bd6:	4654      	mov	r4, sl
 8004bd8:	2205      	movs	r2, #5
 8004bda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bde:	4858      	ldr	r0, [pc, #352]	; (8004d40 <_vfiprintf_r+0x24c>)
 8004be0:	f000 faf8 	bl	80051d4 <memchr>
 8004be4:	9a04      	ldr	r2, [sp, #16]
 8004be6:	b9d8      	cbnz	r0, 8004c20 <_vfiprintf_r+0x12c>
 8004be8:	06d1      	lsls	r1, r2, #27
 8004bea:	bf44      	itt	mi
 8004bec:	2320      	movmi	r3, #32
 8004bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bf2:	0713      	lsls	r3, r2, #28
 8004bf4:	bf44      	itt	mi
 8004bf6:	232b      	movmi	r3, #43	; 0x2b
 8004bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8004c00:	2b2a      	cmp	r3, #42	; 0x2a
 8004c02:	d015      	beq.n	8004c30 <_vfiprintf_r+0x13c>
 8004c04:	4654      	mov	r4, sl
 8004c06:	2000      	movs	r0, #0
 8004c08:	f04f 0c0a 	mov.w	ip, #10
 8004c0c:	9a07      	ldr	r2, [sp, #28]
 8004c0e:	4621      	mov	r1, r4
 8004c10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c14:	3b30      	subs	r3, #48	; 0x30
 8004c16:	2b09      	cmp	r3, #9
 8004c18:	d94e      	bls.n	8004cb8 <_vfiprintf_r+0x1c4>
 8004c1a:	b1b0      	cbz	r0, 8004c4a <_vfiprintf_r+0x156>
 8004c1c:	9207      	str	r2, [sp, #28]
 8004c1e:	e014      	b.n	8004c4a <_vfiprintf_r+0x156>
 8004c20:	eba0 0308 	sub.w	r3, r0, r8
 8004c24:	fa09 f303 	lsl.w	r3, r9, r3
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	46a2      	mov	sl, r4
 8004c2c:	9304      	str	r3, [sp, #16]
 8004c2e:	e7d2      	b.n	8004bd6 <_vfiprintf_r+0xe2>
 8004c30:	9b03      	ldr	r3, [sp, #12]
 8004c32:	1d19      	adds	r1, r3, #4
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	9103      	str	r1, [sp, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bfbb      	ittet	lt
 8004c3c:	425b      	neglt	r3, r3
 8004c3e:	f042 0202 	orrlt.w	r2, r2, #2
 8004c42:	9307      	strge	r3, [sp, #28]
 8004c44:	9307      	strlt	r3, [sp, #28]
 8004c46:	bfb8      	it	lt
 8004c48:	9204      	strlt	r2, [sp, #16]
 8004c4a:	7823      	ldrb	r3, [r4, #0]
 8004c4c:	2b2e      	cmp	r3, #46	; 0x2e
 8004c4e:	d10c      	bne.n	8004c6a <_vfiprintf_r+0x176>
 8004c50:	7863      	ldrb	r3, [r4, #1]
 8004c52:	2b2a      	cmp	r3, #42	; 0x2a
 8004c54:	d135      	bne.n	8004cc2 <_vfiprintf_r+0x1ce>
 8004c56:	9b03      	ldr	r3, [sp, #12]
 8004c58:	3402      	adds	r4, #2
 8004c5a:	1d1a      	adds	r2, r3, #4
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	9203      	str	r2, [sp, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	bfb8      	it	lt
 8004c64:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c68:	9305      	str	r3, [sp, #20]
 8004c6a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004d44 <_vfiprintf_r+0x250>
 8004c6e:	2203      	movs	r2, #3
 8004c70:	4650      	mov	r0, sl
 8004c72:	7821      	ldrb	r1, [r4, #0]
 8004c74:	f000 faae 	bl	80051d4 <memchr>
 8004c78:	b140      	cbz	r0, 8004c8c <_vfiprintf_r+0x198>
 8004c7a:	2340      	movs	r3, #64	; 0x40
 8004c7c:	eba0 000a 	sub.w	r0, r0, sl
 8004c80:	fa03 f000 	lsl.w	r0, r3, r0
 8004c84:	9b04      	ldr	r3, [sp, #16]
 8004c86:	3401      	adds	r4, #1
 8004c88:	4303      	orrs	r3, r0
 8004c8a:	9304      	str	r3, [sp, #16]
 8004c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c90:	2206      	movs	r2, #6
 8004c92:	482d      	ldr	r0, [pc, #180]	; (8004d48 <_vfiprintf_r+0x254>)
 8004c94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c98:	f000 fa9c 	bl	80051d4 <memchr>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	d03f      	beq.n	8004d20 <_vfiprintf_r+0x22c>
 8004ca0:	4b2a      	ldr	r3, [pc, #168]	; (8004d4c <_vfiprintf_r+0x258>)
 8004ca2:	bb1b      	cbnz	r3, 8004cec <_vfiprintf_r+0x1f8>
 8004ca4:	9b03      	ldr	r3, [sp, #12]
 8004ca6:	3307      	adds	r3, #7
 8004ca8:	f023 0307 	bic.w	r3, r3, #7
 8004cac:	3308      	adds	r3, #8
 8004cae:	9303      	str	r3, [sp, #12]
 8004cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb2:	443b      	add	r3, r7
 8004cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8004cb6:	e767      	b.n	8004b88 <_vfiprintf_r+0x94>
 8004cb8:	460c      	mov	r4, r1
 8004cba:	2001      	movs	r0, #1
 8004cbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cc0:	e7a5      	b.n	8004c0e <_vfiprintf_r+0x11a>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f04f 0c0a 	mov.w	ip, #10
 8004cc8:	4619      	mov	r1, r3
 8004cca:	3401      	adds	r4, #1
 8004ccc:	9305      	str	r3, [sp, #20]
 8004cce:	4620      	mov	r0, r4
 8004cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cd4:	3a30      	subs	r2, #48	; 0x30
 8004cd6:	2a09      	cmp	r2, #9
 8004cd8:	d903      	bls.n	8004ce2 <_vfiprintf_r+0x1ee>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0c5      	beq.n	8004c6a <_vfiprintf_r+0x176>
 8004cde:	9105      	str	r1, [sp, #20]
 8004ce0:	e7c3      	b.n	8004c6a <_vfiprintf_r+0x176>
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cea:	e7f0      	b.n	8004cce <_vfiprintf_r+0x1da>
 8004cec:	ab03      	add	r3, sp, #12
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	462a      	mov	r2, r5
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	4b16      	ldr	r3, [pc, #88]	; (8004d50 <_vfiprintf_r+0x25c>)
 8004cf6:	a904      	add	r1, sp, #16
 8004cf8:	f3af 8000 	nop.w
 8004cfc:	4607      	mov	r7, r0
 8004cfe:	1c78      	adds	r0, r7, #1
 8004d00:	d1d6      	bne.n	8004cb0 <_vfiprintf_r+0x1bc>
 8004d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d04:	07d9      	lsls	r1, r3, #31
 8004d06:	d405      	bmi.n	8004d14 <_vfiprintf_r+0x220>
 8004d08:	89ab      	ldrh	r3, [r5, #12]
 8004d0a:	059a      	lsls	r2, r3, #22
 8004d0c:	d402      	bmi.n	8004d14 <_vfiprintf_r+0x220>
 8004d0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d10:	f7ff fc29 	bl	8004566 <__retarget_lock_release_recursive>
 8004d14:	89ab      	ldrh	r3, [r5, #12]
 8004d16:	065b      	lsls	r3, r3, #25
 8004d18:	f53f af12 	bmi.w	8004b40 <_vfiprintf_r+0x4c>
 8004d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d1e:	e711      	b.n	8004b44 <_vfiprintf_r+0x50>
 8004d20:	ab03      	add	r3, sp, #12
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	462a      	mov	r2, r5
 8004d26:	4630      	mov	r0, r6
 8004d28:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <_vfiprintf_r+0x25c>)
 8004d2a:	a904      	add	r1, sp, #16
 8004d2c:	f000 f882 	bl	8004e34 <_printf_i>
 8004d30:	e7e4      	b.n	8004cfc <_vfiprintf_r+0x208>
 8004d32:	bf00      	nop
 8004d34:	08005c90 	.word	0x08005c90
 8004d38:	08005cb0 	.word	0x08005cb0
 8004d3c:	08005c70 	.word	0x08005c70
 8004d40:	08005cd0 	.word	0x08005cd0
 8004d44:	08005cd6 	.word	0x08005cd6
 8004d48:	08005cda 	.word	0x08005cda
 8004d4c:	00000000 	.word	0x00000000
 8004d50:	08004acf 	.word	0x08004acf

08004d54 <_printf_common>:
 8004d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d58:	4616      	mov	r6, r2
 8004d5a:	4699      	mov	r9, r3
 8004d5c:	688a      	ldr	r2, [r1, #8]
 8004d5e:	690b      	ldr	r3, [r1, #16]
 8004d60:	4607      	mov	r7, r0
 8004d62:	4293      	cmp	r3, r2
 8004d64:	bfb8      	it	lt
 8004d66:	4613      	movlt	r3, r2
 8004d68:	6033      	str	r3, [r6, #0]
 8004d6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d6e:	460c      	mov	r4, r1
 8004d70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d74:	b10a      	cbz	r2, 8004d7a <_printf_common+0x26>
 8004d76:	3301      	adds	r3, #1
 8004d78:	6033      	str	r3, [r6, #0]
 8004d7a:	6823      	ldr	r3, [r4, #0]
 8004d7c:	0699      	lsls	r1, r3, #26
 8004d7e:	bf42      	ittt	mi
 8004d80:	6833      	ldrmi	r3, [r6, #0]
 8004d82:	3302      	addmi	r3, #2
 8004d84:	6033      	strmi	r3, [r6, #0]
 8004d86:	6825      	ldr	r5, [r4, #0]
 8004d88:	f015 0506 	ands.w	r5, r5, #6
 8004d8c:	d106      	bne.n	8004d9c <_printf_common+0x48>
 8004d8e:	f104 0a19 	add.w	sl, r4, #25
 8004d92:	68e3      	ldr	r3, [r4, #12]
 8004d94:	6832      	ldr	r2, [r6, #0]
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	42ab      	cmp	r3, r5
 8004d9a:	dc28      	bgt.n	8004dee <_printf_common+0x9a>
 8004d9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004da0:	1e13      	subs	r3, r2, #0
 8004da2:	6822      	ldr	r2, [r4, #0]
 8004da4:	bf18      	it	ne
 8004da6:	2301      	movne	r3, #1
 8004da8:	0692      	lsls	r2, r2, #26
 8004daa:	d42d      	bmi.n	8004e08 <_printf_common+0xb4>
 8004dac:	4649      	mov	r1, r9
 8004dae:	4638      	mov	r0, r7
 8004db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004db4:	47c0      	blx	r8
 8004db6:	3001      	adds	r0, #1
 8004db8:	d020      	beq.n	8004dfc <_printf_common+0xa8>
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	68e5      	ldr	r5, [r4, #12]
 8004dbe:	f003 0306 	and.w	r3, r3, #6
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	bf18      	it	ne
 8004dc6:	2500      	movne	r5, #0
 8004dc8:	6832      	ldr	r2, [r6, #0]
 8004dca:	f04f 0600 	mov.w	r6, #0
 8004dce:	68a3      	ldr	r3, [r4, #8]
 8004dd0:	bf08      	it	eq
 8004dd2:	1aad      	subeq	r5, r5, r2
 8004dd4:	6922      	ldr	r2, [r4, #16]
 8004dd6:	bf08      	it	eq
 8004dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	bfc4      	itt	gt
 8004de0:	1a9b      	subgt	r3, r3, r2
 8004de2:	18ed      	addgt	r5, r5, r3
 8004de4:	341a      	adds	r4, #26
 8004de6:	42b5      	cmp	r5, r6
 8004de8:	d11a      	bne.n	8004e20 <_printf_common+0xcc>
 8004dea:	2000      	movs	r0, #0
 8004dec:	e008      	b.n	8004e00 <_printf_common+0xac>
 8004dee:	2301      	movs	r3, #1
 8004df0:	4652      	mov	r2, sl
 8004df2:	4649      	mov	r1, r9
 8004df4:	4638      	mov	r0, r7
 8004df6:	47c0      	blx	r8
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d103      	bne.n	8004e04 <_printf_common+0xb0>
 8004dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e04:	3501      	adds	r5, #1
 8004e06:	e7c4      	b.n	8004d92 <_printf_common+0x3e>
 8004e08:	2030      	movs	r0, #48	; 0x30
 8004e0a:	18e1      	adds	r1, r4, r3
 8004e0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e16:	4422      	add	r2, r4
 8004e18:	3302      	adds	r3, #2
 8004e1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e1e:	e7c5      	b.n	8004dac <_printf_common+0x58>
 8004e20:	2301      	movs	r3, #1
 8004e22:	4622      	mov	r2, r4
 8004e24:	4649      	mov	r1, r9
 8004e26:	4638      	mov	r0, r7
 8004e28:	47c0      	blx	r8
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	d0e6      	beq.n	8004dfc <_printf_common+0xa8>
 8004e2e:	3601      	adds	r6, #1
 8004e30:	e7d9      	b.n	8004de6 <_printf_common+0x92>
	...

08004e34 <_printf_i>:
 8004e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e38:	7e0f      	ldrb	r7, [r1, #24]
 8004e3a:	4691      	mov	r9, r2
 8004e3c:	2f78      	cmp	r7, #120	; 0x78
 8004e3e:	4680      	mov	r8, r0
 8004e40:	460c      	mov	r4, r1
 8004e42:	469a      	mov	sl, r3
 8004e44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e4a:	d807      	bhi.n	8004e5c <_printf_i+0x28>
 8004e4c:	2f62      	cmp	r7, #98	; 0x62
 8004e4e:	d80a      	bhi.n	8004e66 <_printf_i+0x32>
 8004e50:	2f00      	cmp	r7, #0
 8004e52:	f000 80d9 	beq.w	8005008 <_printf_i+0x1d4>
 8004e56:	2f58      	cmp	r7, #88	; 0x58
 8004e58:	f000 80a4 	beq.w	8004fa4 <_printf_i+0x170>
 8004e5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e64:	e03a      	b.n	8004edc <_printf_i+0xa8>
 8004e66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e6a:	2b15      	cmp	r3, #21
 8004e6c:	d8f6      	bhi.n	8004e5c <_printf_i+0x28>
 8004e6e:	a101      	add	r1, pc, #4	; (adr r1, 8004e74 <_printf_i+0x40>)
 8004e70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e74:	08004ecd 	.word	0x08004ecd
 8004e78:	08004ee1 	.word	0x08004ee1
 8004e7c:	08004e5d 	.word	0x08004e5d
 8004e80:	08004e5d 	.word	0x08004e5d
 8004e84:	08004e5d 	.word	0x08004e5d
 8004e88:	08004e5d 	.word	0x08004e5d
 8004e8c:	08004ee1 	.word	0x08004ee1
 8004e90:	08004e5d 	.word	0x08004e5d
 8004e94:	08004e5d 	.word	0x08004e5d
 8004e98:	08004e5d 	.word	0x08004e5d
 8004e9c:	08004e5d 	.word	0x08004e5d
 8004ea0:	08004fef 	.word	0x08004fef
 8004ea4:	08004f11 	.word	0x08004f11
 8004ea8:	08004fd1 	.word	0x08004fd1
 8004eac:	08004e5d 	.word	0x08004e5d
 8004eb0:	08004e5d 	.word	0x08004e5d
 8004eb4:	08005011 	.word	0x08005011
 8004eb8:	08004e5d 	.word	0x08004e5d
 8004ebc:	08004f11 	.word	0x08004f11
 8004ec0:	08004e5d 	.word	0x08004e5d
 8004ec4:	08004e5d 	.word	0x08004e5d
 8004ec8:	08004fd9 	.word	0x08004fd9
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	1d1a      	adds	r2, r3, #4
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	602a      	str	r2, [r5, #0]
 8004ed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0a4      	b.n	800502a <_printf_i+0x1f6>
 8004ee0:	6820      	ldr	r0, [r4, #0]
 8004ee2:	6829      	ldr	r1, [r5, #0]
 8004ee4:	0606      	lsls	r6, r0, #24
 8004ee6:	f101 0304 	add.w	r3, r1, #4
 8004eea:	d50a      	bpl.n	8004f02 <_printf_i+0xce>
 8004eec:	680e      	ldr	r6, [r1, #0]
 8004eee:	602b      	str	r3, [r5, #0]
 8004ef0:	2e00      	cmp	r6, #0
 8004ef2:	da03      	bge.n	8004efc <_printf_i+0xc8>
 8004ef4:	232d      	movs	r3, #45	; 0x2d
 8004ef6:	4276      	negs	r6, r6
 8004ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004efc:	230a      	movs	r3, #10
 8004efe:	485e      	ldr	r0, [pc, #376]	; (8005078 <_printf_i+0x244>)
 8004f00:	e019      	b.n	8004f36 <_printf_i+0x102>
 8004f02:	680e      	ldr	r6, [r1, #0]
 8004f04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004f08:	602b      	str	r3, [r5, #0]
 8004f0a:	bf18      	it	ne
 8004f0c:	b236      	sxthne	r6, r6
 8004f0e:	e7ef      	b.n	8004ef0 <_printf_i+0xbc>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	6820      	ldr	r0, [r4, #0]
 8004f14:	1d19      	adds	r1, r3, #4
 8004f16:	6029      	str	r1, [r5, #0]
 8004f18:	0601      	lsls	r1, r0, #24
 8004f1a:	d501      	bpl.n	8004f20 <_printf_i+0xec>
 8004f1c:	681e      	ldr	r6, [r3, #0]
 8004f1e:	e002      	b.n	8004f26 <_printf_i+0xf2>
 8004f20:	0646      	lsls	r6, r0, #25
 8004f22:	d5fb      	bpl.n	8004f1c <_printf_i+0xe8>
 8004f24:	881e      	ldrh	r6, [r3, #0]
 8004f26:	2f6f      	cmp	r7, #111	; 0x6f
 8004f28:	bf0c      	ite	eq
 8004f2a:	2308      	moveq	r3, #8
 8004f2c:	230a      	movne	r3, #10
 8004f2e:	4852      	ldr	r0, [pc, #328]	; (8005078 <_printf_i+0x244>)
 8004f30:	2100      	movs	r1, #0
 8004f32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f36:	6865      	ldr	r5, [r4, #4]
 8004f38:	2d00      	cmp	r5, #0
 8004f3a:	bfa8      	it	ge
 8004f3c:	6821      	ldrge	r1, [r4, #0]
 8004f3e:	60a5      	str	r5, [r4, #8]
 8004f40:	bfa4      	itt	ge
 8004f42:	f021 0104 	bicge.w	r1, r1, #4
 8004f46:	6021      	strge	r1, [r4, #0]
 8004f48:	b90e      	cbnz	r6, 8004f4e <_printf_i+0x11a>
 8004f4a:	2d00      	cmp	r5, #0
 8004f4c:	d04d      	beq.n	8004fea <_printf_i+0x1b6>
 8004f4e:	4615      	mov	r5, r2
 8004f50:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f54:	fb03 6711 	mls	r7, r3, r1, r6
 8004f58:	5dc7      	ldrb	r7, [r0, r7]
 8004f5a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f5e:	4637      	mov	r7, r6
 8004f60:	42bb      	cmp	r3, r7
 8004f62:	460e      	mov	r6, r1
 8004f64:	d9f4      	bls.n	8004f50 <_printf_i+0x11c>
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d10b      	bne.n	8004f82 <_printf_i+0x14e>
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	07de      	lsls	r6, r3, #31
 8004f6e:	d508      	bpl.n	8004f82 <_printf_i+0x14e>
 8004f70:	6923      	ldr	r3, [r4, #16]
 8004f72:	6861      	ldr	r1, [r4, #4]
 8004f74:	4299      	cmp	r1, r3
 8004f76:	bfde      	ittt	le
 8004f78:	2330      	movle	r3, #48	; 0x30
 8004f7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f82:	1b52      	subs	r2, r2, r5
 8004f84:	6122      	str	r2, [r4, #16]
 8004f86:	464b      	mov	r3, r9
 8004f88:	4621      	mov	r1, r4
 8004f8a:	4640      	mov	r0, r8
 8004f8c:	f8cd a000 	str.w	sl, [sp]
 8004f90:	aa03      	add	r2, sp, #12
 8004f92:	f7ff fedf 	bl	8004d54 <_printf_common>
 8004f96:	3001      	adds	r0, #1
 8004f98:	d14c      	bne.n	8005034 <_printf_i+0x200>
 8004f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9e:	b004      	add	sp, #16
 8004fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa4:	4834      	ldr	r0, [pc, #208]	; (8005078 <_printf_i+0x244>)
 8004fa6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004faa:	6829      	ldr	r1, [r5, #0]
 8004fac:	6823      	ldr	r3, [r4, #0]
 8004fae:	f851 6b04 	ldr.w	r6, [r1], #4
 8004fb2:	6029      	str	r1, [r5, #0]
 8004fb4:	061d      	lsls	r5, r3, #24
 8004fb6:	d514      	bpl.n	8004fe2 <_printf_i+0x1ae>
 8004fb8:	07df      	lsls	r7, r3, #31
 8004fba:	bf44      	itt	mi
 8004fbc:	f043 0320 	orrmi.w	r3, r3, #32
 8004fc0:	6023      	strmi	r3, [r4, #0]
 8004fc2:	b91e      	cbnz	r6, 8004fcc <_printf_i+0x198>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	f023 0320 	bic.w	r3, r3, #32
 8004fca:	6023      	str	r3, [r4, #0]
 8004fcc:	2310      	movs	r3, #16
 8004fce:	e7af      	b.n	8004f30 <_printf_i+0xfc>
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	f043 0320 	orr.w	r3, r3, #32
 8004fd6:	6023      	str	r3, [r4, #0]
 8004fd8:	2378      	movs	r3, #120	; 0x78
 8004fda:	4828      	ldr	r0, [pc, #160]	; (800507c <_printf_i+0x248>)
 8004fdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fe0:	e7e3      	b.n	8004faa <_printf_i+0x176>
 8004fe2:	0659      	lsls	r1, r3, #25
 8004fe4:	bf48      	it	mi
 8004fe6:	b2b6      	uxthmi	r6, r6
 8004fe8:	e7e6      	b.n	8004fb8 <_printf_i+0x184>
 8004fea:	4615      	mov	r5, r2
 8004fec:	e7bb      	b.n	8004f66 <_printf_i+0x132>
 8004fee:	682b      	ldr	r3, [r5, #0]
 8004ff0:	6826      	ldr	r6, [r4, #0]
 8004ff2:	1d18      	adds	r0, r3, #4
 8004ff4:	6961      	ldr	r1, [r4, #20]
 8004ff6:	6028      	str	r0, [r5, #0]
 8004ff8:	0635      	lsls	r5, r6, #24
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	d501      	bpl.n	8005002 <_printf_i+0x1ce>
 8004ffe:	6019      	str	r1, [r3, #0]
 8005000:	e002      	b.n	8005008 <_printf_i+0x1d4>
 8005002:	0670      	lsls	r0, r6, #25
 8005004:	d5fb      	bpl.n	8004ffe <_printf_i+0x1ca>
 8005006:	8019      	strh	r1, [r3, #0]
 8005008:	2300      	movs	r3, #0
 800500a:	4615      	mov	r5, r2
 800500c:	6123      	str	r3, [r4, #16]
 800500e:	e7ba      	b.n	8004f86 <_printf_i+0x152>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	2100      	movs	r1, #0
 8005014:	1d1a      	adds	r2, r3, #4
 8005016:	602a      	str	r2, [r5, #0]
 8005018:	681d      	ldr	r5, [r3, #0]
 800501a:	6862      	ldr	r2, [r4, #4]
 800501c:	4628      	mov	r0, r5
 800501e:	f000 f8d9 	bl	80051d4 <memchr>
 8005022:	b108      	cbz	r0, 8005028 <_printf_i+0x1f4>
 8005024:	1b40      	subs	r0, r0, r5
 8005026:	6060      	str	r0, [r4, #4]
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	6123      	str	r3, [r4, #16]
 800502c:	2300      	movs	r3, #0
 800502e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005032:	e7a8      	b.n	8004f86 <_printf_i+0x152>
 8005034:	462a      	mov	r2, r5
 8005036:	4649      	mov	r1, r9
 8005038:	4640      	mov	r0, r8
 800503a:	6923      	ldr	r3, [r4, #16]
 800503c:	47d0      	blx	sl
 800503e:	3001      	adds	r0, #1
 8005040:	d0ab      	beq.n	8004f9a <_printf_i+0x166>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	079b      	lsls	r3, r3, #30
 8005046:	d413      	bmi.n	8005070 <_printf_i+0x23c>
 8005048:	68e0      	ldr	r0, [r4, #12]
 800504a:	9b03      	ldr	r3, [sp, #12]
 800504c:	4298      	cmp	r0, r3
 800504e:	bfb8      	it	lt
 8005050:	4618      	movlt	r0, r3
 8005052:	e7a4      	b.n	8004f9e <_printf_i+0x16a>
 8005054:	2301      	movs	r3, #1
 8005056:	4632      	mov	r2, r6
 8005058:	4649      	mov	r1, r9
 800505a:	4640      	mov	r0, r8
 800505c:	47d0      	blx	sl
 800505e:	3001      	adds	r0, #1
 8005060:	d09b      	beq.n	8004f9a <_printf_i+0x166>
 8005062:	3501      	adds	r5, #1
 8005064:	68e3      	ldr	r3, [r4, #12]
 8005066:	9903      	ldr	r1, [sp, #12]
 8005068:	1a5b      	subs	r3, r3, r1
 800506a:	42ab      	cmp	r3, r5
 800506c:	dcf2      	bgt.n	8005054 <_printf_i+0x220>
 800506e:	e7eb      	b.n	8005048 <_printf_i+0x214>
 8005070:	2500      	movs	r5, #0
 8005072:	f104 0619 	add.w	r6, r4, #25
 8005076:	e7f5      	b.n	8005064 <_printf_i+0x230>
 8005078:	08005ce1 	.word	0x08005ce1
 800507c:	08005cf2 	.word	0x08005cf2

08005080 <_sbrk_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	2300      	movs	r3, #0
 8005084:	4d05      	ldr	r5, [pc, #20]	; (800509c <_sbrk_r+0x1c>)
 8005086:	4604      	mov	r4, r0
 8005088:	4608      	mov	r0, r1
 800508a:	602b      	str	r3, [r5, #0]
 800508c:	f7fc fd28 	bl	8001ae0 <_sbrk>
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	d102      	bne.n	800509a <_sbrk_r+0x1a>
 8005094:	682b      	ldr	r3, [r5, #0]
 8005096:	b103      	cbz	r3, 800509a <_sbrk_r+0x1a>
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	200005dc 	.word	0x200005dc

080050a0 <__sread>:
 80050a0:	b510      	push	{r4, lr}
 80050a2:	460c      	mov	r4, r1
 80050a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a8:	f000 f8f8 	bl	800529c <_read_r>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	bfab      	itete	ge
 80050b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050b2:	89a3      	ldrhlt	r3, [r4, #12]
 80050b4:	181b      	addge	r3, r3, r0
 80050b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050ba:	bfac      	ite	ge
 80050bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80050be:	81a3      	strhlt	r3, [r4, #12]
 80050c0:	bd10      	pop	{r4, pc}

080050c2 <__swrite>:
 80050c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c6:	461f      	mov	r7, r3
 80050c8:	898b      	ldrh	r3, [r1, #12]
 80050ca:	4605      	mov	r5, r0
 80050cc:	05db      	lsls	r3, r3, #23
 80050ce:	460c      	mov	r4, r1
 80050d0:	4616      	mov	r6, r2
 80050d2:	d505      	bpl.n	80050e0 <__swrite+0x1e>
 80050d4:	2302      	movs	r3, #2
 80050d6:	2200      	movs	r2, #0
 80050d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050dc:	f000 f868 	bl	80051b0 <_lseek_r>
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	4632      	mov	r2, r6
 80050e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050e8:	81a3      	strh	r3, [r4, #12]
 80050ea:	4628      	mov	r0, r5
 80050ec:	463b      	mov	r3, r7
 80050ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050f6:	f000 b817 	b.w	8005128 <_write_r>

080050fa <__sseek>:
 80050fa:	b510      	push	{r4, lr}
 80050fc:	460c      	mov	r4, r1
 80050fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005102:	f000 f855 	bl	80051b0 <_lseek_r>
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	bf15      	itete	ne
 800510c:	6560      	strne	r0, [r4, #84]	; 0x54
 800510e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005112:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005116:	81a3      	strheq	r3, [r4, #12]
 8005118:	bf18      	it	ne
 800511a:	81a3      	strhne	r3, [r4, #12]
 800511c:	bd10      	pop	{r4, pc}

0800511e <__sclose>:
 800511e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005122:	f000 b813 	b.w	800514c <_close_r>
	...

08005128 <_write_r>:
 8005128:	b538      	push	{r3, r4, r5, lr}
 800512a:	4604      	mov	r4, r0
 800512c:	4608      	mov	r0, r1
 800512e:	4611      	mov	r1, r2
 8005130:	2200      	movs	r2, #0
 8005132:	4d05      	ldr	r5, [pc, #20]	; (8005148 <_write_r+0x20>)
 8005134:	602a      	str	r2, [r5, #0]
 8005136:	461a      	mov	r2, r3
 8005138:	f7fc fc85 	bl	8001a46 <_write>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_write_r+0x1e>
 8005140:	682b      	ldr	r3, [r5, #0]
 8005142:	b103      	cbz	r3, 8005146 <_write_r+0x1e>
 8005144:	6023      	str	r3, [r4, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	200005dc 	.word	0x200005dc

0800514c <_close_r>:
 800514c:	b538      	push	{r3, r4, r5, lr}
 800514e:	2300      	movs	r3, #0
 8005150:	4d05      	ldr	r5, [pc, #20]	; (8005168 <_close_r+0x1c>)
 8005152:	4604      	mov	r4, r0
 8005154:	4608      	mov	r0, r1
 8005156:	602b      	str	r3, [r5, #0]
 8005158:	f7fc fc91 	bl	8001a7e <_close>
 800515c:	1c43      	adds	r3, r0, #1
 800515e:	d102      	bne.n	8005166 <_close_r+0x1a>
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	b103      	cbz	r3, 8005166 <_close_r+0x1a>
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	bd38      	pop	{r3, r4, r5, pc}
 8005168:	200005dc 	.word	0x200005dc

0800516c <_fstat_r>:
 800516c:	b538      	push	{r3, r4, r5, lr}
 800516e:	2300      	movs	r3, #0
 8005170:	4d06      	ldr	r5, [pc, #24]	; (800518c <_fstat_r+0x20>)
 8005172:	4604      	mov	r4, r0
 8005174:	4608      	mov	r0, r1
 8005176:	4611      	mov	r1, r2
 8005178:	602b      	str	r3, [r5, #0]
 800517a:	f7fc fc8b 	bl	8001a94 <_fstat>
 800517e:	1c43      	adds	r3, r0, #1
 8005180:	d102      	bne.n	8005188 <_fstat_r+0x1c>
 8005182:	682b      	ldr	r3, [r5, #0]
 8005184:	b103      	cbz	r3, 8005188 <_fstat_r+0x1c>
 8005186:	6023      	str	r3, [r4, #0]
 8005188:	bd38      	pop	{r3, r4, r5, pc}
 800518a:	bf00      	nop
 800518c:	200005dc 	.word	0x200005dc

08005190 <_isatty_r>:
 8005190:	b538      	push	{r3, r4, r5, lr}
 8005192:	2300      	movs	r3, #0
 8005194:	4d05      	ldr	r5, [pc, #20]	; (80051ac <_isatty_r+0x1c>)
 8005196:	4604      	mov	r4, r0
 8005198:	4608      	mov	r0, r1
 800519a:	602b      	str	r3, [r5, #0]
 800519c:	f7fc fc89 	bl	8001ab2 <_isatty>
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	d102      	bne.n	80051aa <_isatty_r+0x1a>
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	b103      	cbz	r3, 80051aa <_isatty_r+0x1a>
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	bd38      	pop	{r3, r4, r5, pc}
 80051ac:	200005dc 	.word	0x200005dc

080051b0 <_lseek_r>:
 80051b0:	b538      	push	{r3, r4, r5, lr}
 80051b2:	4604      	mov	r4, r0
 80051b4:	4608      	mov	r0, r1
 80051b6:	4611      	mov	r1, r2
 80051b8:	2200      	movs	r2, #0
 80051ba:	4d05      	ldr	r5, [pc, #20]	; (80051d0 <_lseek_r+0x20>)
 80051bc:	602a      	str	r2, [r5, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	f7fc fc81 	bl	8001ac6 <_lseek>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d102      	bne.n	80051ce <_lseek_r+0x1e>
 80051c8:	682b      	ldr	r3, [r5, #0]
 80051ca:	b103      	cbz	r3, 80051ce <_lseek_r+0x1e>
 80051cc:	6023      	str	r3, [r4, #0]
 80051ce:	bd38      	pop	{r3, r4, r5, pc}
 80051d0:	200005dc 	.word	0x200005dc

080051d4 <memchr>:
 80051d4:	4603      	mov	r3, r0
 80051d6:	b510      	push	{r4, lr}
 80051d8:	b2c9      	uxtb	r1, r1
 80051da:	4402      	add	r2, r0
 80051dc:	4293      	cmp	r3, r2
 80051de:	4618      	mov	r0, r3
 80051e0:	d101      	bne.n	80051e6 <memchr+0x12>
 80051e2:	2000      	movs	r0, #0
 80051e4:	e003      	b.n	80051ee <memchr+0x1a>
 80051e6:	7804      	ldrb	r4, [r0, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	428c      	cmp	r4, r1
 80051ec:	d1f6      	bne.n	80051dc <memchr+0x8>
 80051ee:	bd10      	pop	{r4, pc}

080051f0 <memmove>:
 80051f0:	4288      	cmp	r0, r1
 80051f2:	b510      	push	{r4, lr}
 80051f4:	eb01 0402 	add.w	r4, r1, r2
 80051f8:	d902      	bls.n	8005200 <memmove+0x10>
 80051fa:	4284      	cmp	r4, r0
 80051fc:	4623      	mov	r3, r4
 80051fe:	d807      	bhi.n	8005210 <memmove+0x20>
 8005200:	1e43      	subs	r3, r0, #1
 8005202:	42a1      	cmp	r1, r4
 8005204:	d008      	beq.n	8005218 <memmove+0x28>
 8005206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800520a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800520e:	e7f8      	b.n	8005202 <memmove+0x12>
 8005210:	4601      	mov	r1, r0
 8005212:	4402      	add	r2, r0
 8005214:	428a      	cmp	r2, r1
 8005216:	d100      	bne.n	800521a <memmove+0x2a>
 8005218:	bd10      	pop	{r4, pc}
 800521a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800521e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005222:	e7f7      	b.n	8005214 <memmove+0x24>

08005224 <__malloc_lock>:
 8005224:	4801      	ldr	r0, [pc, #4]	; (800522c <__malloc_lock+0x8>)
 8005226:	f7ff b99d 	b.w	8004564 <__retarget_lock_acquire_recursive>
 800522a:	bf00      	nop
 800522c:	200005d0 	.word	0x200005d0

08005230 <__malloc_unlock>:
 8005230:	4801      	ldr	r0, [pc, #4]	; (8005238 <__malloc_unlock+0x8>)
 8005232:	f7ff b998 	b.w	8004566 <__retarget_lock_release_recursive>
 8005236:	bf00      	nop
 8005238:	200005d0 	.word	0x200005d0

0800523c <_realloc_r>:
 800523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005240:	4680      	mov	r8, r0
 8005242:	4614      	mov	r4, r2
 8005244:	460e      	mov	r6, r1
 8005246:	b921      	cbnz	r1, 8005252 <_realloc_r+0x16>
 8005248:	4611      	mov	r1, r2
 800524a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800524e:	f7ff ba59 	b.w	8004704 <_malloc_r>
 8005252:	b92a      	cbnz	r2, 8005260 <_realloc_r+0x24>
 8005254:	f7ff f9ee 	bl	8004634 <_free_r>
 8005258:	4625      	mov	r5, r4
 800525a:	4628      	mov	r0, r5
 800525c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005260:	f000 f82e 	bl	80052c0 <_malloc_usable_size_r>
 8005264:	4284      	cmp	r4, r0
 8005266:	4607      	mov	r7, r0
 8005268:	d802      	bhi.n	8005270 <_realloc_r+0x34>
 800526a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800526e:	d812      	bhi.n	8005296 <_realloc_r+0x5a>
 8005270:	4621      	mov	r1, r4
 8005272:	4640      	mov	r0, r8
 8005274:	f7ff fa46 	bl	8004704 <_malloc_r>
 8005278:	4605      	mov	r5, r0
 800527a:	2800      	cmp	r0, #0
 800527c:	d0ed      	beq.n	800525a <_realloc_r+0x1e>
 800527e:	42bc      	cmp	r4, r7
 8005280:	4622      	mov	r2, r4
 8005282:	4631      	mov	r1, r6
 8005284:	bf28      	it	cs
 8005286:	463a      	movcs	r2, r7
 8005288:	f7fe fe1e 	bl	8003ec8 <memcpy>
 800528c:	4631      	mov	r1, r6
 800528e:	4640      	mov	r0, r8
 8005290:	f7ff f9d0 	bl	8004634 <_free_r>
 8005294:	e7e1      	b.n	800525a <_realloc_r+0x1e>
 8005296:	4635      	mov	r5, r6
 8005298:	e7df      	b.n	800525a <_realloc_r+0x1e>
	...

0800529c <_read_r>:
 800529c:	b538      	push	{r3, r4, r5, lr}
 800529e:	4604      	mov	r4, r0
 80052a0:	4608      	mov	r0, r1
 80052a2:	4611      	mov	r1, r2
 80052a4:	2200      	movs	r2, #0
 80052a6:	4d05      	ldr	r5, [pc, #20]	; (80052bc <_read_r+0x20>)
 80052a8:	602a      	str	r2, [r5, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	f7fc fbae 	bl	8001a0c <_read>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d102      	bne.n	80052ba <_read_r+0x1e>
 80052b4:	682b      	ldr	r3, [r5, #0]
 80052b6:	b103      	cbz	r3, 80052ba <_read_r+0x1e>
 80052b8:	6023      	str	r3, [r4, #0]
 80052ba:	bd38      	pop	{r3, r4, r5, pc}
 80052bc:	200005dc 	.word	0x200005dc

080052c0 <_malloc_usable_size_r>:
 80052c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052c4:	1f18      	subs	r0, r3, #4
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	bfbc      	itt	lt
 80052ca:	580b      	ldrlt	r3, [r1, r0]
 80052cc:	18c0      	addlt	r0, r0, r3
 80052ce:	4770      	bx	lr

080052d0 <_init>:
 80052d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d2:	bf00      	nop
 80052d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052d6:	bc08      	pop	{r3}
 80052d8:	469e      	mov	lr, r3
 80052da:	4770      	bx	lr

080052dc <_fini>:
 80052dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052de:	bf00      	nop
 80052e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052e2:	bc08      	pop	{r3}
 80052e4:	469e      	mov	lr, r3
 80052e6:	4770      	bx	lr
